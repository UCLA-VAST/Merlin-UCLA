diff -du -r llvm/include/llvm/Analysis/LoopInfo.h llvm-3.1/include/llvm/Analysis/LoopInfo.h
--- llvm/include/llvm/Analysis/LoopInfo.h	2020-11-11 20:18:44.478370903 -0800
+++ llvm-3.1/include/llvm/Analysis/LoopInfo.h	2020-11-11 20:07:54.914353804 -0800
@@ -1044,6 +1044,7 @@
     // it as a replacement will not break LCSSA form.
     return ToLoop->contains(getLoopFor(From->getParent()));
   }
+
 };
 
 
diff -du -r llvm/include/llvm/Analysis/Passes.h llvm-3.1/include/llvm/Analysis/Passes.h
--- llvm/include/llvm/Analysis/Passes.h	2020-11-11 20:18:44.480370903 -0800
+++ llvm-3.1/include/llvm/Analysis/Passes.h	2020-11-11 20:07:54.915353804 -0800
@@ -183,6 +183,7 @@
 
   // print debug info intrinsics in human readable form
   FunctionPass *createDbgInfoPrinterPass();
+  FunctionPass *createDbgInfoPrinter_merlinPass();
 
   //===--------------------------------------------------------------------===//
   //
diff -du -r llvm/include/llvm/InitializePasses.h llvm-3.1/include/llvm/InitializePasses.h
--- llvm/include/llvm/InitializePasses.h	2020-11-11 20:18:44.524370905 -0800
+++ llvm-3.1/include/llvm/InitializePasses.h	2020-11-11 20:07:54.928353804 -0800
@@ -197,6 +197,7 @@
 void initializePostRASchedulerPass(PassRegistry&);
 void initializePreVerifierPass(PassRegistry&);
 void initializePrintDbgInfoPass(PassRegistry&);
+void initializePrintDbgInfo_merlinPass(PassRegistry&);
 void initializePrintFunctionPassPass(PassRegistry&);
 void initializePrintModulePassPass(PassRegistry&);
 void initializeProcessImplicitDefsPass(PassRegistry&);
diff -du -r llvm/include/llvm/LinkAllPasses.h llvm-3.1/include/llvm/LinkAllPasses.h
--- llvm/include/llvm/LinkAllPasses.h	2020-11-11 20:18:44.530370905 -0800
+++ llvm-3.1/include/llvm/LinkAllPasses.h	2020-11-11 20:07:54.931353804 -0800
@@ -144,6 +144,7 @@
       (void) llvm::createPrintModulePass(0);
       (void) llvm::createPrintFunctionPass("", 0);
       (void) llvm::createDbgInfoPrinterPass();
+      (void) llvm::createDbgInfoPrinter_merlinPass();
       (void) llvm::createModuleDebugInfoPrinterPass();
       (void) llvm::createPartialInliningPass();
       (void) llvm::createLintPass();
diff -du -r llvm/lib/Analysis/Analysis.cpp llvm-3.1/lib/Analysis/Analysis.cpp
--- llvm/lib/Analysis/Analysis.cpp	2020-11-11 20:18:44.578370906 -0800
+++ llvm-3.1/lib/Analysis/Analysis.cpp	2020-11-11 20:07:54.951353805 -0800
@@ -31,6 +31,7 @@
   initializeCFGOnlyViewerPass(Registry);
   initializeCFGOnlyPrinterPass(Registry);
   initializePrintDbgInfoPass(Registry);
+  initializePrintDbgInfo_merlinPass(Registry);
   initializeDominanceFrontierPass(Registry);
   initializeDomViewerPass(Registry);
   initializeDomPrinterPass(Registry);
diff -du -r llvm-3.1/lib/Analysis/DbgInfoPrinter_merlin.cpp
--- /dev/null
+++ llvm-3.1/lib/Analysis/DbgInfoPrinter_merlin.cpp
//===- DbgInfoPrinter_merlin.cpp - Print debug info in a human readable form ------==//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file implements a pass that prints instructions, and associated debug
// info:
// 
//   - source/line/col information
//   - original variable name
//   - original type name
//
//===----------------------------------------------------------------------===//

#include "llvm/Pass.h"
#include "llvm/Function.h"
#include "llvm/IntrinsicInst.h"
#include "llvm/Metadata.h"
#include "llvm/Module.h"
#include "llvm/Assembly/Writer.h"
#include "llvm/Analysis/DebugInfo.h"
#include "llvm/Analysis/Passes.h"
#include "llvm/Support/CFG.h"
#include "llvm/Support/CommandLine.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/Analysis/LoopInfo.h"
#include "llvm/Support/CallSite.h"
#include <sstream>
#include <queue>
using namespace llvm;

static cl::opt<bool>
PrintDirectoryMerlin("print-fullpath-merlin",
               cl::desc("Print fullpath when printing debug info"),
               cl::Hidden);

namespace {
  class PrintDbgInfo_merlin : public FunctionPass {
    raw_ostream &Out;
    LoopInfo *LI;
    DominatorTree *DT;
    std::map<std::string, std::vector<std::string> > LoopLocInfo;
    void printVariableDeclaration(const Value *V);
    void printLoopLocation(const Loop *L, std::string func_name, std::string prefix);
    void reorderSubLoops(const Loop *parent_L,
                         const Function *F, 
                         const std::vector<Loop*> &old_loops,
                         std::vector<Loop*> &new_loops);
    void traverseDFS(const BasicBlock* curr,
                     const Loop* parent_L, 
                     std::set<const BasicBlock*> &visited,
                     std::set<const BasicBlock*> &updated,
                     std::vector<int> &order_idx,
                     const std::map<const BasicBlock*, int> &old_loop2idx,
                     int &curr_idx);
    void reorder(const BasicBlock *start, const Loop* parent_L, 
                 std::vector<int> &order_idx,
                 const std::map<const BasicBlock*, int> &old_loop2idx);
  public:
    static char ID; // Pass identification
    PrintDbgInfo_merlin() : FunctionPass(ID), Out(errs()) {
      initializePrintDbgInfo_merlinPass(*PassRegistry::getPassRegistry());
    }

    virtual bool runOnFunction(Function &F);
    virtual void getAnalysisUsage(AnalysisUsage &AU) const {
      AU.addRequired<DominatorTree>();
      AU.addRequired<LoopInfo>();
      AU.setPreservesAll();
    }
    virtual bool doFinalization(Module &M);
    
    std::string legalizeName(std::string orig_name) {
      std::string ret;
      for (size_t i = 0; i < orig_name.size(); ++i) {
        char c = orig_name[i];
        if (isalnum(c) || c == '_')
          ret += c; 
        else
          ret += '_';
      }
      return ret;
    }
  };
  char PrintDbgInfo_merlin::ID = 0;
}

INITIALIZE_PASS_BEGIN(PrintDbgInfo_merlin, "print-dbginfo-merlin",
                "Print debug info in human readable form", true, true)
INITIALIZE_PASS_DEPENDENCY(LoopInfo)
INITIALIZE_PASS_END(PrintDbgInfo_merlin, "print-dbginfo-merlin",
                "Print debug info in human readable form", true, true)

FunctionPass *llvm::createDbgInfoPrinter_merlinPass() { return new PrintDbgInfo_merlin(); }

/// Find the debug info descriptor corresponding to this global variable.
static Value *findDbgGlobalDeclare(GlobalVariable *V) {
  const Module *M = V->getParent();
  NamedMDNode *NMD = M->getNamedMetadata("llvm.dbg.gv");
  if (!NMD)
    return 0;

  for (unsigned i = 0, e = NMD->getNumOperands(); i != e; ++i) {
    DIDescriptor DIG(cast<MDNode>(NMD->getOperand(i)));
    if (!DIG.isGlobalVariable())
      continue;
    if (DIGlobalVariable(DIG).getGlobal() == V)
      return DIG;
  }
  return 0;
}

/// Find the debug info descriptor corresponding to this function.
static Value *findDbgSubprogramDeclare(Function *V) {
  const Module *M = V->getParent();
  NamedMDNode *NMD = M->getNamedMetadata("llvm.dbg.sp");
  if (!NMD)
    return 0;

  for (unsigned i = 0, e = NMD->getNumOperands(); i != e; ++i) {
    DIDescriptor DIG(cast<MDNode>(NMD->getOperand(i)));
    if (!DIG.isSubprogram())
      continue;
    if (DISubprogram(DIG).getFunction() == V)
      return DIG;
  }
  return 0;
}

/// Finds the llvm.dbg.declare intrinsic corresponding to this value if any.
/// It looks through pointer casts too.
static const DbgDeclareInst *findDbgDeclare(const Value *V) {
  V = V->stripPointerCasts();

  if (!isa<Instruction>(V) && !isa<Argument>(V))
    return 0;

  const Function *F = NULL;
  if (const Instruction *I = dyn_cast<Instruction>(V))
    F = I->getParent()->getParent();
  else if (const Argument *A = dyn_cast<Argument>(V))
    F = A->getParent();

  for (Function::const_iterator FI = F->begin(), FE = F->end(); FI != FE; ++FI)
    for (BasicBlock::const_iterator BI = (*FI).begin(), BE = (*FI).end();
         BI != BE; ++BI)
      if (const DbgDeclareInst *DDI = dyn_cast<DbgDeclareInst>(BI))
        if (DDI->getAddress() == V)
          return DDI;

  return 0;
}

static bool getLocationInfo(const Value *V, std::string &DisplayName,
                            std::string &Type, unsigned &LineNo,
                            std::string &File, std::string &Dir) {
  DICompileUnit Unit;
  DIType TypeD;

  if (GlobalVariable *GV = dyn_cast<GlobalVariable>(const_cast<Value*>(V))) {
    Value *DIGV = findDbgGlobalDeclare(GV);
    if (!DIGV) return false;
    DIGlobalVariable Var(cast<MDNode>(DIGV));

    StringRef D = Var.getDisplayName();
    if (!D.empty())
      DisplayName = D;
    LineNo = Var.getLineNumber();
    Unit = Var.getCompileUnit();
    TypeD = Var.getType();
  } else if (Function *F = dyn_cast<Function>(const_cast<Value*>(V))){
    Value *DIF = findDbgSubprogramDeclare(F);
    if (!DIF) return false;
    DISubprogram Var(cast<MDNode>(DIF));

    StringRef D = Var.getDisplayName();
    if (!D.empty())
      DisplayName = D;
    LineNo = Var.getLineNumber();
    Unit = Var.getCompileUnit();
    TypeD = Var.getType();
  } else {
    const DbgDeclareInst *DDI = findDbgDeclare(V);
    if (!DDI) return false;
    DIVariable Var(cast<MDNode>(DDI->getVariable()));

    StringRef D = Var.getName();
    if (!D.empty())
      DisplayName = D;
    LineNo = Var.getLineNumber();
    Unit = Var.getCompileUnit();
    TypeD = Var.getType();
  }

  StringRef T = TypeD.getName();
  if (!T.empty())
    Type = T;
  StringRef F = Unit.getFilename();
  if (!F.empty())
    File = F;
  StringRef D = Unit.getDirectory();
  if (!D.empty())
    Dir = D;
  return true;
}

void PrintDbgInfo_merlin::printVariableDeclaration(const Value *V) {
  std::string DisplayName, File, Directory, Type;
  unsigned LineNo = 0;

  if (!getLocationInfo(V, DisplayName, Type, LineNo, File, Directory))
    return;

  Out << "; ";
  WriteAsOperand(Out, V, false, 0);
  if (isa<Function>(V)) 
    Out << " is function " << DisplayName
        << " of type " << Type << " declared at ";
  else
    Out << " is variable " << DisplayName
        << " of type " << Type << " declared at ";

  if (PrintDirectoryMerlin)
    Out << Directory << "/";

  Out << File << ":" << LineNo << "\n";
}

void PrintDbgInfo_merlin::reorder(const BasicBlock *start, 
                                  const Loop* parent_L,
                                  std::vector<int> &order_idx,
                                  const std::map<const BasicBlock*, int> &old_loop2idx) {
  std::queue<const BasicBlock*> q_blk;
  std::set<const BasicBlock*> visited;
  std::set<const BasicBlock*> updated;
  std::set<const BasicBlock*> pushed_succ;
  int curr_idx = 0;
  traverseDFS(start, parent_L, visited, updated, order_idx, old_loop2idx, curr_idx);
  return;
}

void PrintDbgInfo_merlin::traverseDFS(const BasicBlock* curr,
                                      const Loop* parent_L, 
                                      std::set<const BasicBlock*> &visited,
                                      std::set<const BasicBlock*> &updated,
                                      std::vector<int> &order_idx,
                                      const std::map<const BasicBlock*, int> &old_loop2idx,
                                      int &curr_idx) {
  if (visited.count(curr) > 0)
    return;
  visited.insert(curr);
  std::vector<const BasicBlock*> preds(pred_begin(curr), pred_end(curr));
  for (size_t i = 0; i < preds.size(); ++i) {
    const BasicBlock* pred = preds[i];
    // do not consider back edge
    if (Loop* L = LI->getLoopFor(curr))
      if (curr == L->getHeader() && L->contains(pred)) continue;
    if (visited.count(pred) > 0 || (parent_L && !parent_L->contains(pred))) continue;
    if (updated.count(pred) <= 0)
      traverseDFS(pred, parent_L, visited, updated, order_idx, old_loop2idx, curr_idx);
  }
  if (old_loop2idx.count(curr) > 0 && updated.count(curr) <= 0 ) {
    order_idx[old_loop2idx.find(curr)->second] = curr_idx;
    curr_idx++;
  }
  updated.insert(curr);
  std::vector<const BasicBlock*> succs(succ_begin(curr), succ_end(curr));
  for (size_t i = 0; i < succs.size(); ++i) {
    const BasicBlock* succ = succs[i];
    if ((parent_L && !parent_L->contains(succ)) || visited.count(succ) > 0) continue;
    traverseDFS(succ, parent_L, visited, updated, order_idx, old_loop2idx, curr_idx);
  }

  return;
}

void PrintDbgInfo_merlin::reorderSubLoops(const Loop *parent_L,
                                          const Function *F,
                                          const std::vector<Loop*> &old_loops,
                                          std::vector<Loop*> &new_loops) {
  if (old_loops.size() <= 1) {
    new_loops = old_loops;
    return;
  }
  new_loops.resize(old_loops.size());
  const BasicBlock* start = 0;
  if (parent_L) {
    start = parent_L->getLoopPreheader();
    if (!start) 
      start = parent_L->getHeader();
  } else if (F)
    start = &F->getEntryBlock();
  if (!start) {
    new_loops = old_loops;
    return;
  }
  std::vector<int> order_idx;
  order_idx.resize(old_loops.size());
  std::map<const BasicBlock*, int> old_loop2idx;
  for (size_t i = 0; i < old_loops.size(); ++i) 
    old_loop2idx[old_loops[i]->getHeader()] = i;
  reorder(start, parent_L, order_idx, old_loop2idx);
  for (size_t i = 0; i < old_loops.size(); ++i)
    new_loops[order_idx[i]] = old_loops[i];
  return;
}

void PrintDbgInfo_merlin::printLoopLocation(const Loop *L, std::string func_name, std::string prefix) {

  std::string file_name;
  std::string loop_name;
  MDNode *first_md = NULL;
#if 0
  if (!first_md) {
    // Try the pre-header first.
    if (BasicBlock *PHeadBB = L->getLoopPreheader())
      if (MDNode* md = PHeadBB->getTerminator()->getMetadata("dbg")) 
        first_md = md;
  }
  if (!first_md) {
    //If we have no pre-header or there are no instructions with debug
    // info in it, try the header.
    if (BasicBlock *HeadBB = L->getHeader())
      if (MDNode *md = HeadBB->getTerminator()->getMetadata("dbg"))
        first_md = md;
  }
#else
  if (!first_md) {
    // Try the header first.
    if (BasicBlock *HeadBB = L->getHeader())
      if (MDNode *md = HeadBB->getTerminator()->getMetadata("dbg"))
        first_md = md;
  }
  if (!first_md) {
    //If we have no header or there are no instructions with debug
    // info in it, try the pre-header.
    if (BasicBlock *PHeadBB = L->getLoopPreheader())
      if (MDNode* md = PHeadBB->getTerminator()->getMetadata("dbg")) 
        first_md = md;
  }
#endif
  std::vector<std::tuple<unsigned, unsigned, MDNode*> > vec_locs;
  bool find_loop_name = false;
  for (Loop::block_iterator blk_it = L->block_begin(); 
      blk_it != L->block_end(); ++blk_it) {
    BasicBlock* blk = *blk_it;
    if (LI->getLoopFor(blk) != L) continue;
    for (BasicBlock::iterator I = blk->begin(); I != blk->end(); ++I) {
      if (!find_loop_name && isa<CallInst>(*I)) {
        CallSite cs(&*I);
        Function* callee = cs.getCalledFunction();
        if (callee && callee->getName() == "_ssdm_op_SpecLoopName") {
          Value* arg = cs.getArgument(0);
          if (GlobalVariable *gv = dyn_cast<GlobalVariable>(arg))
            arg = gv->getInitializer();
          if (isa<ConstantDataArray>(arg)) {  
            loop_name = cast<ConstantDataArray>(arg)->getAsCString();
            find_loop_name = true;
          }
        }
      }
      MDNode *md = (*I).getMetadata("dbg");
      if (!md) continue;
      DILocation DI(md);
      vec_locs.push_back(std::make_tuple(DI.getLineNumber(), DI.getColumnNumber(), md));
      file_name = DI.getFilename();
    }
  }
  if (loop_name.empty())
    loop_name = prefix;

  std::sort(vec_locs.begin(), vec_locs.end());
  std::string loop_label = func_name + "-" + loop_name;
  if (vec_locs.size() <= 0 && !first_md) {
    Out << "Cannot find location of loop \'" << loop_label << "\'\n";
    return;
  }
  int line_num, col_num;
  if (!first_md) {
	first_md = std::get<2>(vec_locs[0]);
  }
  DILocation DI(first_md);
  bool innermost = true;
  std::vector<std::string> loop_loc_info;
  while (DI.Verify()) {
	file_name = DI.getFilename();
	line_num = DI.getLineNumber();
	col_num = DI.getColumnNumber();
	if (innermost) { 
	  Out << loop_label << " at file " << file_name << " line " 
		<< line_num << " col " << col_num << "\n";
	  innermost = false;
	} else
	  Out << "called in at file " << file_name << " line "
		<< line_num << " col " << col_num << "\n";
	loop_loc_info.push_back(file_name);
	std::ostringstream oss;
	oss << line_num;
	loop_loc_info.push_back(oss.str());
	oss.str("");
	oss << col_num;
	loop_loc_info.push_back(oss.str());
	DI = DI.getOrigLocation();
  }
  LoopLocInfo[loop_label] = loop_loc_info;
  size_t i = 0;
  std::vector<Loop*> subLoops = L->getSubLoops();
  std::vector<Loop*> new_subLoops;
  reorderSubLoops(L, 0, subLoops, new_subLoops);

  while (i < new_subLoops.size()) {
    Loop* sub_loop = new_subLoops[i];
    std::ostringstream oss;
    ++i;
    oss << i;
    printLoopLocation(sub_loop, func_name, loop_name + " " + oss.str());
  }
  return;
}

bool PrintDbgInfo_merlin::runOnFunction(Function &F) {
  if (F.isDeclaration())
    return false;
 
  Out << "function " << F.getName() << "\n\n";
  LI = &getAnalysis<LoopInfo>();
  DT = &getAnalysis<DominatorTree>();
  std::vector<Loop*> TopLoops(LI->begin(), LI->end());
  std::vector<Loop*> new_TopLoops;
  reorderSubLoops(0, &F, TopLoops, new_TopLoops);
  for (size_t i = 0; i < new_TopLoops.size(); ++i) {
    std::ostringstream oss;
    oss << (i + 1);
    std::string func_name = legalizeName(F.getName());
    std::string prefix = "Loop " + oss.str();
    printLoopLocation(new_TopLoops[i], func_name, prefix); 
  }
  return false;
}

bool PrintDbgInfo_merlin::doFinalization(Module &M) {
  std::string error_info;
  raw_fd_ostream json_output("loop_location.json", error_info); 
  json_output << "[";
  bool first = true;;
  for (std::map<std::string, std::vector<std::string> >::iterator I = LoopLocInfo.begin();
	  I != LoopLocInfo.end(); ++I) {
	if (first) first = false;
	else json_output << ",";
	json_output << "{\"" << I->first << "\": {";
	json_output << "\"filename\": \"" << I->second[0] << "\",";
	json_output << "\"linenum\": " << I->second[1] << ",";
	json_output << "\"colnum\": " << I->second[2] << ",";
	json_output << "\"inlined_funcation_calls\": [";
	bool call_first = true;
	for (size_t index = I->second.size() - 3; index >= 3; index -= 3) {
	  if (call_first) call_first = false;
	  else json_output << ",";
	  json_output << "{";
	  json_output << "\"filename\": \"" << I->second[index] << "\",";
	  json_output << "\"linenum\": " << I->second[index + 1] << ",";
	  json_output << "\"colnum\": " << I->second[index + 2] << "}";
	}
	json_output << "]";
	json_output << "}}";
  }
  json_output << "]";
  json_output.close();
  return false;
}

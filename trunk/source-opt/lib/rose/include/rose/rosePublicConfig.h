/* rose_config.h.  Generated from rose_config.h.in by configure.  */
/* rose_config.h.in.  Generated from configure.ac by autoheader.  */
/* this public header generated by /space/scratch/garyb/SCM/rose/scripts/publicConfiguration.pl */

/* define if the libboost_serialization is available */
#define ROSE_HAVE_BOOST_SERIALIZATION_LIB /**/

/* Define to 1 if you have the <pthread.h> header file. */
#define ROSE_HAVE_PTHREAD_H 1

/* Have the SQLITE3 library */
/* #undef ROSE_HAVE_SQLITE3 */

/* Define to 1 if you have the <sys/personality.h> header file. */
#define ROSE_HAVE_SYS_PERSONALITY_H 1

/* Define to the version of this package. */
#define ROSE_PACKAGE_VERSION "0.11.4.14"

/* apple Operating System (OS) being used to build ROSE */
/* #undef ROSE_APPLE_OS_VENDOR */

/* Determines how failed assertions should behave. */
#define ROSE_ASSERTION_BEHAVIOR ROSE_ASSERTION_EXIT

/* Location (unquoted) of Boost specified on configure line. */
#define ROSE_BOOST_PATH "/curr/software/merlin-deps/boost_1_67"

/* Version of Boost specified on configure line. */
#define ROSE_BOOST_VERSION 106700

/* Build ROSE to support the Binary Analysis */
/* #undef ROSE_BUILD_BINARY_ANALYSIS_SUPPORT */

/* Build ROSE to support the C preprocessor language */
#define ROSE_BUILD_CPP_LANGUAGE_SUPPORT /**/

/* Build ROSE to support the CUDA langauge */
/* #undef ROSE_BUILD_CUDA_LANGUAGE_SUPPORT */

/* Build ROSE to support the C++ langauge */
#define ROSE_BUILD_CXX_LANGUAGE_SUPPORT /**/

/* Build ROSE to support the C langauge */
#define ROSE_BUILD_C_LANGUAGE_SUPPORT /**/

/* Build ROSE to support the Fortran langauge */
/* #undef ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT */

/* Build ROSE to support the Java langauge */
/* #undef ROSE_BUILD_JAVA_LANGUAGE_SUPPORT */

/* Build ROSE to support the OpenCL langauge */
/* #undef ROSE_BUILD_OPENCL_LANGUAGE_SUPPORT */

/* Build ROSE to support the PHP langauge */
/* #undef ROSE_BUILD_PHP_LANGUAGE_SUPPORT */

/* Build ROSE projects directory */
/* #undef ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT */

/* Build ROSE to support the Python langauge */
/* #undef ROSE_BUILD_PYTHON_LANGUAGE_SUPPORT */

/* Build ROSE tests directory */
#define ROSE_BUILD_TESTS_DIRECTORY_SUPPORT /**/

/* Build ROSE tutorial directory */
/* #undef ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT */

/* CentOS Operating System (OS) being used to build ROSE */
#define ROSE_CENTOS_OS_VENDOR 

/* Location of ROSE Compile Tree. */
#define ROSE_COMPILE_TREE_PATH "/space/scratch/garyb/SCM/rose/scratch"

/* Encapsulates some important configuration details for Rose::initialize */
#define ROSE_CONFIG_TOKEN " boost-106700 gnu-4.9 pthread"

/* Debian Operating System (OS) being used to build ROSE */
/* #undef ROSE_DEBIAN_OS_VENDOR */

/* Controls large volumes of output spew useful for debugging new ADA/ROSE
   connection code */
/* #undef ROSE_DEBUG_EXPERIMENTAL_ADA_ROSE_CONNECTION */

/* Controls large volumes of output spew useful for debugging new COBOL/ROSE
   connection code */
/* #undef ROSE_DEBUG_EXPERIMENTAL_COBOL_ROSE_CONNECTION */

/* Controls large volumes of output spew useful for debugging new CSHARP/ROSE
   connection code */
/* #undef ROSE_DEBUG_EXPERIMENTAL_CSHARP_ROSE_CONNECTION */

/* Controls large volumes of output spew useful for debugging new JOVIAL/ROSE
   connection code */
/* #undef ROSE_DEBUG_EXPERIMENTAL_JOVIAL_ROSE_CONNECTION */

/* Controls large volumes of output spew useful for debugging new
   Octave/Matlab ROSE connection code */
/* #undef ROSE_DEBUG_EXPERIMENTAL_MATLAB_ROSE_CONNECTION */

/* Controls large volumes of output spew useful for debugging new OFP/ROSE
   connection code */
/* #undef ROSE_DEBUG_EXPERIMENTAL_OFP_ROSE_CONNECTION */

/* Controls large volumes of output spew useful for debugging new EDG/ROSE
   connection code */
/* #undef ROSE_DEBUG_NEW_EDG_ROSE_CONNECTION */

/* EDG major version number */
#define ROSE_EDG_MAJOR_VERSION_NUMBER 5

/* EDG minor version number */
#define ROSE_EDG_MINOR_VERSION_NUMBER 0

/* Define if you want a Python API */
/* #undef ROSE_ENABLE_PYTHON_API */

/* Enables development of experimental ada frontend */
/* #undef ROSE_EXPERIMENTAL_ADA_ROSE_CONNECTION */

/* Path to GNAT Ada compiler used in development of experimental ada frontend
   */
/* #undef ROSE_EXPERIMENTAL_ADA_ROSE_CONNECTION_GNAT_HOME */

/* Enables development of experimental cobol frontend */
/* #undef ROSE_EXPERIMENTAL_COBOL_ROSE_CONNECTION */

/* Enables development of experimental csharp frontend */
/* #undef ROSE_EXPERIMENTAL_CSHARP_ROSE_CONNECTION */

/* Path to Mono Csharp compiler used in development of experimental csharp
   frontend */
/* #undef ROSE_EXPERIMENTAL_CSHARP_ROSE_CONNECTION_MONO_HOME */

/* Path to Roslyn Csharp library used in development of experimental csharp
   frontend */
/* #undef ROSE_EXPERIMENTAL_CSHARP_ROSE_CONNECTION_ROSLYN_HOME */

/* Enables development of experimental fortran flang frontend */
/* #undef ROSE_EXPERIMENTAL_FLANG_ROSE_CONNECTION */

/* Enables development of experimental jovial frontend */
/* #undef ROSE_EXPERIMENTAL_JOVIAL_ROSE_CONNECTION */

/* Enables development of experimental Octave/Matlab frontend */
/* #undef ROSE_EXPERIMENTAL_MATLAB_ROSE_CONNECTION */

/* Enables development of experimental fortran frontend */
/* #undef ROSE_EXPERIMENTAL_OFP_ROSE_CONNECTION */

/* Defined if the Capstone library is available */
/* #undef ROSE_HAVE_CAPSTONE */

/* Defined if dlib is available. */
/* #undef ROSE_HAVE_DLIB */

/* Defined when libdwarf is available. */
/* #undef ROSE_HAVE_LIBDWARF */

/* Defined when libelf is available. */
/* #undef ROSE_HAVE_LIBELF */

/* Defined when libgcrypt is available. */
/* #undef ROSE_HAVE_LIBGCRYPT */

/* Defined when libmagic is available. */
/* #undef ROSE_HAVE_LIBMAGIC */

/* Defined if the pqxx library is available */
/* #undef ROSE_HAVE_LIBPQXX */

/* Defined if the readline library and headers are available. */
/* #undef ROSE_HAVE_LIBREADLINE */

/* Defined when libyaml-cpp is available */
/* #undef ROSE_HAVE_LIBYAML */

/* Defined when the Yices SMT-Solver library is present and should be used. */
/* #undef ROSE_HAVE_LIBYICES */

/* Define to 1 if you have Z3 libs and headers. */
/* #undef ROSE_HAVE_Z3 */

/* Define if z3_version.h exists */
/* #undef ROSE_HAVE_Z3_VERSION_H */

/* Location (unquoted) of the top directory path to which ROSE is installed.
   */
#define ROSE_INSTALLATION_PATH "/space/scratch/garyb/rose_v0.11.4.14-1-g3bc47c8"

/* Defined if the Armadillo library is available. */
/* #undef ROSE_MATLAB_USE_ARMADILLO */

/* OFP class path for Jave Virtual Machine */
#define ROSE_OFP_CLASSPATH /space/scratch/garyb/SCM/rose/src/3rdPartyLibraries/antlr-jars/antlr-3.5.2-complete.jar:/space/scratch/garyb/SCM/rose/src/3rdPartyLibraries/fortran-parser/OpenFortranParser-20200819-JDK8.jar

/* OFP jar file */
#define ROSE_OFP_JAR_FILE OpenFortranParser-20200819-JDK8.jar

/* OFP major version number */
#define ROSE_OFP_MAJOR_VERSION_NUMBER 0

/* OFP minor version number */
#define ROSE_OFP_MINOR_VERSION_NUMBER 8

/* OFP patch version number */
#define ROSE_OFP_PATCH_VERSION_NUMBER 7

/* OFP version number */
#define ROSE_OFP_VERSION_NUMBER 20200819-JDK8

/* RedHat Operating System (OS) major release number being used to build ROSE
   */
#define ROSE_OS_MAJOR_RELEASE_NUMBER 7

/* RedHat Operating System (OS) minor release number being used to build ROSE
   */
#define ROSE_OS_MINOR_RELEASE_NUMBER 3

/* RedHat Operating System (OS) being used to build ROSE */
/* #undef ROSE_REDHAT_OS_VENDOR */

/* Set SCM version information to ROSE version. */
#define ROSE_SCM_VERSION_ID "0.11.4.14"

/* Variable like LD_LIBRARY_PATH */
#define ROSE_SHLIBPATH_VAR "LD_LIBRARY_PATH"

/* Location of ROSE Source Tree. */
#define ROSE_SOURCE_TREE_PATH "/space/scratch/garyb/SCM/rose"

/* Ubuntu Operating System (OS) being used to build ROSE */
/* #undef ROSE_UBUNTU_OS_VENDOR */

/* Whether to use Candl support or not within ROSE */
/* #undef ROSE_USE_CANDL */

/* Use Clang for parsing C/C++-like languages */
/* #undef ROSE_USE_CLANG_FRONTEND */

/* Whether to use Cloog support or not within ROSE */
/* #undef ROSE_USE_CLOOG */

/* Enables support for __float80 and __float128 in EDG. */
#define ROSE_USE_EDG_QUAD_FLOAT /**/

/* Whether to use the new EDG version 4.12 */
/* #undef ROSE_USE_EDG_VERSION_4_12 */

/* Whether to use the new EDG version 5.0 */
#define ROSE_USE_EDG_VERSION_5_0 /**/

/* Whether to use the new EDG version 6.0 */
/* #undef ROSE_USE_EDG_VERSION_6_0 */

/* Whether to use the new EDG version 6.1 */
/* #undef ROSE_USE_EDG_VERSION_6_1 */

/* Defined if Ether from Georgia Tech is available. */
/* #undef ROSE_USE_ETHER */

/* Support for a list of warnings that will be treated as errors for ROSE
   development */
/* #undef ROSE_USE_FATAL_ROSE_WARNINGS_SUPPORT */

/* Mark that Intel FPP is used in backend */
/* #undef ROSE_USE_INTEL_FPP */

/* Whether to use a special no-reuse mode of memory pools */
/* #undef ROSE_USE_MEMORY_POOL_NO_REUSE */

/* Controls use of Microsoft MSVC features */
/* #undef ROSE_USE_MICROSOFT_EXTENSIONS */

/* Whether to use Parma Polyhedral Library (PPL) support or not within ROSE */
/* #undef ROSE_USE_PPL */

/* Whether to use ScopLib support or not within ROSE */
/* #undef ROSE_USE_SCOPLIB */

/* Whether to use smaller (but more numerous) generated files for the ROSE IR
   */
/* #undef ROSE_USE_SMALLER_GENERATED_FILES */

/* Support for an advanced uniform warning level for ROSE development */
/* #undef ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT */

/* Defined if the web toolkit Wt is available. */
#define ROSE_USE_WT 1

/* Whether to use the new graph IR nodes compatability option with older API
   */
/* #undef ROSE_USING_GRAPH_IR_NODES_FOR_BACKWARD_COMPATABILITY */

/* Integer encoded ROSE version A.B.C.D as ABBCCCDDD. */
#define ROSE_VERSION 110040014ul

/* Simple preprocessor as default in ROSE */
#define ROSE_WAVE_DEFAULT false

/* Location (unquoted) of Wave specified on configure line. */
#define ROSE_WAVE_PATH "/curr/software/merlin-deps/boost_1_67/wave"

/* libharu enabled */
#define ROSE_WITH_LIBHARU 1

/* Absolute name of yices executable, or the empty string. */
/* #undef ROSE_YICES */

/* Absolute name of z3 executable, or the empty string. */
#define ROSE_Z3 ""

/* The size of `int', as computed by sizeof. */
#define ROSE_SIZEOF_INT 4

/* The size of `long', as computed by sizeof. */
#define ROSE_SIZEOF_LONG 8

/* Controls use of ROSE support for ATerm Library. */
/* #undef ROSE_USE_ROSE_ATERM_SUPPORT */

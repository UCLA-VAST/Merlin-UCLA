// DO NOT EDIT -- This file is automatically generated.

#ifndef ROSE_STRINGIFY_H
#define ROSE_STRINGIFY_H
#include <boost/algorithm/string/predicate.hpp>
#include <boost/lexical_cast.hpp>
#include <string>
#include <vector>

namespace Rose {
/** Shortens names of int64_t stringifiers.
 *
 *  Enum stringifier functions are automatically and sometimes have very long names.  This class is intended to be a convenient
 *  way to make a locally short-named object that can be used in place of the long stringifier.
 *
 *  @code
 *   Stringifier stringifyType(stringifyBinaryAnalysisInstructionSemantics2DataFlowSemanticsDataFlowEdgeEdgeType);
 *   std::cout <<stringifyType(CLOBBER) <<"\n";
 *  @endcode */
class Stringifier {
    std::string(*stringifier_)(int64_t, const char*, bool);
public:
    Stringifier(std::string(*stringifier)(int64_t, const char*, bool)): stringifier_(stringifier) {}
    std::string operator()(int64_t n, const char *strip=NULL, bool canonic=false) {
        return stringifier_(n, strip, canonic);
    }
};
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programTransformation/implicitCodeGeneration/defaultFunctionGenerator.C line 17
namespace stringify {
    /** Convert defaultEnumFunctionType enum constant to a string. */
    const char* defaultEnumFunctionType(int64_t);

    /** Convert defaultEnumFunctionType enum constant to a string. */
    std::string defaultEnumFunctionType(int64_t, const std::string &strip);

    /** Return all defaultEnumFunctionType member values as a vector. */
    const std::vector<int64_t>& defaultEnumFunctionType();
}

namespace Rose {
    std::string stringify_defaultEnumFunctionType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_defaultEnumFunctionType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programTransformation/extractFunctionArgumentsNormalization/functionEvaluationOrderTraversal.h line 40
namespace stringify { namespace FunctionCallInfo {
    /** Convert FunctionCallInfo::InsertionMode enum constant to a string. */
    const char* InsertionMode(int64_t);

    /** Convert FunctionCallInfo::InsertionMode enum constant to a string. */
    std::string InsertionMode(int64_t, const std::string &strip);

    /** Return all FunctionCallInfo::InsertionMode member values as a vector. */
    const std::vector<int64_t>& InsertionMode();
}}

namespace Rose {
    std::string stringifyFunctionCallInfoInsertionMode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyFunctionCallInfoInsertionMode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programTransformation/ompLowering/omp_lowering.h line 37
namespace stringify { namespace OmpSupport {
    /** Convert OmpSupport::omp_rtl_enum enum constant to a string. */
    const char* omp_rtl_enum(int64_t);

    /** Convert OmpSupport::omp_rtl_enum enum constant to a string. */
    std::string omp_rtl_enum(int64_t, const std::string &strip);

    /** Return all OmpSupport::omp_rtl_enum member values as a vector. */
    const std::vector<int64_t>& omp_rtl_enum();
}}

namespace Rose {
    std::string stringifyOmpSupport_omp_rtl_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOmpSupport_omp_rtl_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programTransformation/ompLowering/xomp.c line 61
namespace stringify {
    /** Convert omp_rtl_enum enum constant to a string. */
    const char* omp_rtl_enum(int64_t);

    /** Convert omp_rtl_enum enum constant to a string. */
    std::string omp_rtl_enum(int64_t, const std::string &strip);

    /** Return all omp_rtl_enum member values as a vector. */
    const std::vector<int64_t>& omp_rtl_enum();
}

namespace Rose {
    std::string stringify_omp_rtl_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_omp_rtl_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/libraryIdentification/FunctionIdDatabaseInterface.h line 30
namespace stringify { namespace LibraryIdentification {
    /** Convert LibraryIdentification::DUPLICATE_OPTION enum constant to a string. */
    const char* DUPLICATE_OPTION(int64_t);

    /** Convert LibraryIdentification::DUPLICATE_OPTION enum constant to a string. */
    std::string DUPLICATE_OPTION(int64_t, const std::string &strip);

    /** Return all LibraryIdentification::DUPLICATE_OPTION member values as a vector. */
    const std::vector<int64_t>& DUPLICATE_OPTION();
}}

namespace Rose {
    std::string stringifyLibraryIdentificationDUPLICATE_OPTION(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyLibraryIdentificationDUPLICATE_OPTION();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinarySymbolicExprParser.h line 57
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace SymbolicExprParser { namespace Token {
    /** Convert Rose::BinaryAnalysis::SymbolicExprParser::Token::Type enum constant to a string. */
    const char* Type(int64_t);

    /** Convert Rose::BinaryAnalysis::SymbolicExprParser::Token::Type enum constant to a string. */
    std::string Type(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::SymbolicExprParser::Token::Type member values as a vector. */
    const std::vector<int64_t>& Type();
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisSymbolicExprParserTokenType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisSymbolicExprParserTokenType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/Concolic/ConcolicExecutor.h line 24
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Concolic { namespace InputVariables { namespace Variable {
    /** Convert Rose::BinaryAnalysis::Concolic::InputVariables::Variable::Whence enum constant to a string. */
    const char* Whence(int64_t);

    /** Convert Rose::BinaryAnalysis::Concolic::InputVariables::Variable::Whence enum constant to a string. */
    std::string Whence(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::Concolic::InputVariables::Variable::Whence member values as a vector. */
    const std::vector<int64_t>& Whence();
}}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisConcolicInputVariablesVariableWhence(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisConcolicInputVariablesVariableWhence();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/DwarfLineMapper.h line 20
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace DwarfLineMapper {
    /** Convert Rose::BinaryAnalysis::DwarfLineMapper::Direction enum constant to a string. */
    const char* Direction(int64_t);

    /** Convert Rose::BinaryAnalysis::DwarfLineMapper::Direction enum constant to a string. */
    std::string Direction(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::DwarfLineMapper::Direction member values as a vector. */
    const std::vector<int64_t>& Direction();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisDwarfLineMapperDirection(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisDwarfLineMapperDirection();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinaryDebugger.C line 28
namespace stringify {
    /** Convert __ptrace_request enum constant to a string. */
    const char* __ptrace_request(int64_t);

    /** Convert __ptrace_request enum constant to a string. */
    std::string __ptrace_request(int64_t, const std::string &strip);

    /** Return all __ptrace_request member values as a vector. */
    const std::vector<int64_t>& __ptrace_request();
}

namespace Rose {
    std::string stringify__ptrace_request(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify__ptrace_request();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinaryReachability.h line 25
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Reachability {
    /** Convert Rose::BinaryAnalysis::Reachability::Reason enum constant to a string. */
    const char* Reason(int64_t);

    /** Convert Rose::BinaryAnalysis::Reachability::Reason enum constant to a string. */
    std::string Reason(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::Reachability::Reason member values as a vector. */
    const std::vector<int64_t>& Reason();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisReachabilityReason(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisReachabilityReason();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinaryFunctionSimilarity.h line 73
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace FunctionSimilarity {
    /** Convert Rose::BinaryAnalysis::FunctionSimilarity::CValKind enum constant to a string. */
    const char* CValKind(int64_t);

    /** Convert Rose::BinaryAnalysis::FunctionSimilarity::CValKind enum constant to a string. */
    std::string CValKind(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::FunctionSimilarity::CValKind member values as a vector. */
    const std::vector<int64_t>& CValKind();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisFunctionSimilarityCValKind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisFunctionSimilarityCValKind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinaryFunctionSimilarity.h line 85
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace FunctionSimilarity {
    /** Convert Rose::BinaryAnalysis::FunctionSimilarity::Statistic enum constant to a string. */
    const char* Statistic(int64_t);

    /** Convert Rose::BinaryAnalysis::FunctionSimilarity::Statistic enum constant to a string. */
    std::string Statistic(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::FunctionSimilarity::Statistic member values as a vector. */
    const std::vector<int64_t>& Statistic();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisFunctionSimilarityStatistic(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisFunctionSimilarityStatistic();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinarySmtSolver.h line 45
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace SmtSolver {
    /** Convert Rose::BinaryAnalysis::SmtSolver::LinkMode enum constant to a string. */
    const char* LinkMode(int64_t);

    /** Convert Rose::BinaryAnalysis::SmtSolver::LinkMode enum constant to a string. */
    std::string LinkMode(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::SmtSolver::LinkMode member values as a vector. */
    const std::vector<int64_t>& LinkMode();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisSmtSolverLinkMode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisSmtSolverLinkMode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinarySmtSolver.h line 57
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace SmtSolver {
    /** Convert Rose::BinaryAnalysis::SmtSolver::Type enum constant to a string. */
    const char* Type(int64_t);

    /** Convert Rose::BinaryAnalysis::SmtSolver::Type enum constant to a string. */
    std::string Type(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::SmtSolver::Type member values as a vector. */
    const std::vector<int64_t>& Type();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisSmtSolverType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisSmtSolverType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinarySmtSolver.h line 81
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace SmtSolver {
    /** Convert Rose::BinaryAnalysis::SmtSolver::Satisfiable enum constant to a string. */
    const char* Satisfiable(int64_t);

    /** Convert Rose::BinaryAnalysis::SmtSolver::Satisfiable enum constant to a string. */
    std::string Satisfiable(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::SmtSolver::Satisfiable member values as a vector. */
    const std::vector<int64_t>& Satisfiable();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisSmtSolverSatisfiable(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisSmtSolverSatisfiable();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/instructionSemantics/DataFlowSemantics2.h line 37
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace InstructionSemantics2 { namespace DataFlowSemantics { namespace DataFlowEdge {
    /** Convert Rose::BinaryAnalysis::InstructionSemantics2::DataFlowSemantics::DataFlowEdge::EdgeType enum constant to a string. */
    const char* EdgeType(int64_t);

    /** Convert Rose::BinaryAnalysis::InstructionSemantics2::DataFlowSemantics::DataFlowEdge::EdgeType enum constant to a string. */
    std::string EdgeType(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::InstructionSemantics2::DataFlowSemantics::DataFlowEdge::EdgeType member values as a vector. */
    const std::vector<int64_t>& EdgeType();
}}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisInstructionSemantics2DataFlowSemanticsDataFlowEdgeEdgeType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisInstructionSemantics2DataFlowSemanticsDataFlowEdgeEdgeType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/instructionSemantics/BaseSemanticsTypes.h line 78
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace InstructionSemantics2 { namespace BaseSemantics {
    /** Convert Rose::BinaryAnalysis::InstructionSemantics2::BaseSemantics::InputOutputProperty enum constant to a string. */
    const char* InputOutputProperty(int64_t);

    /** Convert Rose::BinaryAnalysis::InstructionSemantics2::BaseSemantics::InputOutputProperty enum constant to a string. */
    std::string InputOutputProperty(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::InstructionSemantics2::BaseSemantics::InputOutputProperty member values as a vector. */
    const std::vector<int64_t>& InputOutputProperty();
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisInstructionSemantics2BaseSemanticsInputOutputProperty(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisInstructionSemantics2BaseSemanticsInputOutputProperty();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/instructionSemantics/DispatcherPowerpc.C line 18
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace InstructionSemantics2 { namespace UpdateCr {
    /** Convert Rose::BinaryAnalysis::InstructionSemantics2::UpdateCr::Flag enum constant to a string. */
    const char* Flag(int64_t);

    /** Convert Rose::BinaryAnalysis::InstructionSemantics2::UpdateCr::Flag enum constant to a string. */
    std::string Flag(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::InstructionSemantics2::UpdateCr::Flag member values as a vector. */
    const std::vector<int64_t>& Flag();
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisInstructionSemantics2UpdateCrFlag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisInstructionSemantics2UpdateCrFlag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/instructionSemantics/DispatcherPowerpc.C line 22
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace InstructionSemantics2 { namespace SaveLink {
    /** Convert Rose::BinaryAnalysis::InstructionSemantics2::SaveLink::Flag enum constant to a string. */
    const char* Flag(int64_t);

    /** Convert Rose::BinaryAnalysis::InstructionSemantics2::SaveLink::Flag enum constant to a string. */
    std::string Flag(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::InstructionSemantics2::SaveLink::Flag member values as a vector. */
    const std::vector<int64_t>& Flag();
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisInstructionSemantics2SaveLinkFlag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisInstructionSemantics2SaveLinkFlag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/instructionSemantics/IntervalSemantics2.C line 654
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace InstructionSemantics2 { namespace IntervalSemantics {
    /** Convert Rose::BinaryAnalysis::InstructionSemantics2::IntervalSemantics::Carry enum constant to a string. */
    const char* Carry(int64_t);

    /** Convert Rose::BinaryAnalysis::InstructionSemantics2::IntervalSemantics::Carry enum constant to a string. */
    std::string Carry(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::InstructionSemantics2::IntervalSemantics::Carry member values as a vector. */
    const std::vector<int64_t>& Carry();
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisInstructionSemantics2IntervalSemanticsCarry(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisInstructionSemantics2IntervalSemanticsCarry();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/instructionSemantics/SymbolicSemantics2.h line 65
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace InstructionSemantics2 { namespace SymbolicSemantics { namespace AllowSideEffects {
    /** Convert Rose::BinaryAnalysis::InstructionSemantics2::SymbolicSemantics::AllowSideEffects::Flag enum constant to a string. */
    const char* Flag(int64_t);

    /** Convert Rose::BinaryAnalysis::InstructionSemantics2::SymbolicSemantics::AllowSideEffects::Flag enum constant to a string. */
    std::string Flag(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::InstructionSemantics2::SymbolicSemantics::AllowSideEffects::Flag member values as a vector. */
    const std::vector<int64_t>& Flag();
}}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisInstructionSemantics2SymbolicSemanticsAllowSideEffectsFlag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisInstructionSemantics2SymbolicSemanticsAllowSideEffectsFlag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/instructionSemantics/SymbolicSemantics2.h line 769
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace InstructionSemantics2 { namespace SymbolicSemantics {
    /** Convert Rose::BinaryAnalysis::InstructionSemantics2::SymbolicSemantics::WritersMode enum constant to a string. */
    const char* WritersMode(int64_t);

    /** Convert Rose::BinaryAnalysis::InstructionSemantics2::SymbolicSemantics::WritersMode enum constant to a string. */
    std::string WritersMode(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::InstructionSemantics2::SymbolicSemantics::WritersMode member values as a vector. */
    const std::vector<int64_t>& WritersMode();
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisInstructionSemantics2SymbolicSemanticsWritersMode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisInstructionSemantics2SymbolicSemanticsWritersMode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/instructionSemantics/SymbolicSemantics2.h line 776
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace InstructionSemantics2 { namespace SymbolicSemantics {
    /** Convert Rose::BinaryAnalysis::InstructionSemantics2::SymbolicSemantics::DefinersMode enum constant to a string. */
    const char* DefinersMode(int64_t);

    /** Convert Rose::BinaryAnalysis::InstructionSemantics2::SymbolicSemantics::DefinersMode enum constant to a string. */
    std::string DefinersMode(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::InstructionSemantics2::SymbolicSemantics::DefinersMode member values as a vector. */
    const std::vector<int64_t>& DefinersMode();
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisInstructionSemantics2SymbolicSemanticsDefinersMode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisInstructionSemantics2SymbolicSemanticsDefinersMode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/instructionSemantics/DispatcherX86.h line 178
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace InstructionSemantics2 { namespace DispatcherX86 {
    /** Convert Rose::BinaryAnalysis::InstructionSemantics2::DispatcherX86::AccessMode enum constant to a string. */
    const char* AccessMode(int64_t);

    /** Convert Rose::BinaryAnalysis::InstructionSemantics2::DispatcherX86::AccessMode enum constant to a string. */
    std::string AccessMode(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::InstructionSemantics2::DispatcherX86::AccessMode member values as a vector. */
    const std::vector<int64_t>& AccessMode();
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisInstructionSemantics2DispatcherX86AccessMode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisInstructionSemantics2DispatcherX86AccessMode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinaryConcolic.h line 81
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Concolic { namespace Update {
    /** Convert Rose::BinaryAnalysis::Concolic::Update::Flag enum constant to a string. */
    const char* Flag(int64_t);

    /** Convert Rose::BinaryAnalysis::Concolic::Update::Flag enum constant to a string. */
    std::string Flag(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::Concolic::Update::Flag member values as a vector. */
    const std::vector<int64_t>& Flag();
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisConcolicUpdateFlag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisConcolicUpdateFlag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinaryTaintedFlow.h line 25
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace TaintedFlow {
    /** Convert Rose::BinaryAnalysis::TaintedFlow::Taintedness enum constant to a string. */
    const char* Taintedness(int64_t);

    /** Convert Rose::BinaryAnalysis::TaintedFlow::Taintedness enum constant to a string. */
    std::string Taintedness(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::TaintedFlow::Taintedness member values as a vector. */
    const std::vector<int64_t>& Taintedness();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisTaintedFlowTaintedness(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisTaintedFlowTaintedness();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinaryTaintedFlow.h line 32
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace TaintedFlow {
    /** Convert Rose::BinaryAnalysis::TaintedFlow::Approximation enum constant to a string. */
    const char* Approximation(int64_t);

    /** Convert Rose::BinaryAnalysis::TaintedFlow::Approximation enum constant to a string. */
    std::string Approximation(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::TaintedFlow::Approximation member values as a vector. */
    const std::vector<int64_t>& Approximation();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisTaintedFlowApproximation(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisTaintedFlowApproximation();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinarySymbolicExpr.h line 55
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace SymbolicExpr { namespace TypeStyle {
    /** Convert Rose::BinaryAnalysis::SymbolicExpr::TypeStyle::Flag enum constant to a string. */
    const char* Flag(int64_t);

    /** Convert Rose::BinaryAnalysis::SymbolicExpr::TypeStyle::Flag enum constant to a string. */
    std::string Flag(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::SymbolicExpr::TypeStyle::Flag member values as a vector. */
    const std::vector<int64_t>& Flag();
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisSymbolicExprTypeStyleFlag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisSymbolicExprTypeStyleFlag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinarySymbolicExpr.h line 73
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace SymbolicExpr {
    /** Convert Rose::BinaryAnalysis::SymbolicExpr::Operator enum constant to a string. */
    const char* Operator(int64_t);

    /** Convert Rose::BinaryAnalysis::SymbolicExpr::Operator enum constant to a string. */
    std::string Operator(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::SymbolicExpr::Operator member values as a vector. */
    const std::vector<int64_t>& Operator();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisSymbolicExprOperator(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisSymbolicExprOperator();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinarySymbolicExpr.h line 175
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace SymbolicExpr { namespace Formatter {
    /** Convert Rose::BinaryAnalysis::SymbolicExpr::Formatter::ShowComments enum constant to a string. */
    const char* ShowComments(int64_t);

    /** Convert Rose::BinaryAnalysis::SymbolicExpr::Formatter::ShowComments enum constant to a string. */
    std::string ShowComments(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::SymbolicExpr::Formatter::ShowComments member values as a vector. */
    const std::vector<int64_t>& ShowComments();
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisSymbolicExprFormatterShowComments(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisSymbolicExprFormatterShowComments();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinarySymbolicExpr.h line 195
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace SymbolicExpr {
    /** Convert Rose::BinaryAnalysis::SymbolicExpr::VisitAction enum constant to a string. */
    const char* VisitAction(int64_t);

    /** Convert Rose::BinaryAnalysis::SymbolicExpr::VisitAction enum constant to a string. */
    std::string VisitAction(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::SymbolicExpr::VisitAction member values as a vector. */
    const std::vector<int64_t>& VisitAction();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisSymbolicExprVisitAction(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisSymbolicExprVisitAction();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinarySymbolicExpr.h line 228
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace SymbolicExpr { namespace Type {
    /** Convert Rose::BinaryAnalysis::SymbolicExpr::Type::TypeClass enum constant to a string. */
    const char* TypeClass(int64_t);

    /** Convert Rose::BinaryAnalysis::SymbolicExpr::Type::TypeClass enum constant to a string. */
    std::string TypeClass(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::SymbolicExpr::Type::TypeClass member values as a vector. */
    const std::vector<int64_t>& TypeClass();
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisSymbolicExprTypeTypeClass(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisSymbolicExprTypeTypeClass();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinaryCodeInserter.h line 14
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Commit {
    /** Convert Rose::BinaryAnalysis::Commit::Boolean enum constant to a string. */
    const char* Boolean(int64_t);

    /** Convert Rose::BinaryAnalysis::Commit::Boolean enum constant to a string. */
    std::string Boolean(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::Commit::Boolean member values as a vector. */
    const std::vector<int64_t>& Boolean();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisCommitBoolean(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisCommitBoolean();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinaryCodeInserter.h line 24
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace CodeInserter {
    /** Convert Rose::BinaryAnalysis::CodeInserter::AggregationDirection enum constant to a string. */
    const char* AggregationDirection(int64_t);

    /** Convert Rose::BinaryAnalysis::CodeInserter::AggregationDirection enum constant to a string. */
    std::string AggregationDirection(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::CodeInserter::AggregationDirection member values as a vector. */
    const std::vector<int64_t>& AggregationDirection();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisCodeInserterAggregationDirection(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisCodeInserterAggregationDirection();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinaryCodeInserter.h line 30
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace CodeInserter {
    /** Convert Rose::BinaryAnalysis::CodeInserter::NopPadding enum constant to a string. */
    const char* NopPadding(int64_t);

    /** Convert Rose::BinaryAnalysis::CodeInserter::NopPadding enum constant to a string. */
    std::string NopPadding(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::CodeInserter::NopPadding member values as a vector. */
    const std::vector<int64_t>& NopPadding();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisCodeInserterNopPadding(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisCodeInserterNopPadding();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinaryCodeInserter.h line 54
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace CodeInserter {
    /** Convert Rose::BinaryAnalysis::CodeInserter::RelocType enum constant to a string. */
    const char* RelocType(int64_t);

    /** Convert Rose::BinaryAnalysis::CodeInserter::RelocType enum constant to a string. */
    std::string RelocType(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::CodeInserter::RelocType member values as a vector. */
    const std::vector<int64_t>& RelocType();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisCodeInserterRelocType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisCodeInserterRelocType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinaryCallingConvention.h line 53
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace CallingConvention {
    /** Convert Rose::BinaryAnalysis::CallingConvention::StackParameterOrder enum constant to a string. */
    const char* StackParameterOrder(int64_t);

    /** Convert Rose::BinaryAnalysis::CallingConvention::StackParameterOrder enum constant to a string. */
    std::string StackParameterOrder(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::CallingConvention::StackParameterOrder member values as a vector. */
    const std::vector<int64_t>& StackParameterOrder();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisCallingConventionStackParameterOrder(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisCallingConventionStackParameterOrder();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinaryCallingConvention.h line 60
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace CallingConvention {
    /** Convert Rose::BinaryAnalysis::CallingConvention::StackDirection enum constant to a string. */
    const char* StackDirection(int64_t);

    /** Convert Rose::BinaryAnalysis::CallingConvention::StackDirection enum constant to a string. */
    std::string StackDirection(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::CallingConvention::StackDirection member values as a vector. */
    const std::vector<int64_t>& StackDirection();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisCallingConventionStackDirection(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisCallingConventionStackDirection();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinaryCallingConvention.h line 66
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace CallingConvention {
    /** Convert Rose::BinaryAnalysis::CallingConvention::StackCleanup enum constant to a string. */
    const char* StackCleanup(int64_t);

    /** Convert Rose::BinaryAnalysis::CallingConvention::StackCleanup enum constant to a string. */
    std::string StackCleanup(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::CallingConvention::StackCleanup member values as a vector. */
    const std::vector<int64_t>& StackCleanup();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisCallingConventionStackCleanup(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisCallingConventionStackCleanup();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinaryCallingConvention.h line 90
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace CallingConvention { namespace ParameterLocation {
    /** Convert Rose::BinaryAnalysis::CallingConvention::ParameterLocation::Type enum constant to a string. */
    const char* Type(int64_t);

    /** Convert Rose::BinaryAnalysis::CallingConvention::ParameterLocation::Type enum constant to a string. */
    std::string Type(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::CallingConvention::ParameterLocation::Type member values as a vector. */
    const std::vector<int64_t>& Type();
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisCallingConventionParameterLocationType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisCallingConventionParameterLocationType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinaryFeasiblePath.h line 35
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace FeasiblePath {
    /** Convert Rose::BinaryAnalysis::FeasiblePath::SearchMode enum constant to a string. */
    const char* SearchMode(int64_t);

    /** Convert Rose::BinaryAnalysis::FeasiblePath::SearchMode enum constant to a string. */
    std::string SearchMode(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::FeasiblePath::SearchMode member values as a vector. */
    const std::vector<int64_t>& SearchMode();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisFeasiblePathSearchMode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisFeasiblePathSearchMode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinaryFeasiblePath.h line 42
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace FeasiblePath {
    /** Convert Rose::BinaryAnalysis::FeasiblePath::SemanticMemoryParadigm enum constant to a string. */
    const char* SemanticMemoryParadigm(int64_t);

    /** Convert Rose::BinaryAnalysis::FeasiblePath::SemanticMemoryParadigm enum constant to a string. */
    std::string SemanticMemoryParadigm(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::FeasiblePath::SemanticMemoryParadigm member values as a vector. */
    const std::vector<int64_t>& SemanticMemoryParadigm();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisFeasiblePathSemanticMemoryParadigm(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisFeasiblePathSemanticMemoryParadigm();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinaryFeasiblePath.h line 48
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace FeasiblePath {
    /** Convert Rose::BinaryAnalysis::FeasiblePath::EdgeVisitOrder enum constant to a string. */
    const char* EdgeVisitOrder(int64_t);

    /** Convert Rose::BinaryAnalysis::FeasiblePath::EdgeVisitOrder enum constant to a string. */
    std::string EdgeVisitOrder(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::FeasiblePath::EdgeVisitOrder member values as a vector. */
    const std::vector<int64_t>& EdgeVisitOrder();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisFeasiblePathEdgeVisitOrder(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisFeasiblePathEdgeVisitOrder();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinaryFeasiblePath.h line 55
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace FeasiblePath {
    /** Convert Rose::BinaryAnalysis::FeasiblePath::IoMode enum constant to a string. */
    const char* IoMode(int64_t);

    /** Convert Rose::BinaryAnalysis::FeasiblePath::IoMode enum constant to a string. */
    std::string IoMode(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::FeasiblePath::IoMode member values as a vector. */
    const std::vector<int64_t>& IoMode();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisFeasiblePathIoMode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisFeasiblePathIoMode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinaryFeasiblePath.h line 58
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace FeasiblePath {
    /** Convert Rose::BinaryAnalysis::FeasiblePath::MayOrMust enum constant to a string. */
    const char* MayOrMust(int64_t);

    /** Convert Rose::BinaryAnalysis::FeasiblePath::MayOrMust enum constant to a string. */
    std::string MayOrMust(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::FeasiblePath::MayOrMust member values as a vector. */
    const std::vector<int64_t>& MayOrMust();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisFeasiblePathMayOrMust(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisFeasiblePathMayOrMust();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinaryFeasiblePath.h line 172
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace FeasiblePath { namespace PathProcessor {
    /** Convert Rose::BinaryAnalysis::FeasiblePath::PathProcessor::Action enum constant to a string. */
    const char* Action(int64_t);

    /** Convert Rose::BinaryAnalysis::FeasiblePath::PathProcessor::Action enum constant to a string. */
    std::string Action(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::FeasiblePath::PathProcessor::Action member values as a vector. */
    const std::vector<int64_t>& Action();
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisFeasiblePathPathProcessorAction(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisFeasiblePathPathProcessorAction();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinaryMagic.h line 19
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace MagicNumber {
    /** Convert Rose::BinaryAnalysis::MagicNumber::Mechanism enum constant to a string. */
    const char* Mechanism(int64_t);

    /** Convert Rose::BinaryAnalysis::MagicNumber::Mechanism enum constant to a string. */
    std::string Mechanism(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::MagicNumber::Mechanism member values as a vector. */
    const std::vector<int64_t>& Mechanism();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisMagicNumberMechanism(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisMagicNumberMechanism();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinaryHotPatch.h line 31
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace HotPatch { namespace Record {
    /** Convert Rose::BinaryAnalysis::HotPatch::Record::Type enum constant to a string. */
    const char* Type(int64_t);

    /** Convert Rose::BinaryAnalysis::HotPatch::Record::Type enum constant to a string. */
    std::string Type(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::HotPatch::Record::Type member values as a vector. */
    const std::vector<int64_t>& Type();
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisHotPatchRecordType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisHotPatchRecordType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinaryHotPatch.h line 37
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace HotPatch { namespace Record {
    /** Convert Rose::BinaryAnalysis::HotPatch::Record::Behavior enum constant to a string. */
    const char* Behavior(int64_t);

    /** Convert Rose::BinaryAnalysis::HotPatch::Record::Behavior enum constant to a string. */
    std::string Behavior(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::HotPatch::Record::Behavior member values as a vector. */
    const std::vector<int64_t>& Behavior();
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisHotPatchRecordBehavior(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisHotPatchRecordBehavior();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinaryString.h line 198
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Strings {
    /** Convert Rose::BinaryAnalysis::Strings::State enum constant to a string. */
    const char* State(int64_t);

    /** Convert Rose::BinaryAnalysis::Strings::State enum constant to a string. */
    std::string State(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::Strings::State member values as a vector. */
    const std::vector<int64_t>& State();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisStringsState(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisStringsState();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinaryDebugger.h line 32
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Debugger {
    /** Convert Rose::BinaryAnalysis::Debugger::DetachMode enum constant to a string. */
    const char* DetachMode(int64_t);

    /** Convert Rose::BinaryAnalysis::Debugger::DetachMode enum constant to a string. */
    std::string DetachMode(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::Debugger::DetachMode member values as a vector. */
    const std::vector<int64_t>& DetachMode();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisDebuggerDetachMode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisDebuggerDetachMode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinaryDebugger.h line 40
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Debugger {
    /** Convert Rose::BinaryAnalysis::Debugger::Flag enum constant to a string. */
    const char* Flag(int64_t);

    /** Convert Rose::BinaryAnalysis::Debugger::Flag enum constant to a string. */
    std::string Flag(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::Debugger::Flag member values as a vector. */
    const std::vector<int64_t>& Flag();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisDebuggerFlag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisDebuggerFlag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinaryDebugger.h line 227
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Debugger {
    /** Convert Rose::BinaryAnalysis::Debugger::RegPageStatus enum constant to a string. */
    const char* RegPageStatus(int64_t);

    /** Convert Rose::BinaryAnalysis::Debugger::RegPageStatus enum constant to a string. */
    std::string RegPageStatus(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::Debugger::RegPageStatus member values as a vector. */
    const std::vector<int64_t>& RegPageStatus();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisDebuggerRegPageStatus(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisDebuggerRegPageStatus();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/BinaryAnalysis/BinaryDebugger.h line 340
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Debugger {
    /** Convert Rose::BinaryAnalysis::Debugger::FilterActionFlags enum constant to a string. */
    const char* FilterActionFlags(int64_t);

    /** Convert Rose::BinaryAnalysis::Debugger::FilterActionFlags enum constant to a string. */
    std::string FilterActionFlags(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::Debugger::FilterActionFlags member values as a vector. */
    const std::vector<int64_t>& FilterActionFlags();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisDebuggerFilterActionFlags(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisDebuggerFilterActionFlags();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/ssaUnfilteredCfg/reachingDefUnfilteredCfg.h line 19
namespace stringify { namespace ssa_unfiltered_cfg { namespace ReachingDef {
    /** Convert ssa_unfiltered_cfg::ReachingDef::Type enum constant to a string. */
    const char* Type(int64_t);

    /** Convert ssa_unfiltered_cfg::ReachingDef::Type enum constant to a string. */
    std::string Type(int64_t, const std::string &strip);

    /** Return all ssa_unfiltered_cfg::ReachingDef::Type member values as a vector. */
    const std::vector<int64_t>& Type();
}}}

namespace Rose {
    std::string stringify_ssa_unfiltered_cfgReachingDefType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_ssa_unfiltered_cfgReachingDefType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/genericDataflow/lattice/ConstrGraph.h line 42
namespace stringify { namespace ConstrGraph {
    /** Convert ConstrGraph::levels enum constant to a string. */
    const char* levels(int64_t);

    /** Convert ConstrGraph::levels enum constant to a string. */
    std::string levels(int64_t, const std::string &strip);

    /** Return all ConstrGraph::levels member values as a vector. */
    const std::vector<int64_t>& levels();
}}

namespace Rose {
    std::string stringifyConstrGraph_levels(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyConstrGraph_levels();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/genericDataflow/cfgUtils/CallGraphTraverse.h line 121
namespace stringify { namespace CGFunction { namespace iterator {
    /** Convert CGFunction::iterator::direction enum constant to a string. */
    const char* direction(int64_t);

    /** Convert CGFunction::iterator::direction enum constant to a string. */
    std::string direction(int64_t, const std::string &strip);

    /** Return all CGFunction::iterator::direction member values as a vector. */
    const std::vector<int64_t>& direction();
}}}

namespace Rose {
    std::string stringifyCGFunction_iterator_direction(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyCGFunction_iterator_direction();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/genericDataflow/simpleAnalyses/taintAnalysis.h line 60
namespace stringify { namespace TaintLattice {
    /** Convert TaintLattice::Vertex enum constant to a string. */
    const char* Vertex(int64_t);

    /** Convert TaintLattice::Vertex enum constant to a string. */
    std::string Vertex(int64_t, const std::string &strip);

    /** Return all TaintLattice::Vertex member values as a vector. */
    const std::vector<int64_t>& Vertex();
}}

namespace Rose {
    std::string stringifyTaintLatticeVertex(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyTaintLatticeVertex();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/EditDistance/TreeEditDistance.h line 60
namespace stringify { namespace Rose { namespace EditDistance { namespace TreeEditDistance {
    /** Convert Rose::EditDistance::TreeEditDistance::EditType enum constant to a string. */
    const char* EditType(int64_t);

    /** Convert Rose::EditDistance::TreeEditDistance::EditType enum constant to a string. */
    std::string EditType(int64_t, const std::string &strip);

    /** Return all Rose::EditDistance::TreeEditDistance::EditType member values as a vector. */
    const std::vector<int64_t>& EditType();
}}}}

namespace Rose {
    std::string stringifyEditDistanceTreeEditDistanceEditType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyEditDistanceTreeEditDistanceEditType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/OpenAnalysis/CFG/CFG.h line 83
namespace stringify { namespace CFG {
    /** Convert CFG::EdgeType enum constant to a string. */
    const char* EdgeType(int64_t);

    /** Convert CFG::EdgeType enum constant to a string. */
    std::string EdgeType(int64_t, const std::string &strip);

    /** Return all CFG::EdgeType member values as a vector. */
    const std::vector<int64_t>& EdgeType();
}}

namespace Rose {
    std::string stringifyCFG_EdgeType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyCFG_EdgeType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/OpenAnalysis/CFG/RIFG.h line 63
namespace stringify { namespace RIFG {
    /** Convert RIFG::EdgeDirection enum constant to a string. */
    const char* EdgeDirection(int64_t);

    /** Convert RIFG::EdgeDirection enum constant to a string. */
    std::string EdgeDirection(int64_t, const std::string &strip);

    /** Return all RIFG::EdgeDirection member values as a vector. */
    const std::vector<int64_t>& EdgeDirection();
}}

namespace Rose {
    std::string stringifyRIFG_EdgeDirection(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyRIFG_EdgeDirection();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/OpenAnalysis/CFG/RIFG.h line 64
namespace stringify { namespace RIFG {
    /** Convert RIFG::ForwardBackward enum constant to a string. */
    const char* ForwardBackward(int64_t);

    /** Convert RIFG::ForwardBackward enum constant to a string. */
    std::string ForwardBackward(int64_t, const std::string &strip);

    /** Return all RIFG::ForwardBackward member values as a vector. */
    const std::vector<int64_t>& ForwardBackward();
}}

namespace Rose {
    std::string stringifyRIFG_ForwardBackward(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyRIFG_ForwardBackward();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/OpenAnalysis/CFG/TarjanIntervals.h line 65
namespace stringify {
    /** Convert RITarjType enum constant to a string. */
    const char* RITarjType(int64_t);

    /** Convert RITarjType enum constant to a string. */
    std::string RITarjType(int64_t, const std::string &strip);

    /** Return all RITarjType member values as a vector. */
    const std::vector<int64_t>& RITarjType();
}

namespace Rose {
    std::string stringifyRITarjType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyRITarjType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/OpenAnalysis/CFG/TarjanIntervals.h line 67
namespace stringify {
    /** Convert RITarjEdgeType enum constant to a string. */
    const char* RITarjEdgeType(int64_t);

    /** Convert RITarjEdgeType enum constant to a string. */
    std::string RITarjEdgeType(int64_t, const std::string &strip);

    /** Return all RITarjEdgeType member values as a vector. */
    const std::vector<int64_t>& RITarjEdgeType();
}

namespace Rose {
    std::string stringifyRITarjEdgeType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyRITarjEdgeType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/OpenAnalysis/CallGraph/CallGraph.h line 73
namespace stringify { namespace CallGraph {
    /** Convert CallGraph::EdgeType enum constant to a string. */
    const char* EdgeType(int64_t);

    /** Convert CallGraph::EdgeType enum constant to a string. */
    std::string EdgeType(int64_t, const std::string &strip);

    /** Return all CallGraph::EdgeType member values as a vector. */
    const std::vector<int64_t>& EdgeType();
}}

namespace Rose {
    std::string stringifyCallGraphEdgeType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyCallGraphEdgeType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/OpenAnalysis/Utils/BaseGraph.h line 261
namespace stringify { namespace BaseGraph { namespace BiDirNodesIterator {
    /** Convert BaseGraph::BiDirNodesIterator::dirType enum constant to a string. */
    const char* dirType(int64_t);

    /** Convert BaseGraph::BiDirNodesIterator::dirType enum constant to a string. */
    std::string dirType(int64_t, const std::string &strip);

    /** Return all BaseGraph::BiDirNodesIterator::dirType member values as a vector. */
    const std::vector<int64_t>& dirType();
}}}

namespace Rose {
    std::string stringifyBaseGraphBiDirNodesIterator_dirType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBaseGraphBiDirNodesIterator_dirType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/OpenAnalysis/Interface/IRInterface.h line 163
namespace stringify {
    /** Convert IRProcType enum constant to a string. */
    const char* IRProcType(int64_t);

    /** Convert IRProcType enum constant to a string. */
    std::string IRProcType(int64_t, const std::string &strip);

    /** Return all IRProcType member values as a vector. */
    const std::vector<int64_t>& IRProcType();
}

namespace Rose {
    std::string stringifyIRProcType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyIRProcType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/OpenAnalysis/Interface/IRInterface.h line 173
namespace stringify {
    /** Convert IRStmtType enum constant to a string. */
    const char* IRStmtType(int64_t);

    /** Convert IRStmtType enum constant to a string. */
    std::string IRStmtType(int64_t, const std::string &strip);

    /** Return all IRStmtType member values as a vector. */
    const std::vector<int64_t>& IRStmtType();
}

namespace Rose {
    std::string stringifyIRStmtType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyIRStmtType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/VirtualFunctionAnalysis/PtrAliasAnalysis.h line 31
namespace stringify { namespace PtrAliasAnalysis {
    /** Convert PtrAliasAnalysis::COLOR enum constant to a string. */
    const char* COLOR(int64_t);

    /** Convert PtrAliasAnalysis::COLOR enum constant to a string. */
    std::string COLOR(int64_t, const std::string &strip);

    /** Return all PtrAliasAnalysis::COLOR member values as a vector. */
    const std::vector<int64_t>& COLOR();
}}

namespace Rose {
    std::string stringifyPtrAliasAnalysisCOLOR(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyPtrAliasAnalysisCOLOR();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/VirtualFunctionAnalysis/PtrAliasAnalysis.h line 33
namespace stringify { namespace PtrAliasAnalysis {
    /** Convert PtrAliasAnalysis::TRAVERSAL_TYPE enum constant to a string. */
    const char* TRAVERSAL_TYPE(int64_t);

    /** Convert PtrAliasAnalysis::TRAVERSAL_TYPE enum constant to a string. */
    std::string TRAVERSAL_TYPE(int64_t, const std::string &strip);

    /** Return all PtrAliasAnalysis::TRAVERSAL_TYPE member values as a vector. */
    const std::vector<int64_t>& TRAVERSAL_TYPE();
}}

namespace Rose {
    std::string stringifyPtrAliasAnalysisTRAVERSAL_TYPE(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyPtrAliasAnalysisTRAVERSAL_TYPE();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/VirtualFunctionAnalysis/IntraProcAliasAnalysis.h line 279
namespace stringify { namespace CollectAliasRelations {
    /** Convert CollectAliasRelations::COLOR enum constant to a string. */
    const char* COLOR(int64_t);

    /** Convert CollectAliasRelations::COLOR enum constant to a string. */
    std::string COLOR(int64_t, const std::string &strip);

    /** Return all CollectAliasRelations::COLOR member values as a vector. */
    const std::vector<int64_t>& COLOR();
}}

namespace Rose {
    std::string stringifyCollectAliasRelationsCOLOR(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyCollectAliasRelationsCOLOR();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/VirtualFunctionAnalysis/IntraProcAliasAnalysis.h line 280
namespace stringify { namespace CollectAliasRelations {
    /** Convert CollectAliasRelations::TRAVERSAL_TYPE enum constant to a string. */
    const char* TRAVERSAL_TYPE(int64_t);

    /** Convert CollectAliasRelations::TRAVERSAL_TYPE enum constant to a string. */
    std::string TRAVERSAL_TYPE(int64_t, const std::string &strip);

    /** Return all CollectAliasRelations::TRAVERSAL_TYPE member values as a vector. */
    const std::vector<int64_t>& TRAVERSAL_TYPE();
}}

namespace Rose {
    std::string stringifyCollectAliasRelationsTRAVERSAL_TYPE(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyCollectAliasRelationsTRAVERSAL_TYPE();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/dominatorTreesAndDominanceFrontiers/DominatorTree.h line 50
namespace stringify { namespace DominatorTreesAndDominanceFrontiers { namespace DominatorTree {
    /** Convert DominatorTreesAndDominanceFrontiers::DominatorTree::Direction enum constant to a string. */
    const char* Direction(int64_t);

    /** Convert DominatorTreesAndDominanceFrontiers::DominatorTree::Direction enum constant to a string. */
    std::string Direction(int64_t, const std::string &strip);

    /** Return all DominatorTreesAndDominanceFrontiers::DominatorTree::Direction member values as a vector. */
    const std::vector<int64_t>& Direction();
}}}

namespace Rose {
    std::string stringifyDominatorTreesAndDominanceFrontiersDominatorTreeDirection(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyDominatorTreesAndDominanceFrontiersDominatorTreeDirection();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/staticSingleAssignment/reachingDef.h line 18
namespace stringify { namespace ReachingDef {
    /** Convert ReachingDef::Type enum constant to a string. */
    const char* Type(int64_t);

    /** Convert ReachingDef::Type enum constant to a string. */
    std::string Type(int64_t, const std::string &strip);

    /** Return all ReachingDef::Type member values as a vector. */
    const std::vector<int64_t>& Type();
}}

namespace Rose {
    std::string stringifyReachingDefType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyReachingDefType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/arithmeticIntensity/ai_measurement.h line 25
namespace stringify { namespace ArithmeticIntensityMeasurement {
    /** Convert ArithmeticIntensityMeasurement::running_mode_enum enum constant to a string. */
    const char* running_mode_enum(int64_t);

    /** Convert ArithmeticIntensityMeasurement::running_mode_enum enum constant to a string. */
    std::string running_mode_enum(int64_t, const std::string &strip);

    /** Return all ArithmeticIntensityMeasurement::running_mode_enum member values as a vector. */
    const std::vector<int64_t>& running_mode_enum();
}}

namespace Rose {
    std::string stringifyArithmeticIntensityMeasurement_running_mode_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyArithmeticIntensityMeasurement_running_mode_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/arithmeticIntensity/ai_measurement.h line 30
namespace stringify { namespace ArithmeticIntensityMeasurement {
    /** Convert ArithmeticIntensityMeasurement::fp_operation_kind_enum enum constant to a string. */
    const char* fp_operation_kind_enum(int64_t);

    /** Convert ArithmeticIntensityMeasurement::fp_operation_kind_enum enum constant to a string. */
    std::string fp_operation_kind_enum(int64_t, const std::string &strip);

    /** Return all ArithmeticIntensityMeasurement::fp_operation_kind_enum member values as a vector. */
    const std::vector<int64_t>& fp_operation_kind_enum();
}}

namespace Rose {
    std::string stringifyArithmeticIntensityMeasurement_fp_operation_kind_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyArithmeticIntensityMeasurement_fp_operation_kind_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/systemDependenceGraph/PDG.h line 32
namespace stringify { namespace SDG { namespace PDGEdge {
    /** Convert SDG::PDGEdge::EdgeType enum constant to a string. */
    const char* EdgeType(int64_t);

    /** Convert SDG::PDGEdge::EdgeType enum constant to a string. */
    std::string EdgeType(int64_t, const std::string &strip);

    /** Return all SDG::PDGEdge::EdgeType member values as a vector. */
    const std::vector<int64_t>& EdgeType();
}}}

namespace Rose {
    std::string stringifySDG_PDGEdgeEdgeType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySDG_PDGEdgeEdgeType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/systemDependenceGraph/SDG.h line 21
namespace stringify { namespace SDG { namespace SDGNode {
    /** Convert SDG::SDGNode::NodeType enum constant to a string. */
    const char* NodeType(int64_t);

    /** Convert SDG::SDGNode::NodeType enum constant to a string. */
    std::string NodeType(int64_t, const std::string &strip);

    /** Return all SDG::SDGNode::NodeType member values as a vector. */
    const std::vector<int64_t>& NodeType();
}}}

namespace Rose {
    std::string stringifySDG_SDGNodeNodeType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySDG_SDGNodeNodeType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/systemDependenceGraph/SDG.h line 48
namespace stringify { namespace SDG { namespace SDGEdge {
    /** Convert SDG::SDGEdge::EdgeType enum constant to a string. */
    const char* EdgeType(int64_t);

    /** Convert SDG::SDGEdge::EdgeType enum constant to a string. */
    std::string EdgeType(int64_t, const std::string &strip);

    /** Return all SDG::SDGEdge::EdgeType member values as a vector. */
    const std::vector<int64_t>& EdgeType();
}}}

namespace Rose {
    std::string stringifySDG_SDGEdgeEdgeType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySDG_SDGEdgeEdgeType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/systemDependenceGraph/SDG.h line 58
namespace stringify { namespace SDG { namespace SDGEdge {
    /** Convert SDG::SDGEdge::ControlDependenceType enum constant to a string. */
    const char* ControlDependenceType(int64_t);

    /** Convert SDG::SDGEdge::ControlDependenceType enum constant to a string. */
    std::string ControlDependenceType(int64_t, const std::string &strip);

    /** Return all SDG::SDGEdge::ControlDependenceType member values as a vector. */
    const std::vector<int64_t>& ControlDependenceType();
}}}

namespace Rose {
    std::string stringifySDG_SDGEdgeControlDependenceType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySDG_SDGEdgeControlDependenceType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/programAnalysis/dominanceAnalysis/DominatorTree.h line 13
namespace stringify { namespace DominatorTreesAndDominanceFrontiers {
    /** Convert DominatorTreesAndDominanceFrontiers::Dir_ection enum constant to a string. */
    const char* Dir_ection(int64_t);

    /** Convert DominatorTreesAndDominanceFrontiers::Dir_ection enum constant to a string. */
    std::string Dir_ection(int64_t, const std::string &strip);

    /** Return all DominatorTreesAndDominanceFrontiers::Dir_ection member values as a vector. */
    const std::vector<int64_t>& Dir_ection();
}}

namespace Rose {
    std::string stringifyDominatorTreesAndDominanceFrontiersDir_ection(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyDominatorTreesAndDominanceFrontiersDir_ection();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astRewriteMechanism/rewrite.h line 52
namespace stringify { namespace MidLevelCollectionTypedefs {
    /** Convert MidLevelCollectionTypedefs::ScopeIdentifier_Enum enum constant to a string. */
    const char* ScopeIdentifier_Enum(int64_t);

    /** Convert MidLevelCollectionTypedefs::ScopeIdentifier_Enum enum constant to a string. */
    std::string ScopeIdentifier_Enum(int64_t, const std::string &strip);

    /** Return all MidLevelCollectionTypedefs::ScopeIdentifier_Enum member values as a vector. */
    const std::vector<int64_t>& ScopeIdentifier_Enum();
}}

namespace Rose {
    std::string stringifyMidLevelCollectionTypedefsScopeIdentifier_Enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyMidLevelCollectionTypedefsScopeIdentifier_Enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astRewriteMechanism/rewrite.h line 66
namespace stringify { namespace MidLevelCollectionTypedefs {
    /** Convert MidLevelCollectionTypedefs::PlacementPosition_Enum enum constant to a string. */
    const char* PlacementPosition_Enum(int64_t);

    /** Convert MidLevelCollectionTypedefs::PlacementPosition_Enum enum constant to a string. */
    std::string PlacementPosition_Enum(int64_t, const std::string &strip);

    /** Return all MidLevelCollectionTypedefs::PlacementPosition_Enum member values as a vector. */
    const std::vector<int64_t>& PlacementPosition_Enum();
}}

namespace Rose {
    std::string stringifyMidLevelCollectionTypedefsPlacementPosition_Enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyMidLevelCollectionTypedefsPlacementPosition_Enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astRewriteMechanism/rewrite.h line 79
namespace stringify { namespace MidLevelCollectionTypedefs {
    /** Convert MidLevelCollectionTypedefs::IntermediateFileStringPosition_Enum enum constant to a string. */
    const char* IntermediateFileStringPosition_Enum(int64_t);

    /** Convert MidLevelCollectionTypedefs::IntermediateFileStringPosition_Enum enum constant to a string. */
    std::string IntermediateFileStringPosition_Enum(int64_t, const std::string &strip);

    /** Return all MidLevelCollectionTypedefs::IntermediateFileStringPosition_Enum member values as a vector. */
    const std::vector<int64_t>& IntermediateFileStringPosition_Enum();
}}

namespace Rose {
    std::string stringifyMidLevelCollectionTypedefsIntermediateFileStringPosition_Enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyMidLevelCollectionTypedefsIntermediateFileStringPosition_Enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astRewriteMechanism/rewrite.h line 141
namespace stringify { namespace HighLevelCollectionTypedefs {
    /** Convert HighLevelCollectionTypedefs::ScopeIdentifier_Enum enum constant to a string. */
    const char* ScopeIdentifier_Enum(int64_t);

    /** Convert HighLevelCollectionTypedefs::ScopeIdentifier_Enum enum constant to a string. */
    std::string ScopeIdentifier_Enum(int64_t, const std::string &strip);

    /** Return all HighLevelCollectionTypedefs::ScopeIdentifier_Enum member values as a vector. */
    const std::vector<int64_t>& ScopeIdentifier_Enum();
}}

namespace Rose {
    std::string stringifyHighLevelCollectionTypedefsScopeIdentifier_Enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyHighLevelCollectionTypedefsScopeIdentifier_Enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astRewriteMechanism/rewrite.h line 162
namespace stringify { namespace HighLevelCollectionTypedefs {
    /** Convert HighLevelCollectionTypedefs::PlacementPosition_Enum enum constant to a string. */
    const char* PlacementPosition_Enum(int64_t);

    /** Convert HighLevelCollectionTypedefs::PlacementPosition_Enum enum constant to a string. */
    std::string PlacementPosition_Enum(int64_t, const std::string &strip);

    /** Return all HighLevelCollectionTypedefs::PlacementPosition_Enum member values as a vector. */
    const std::vector<int64_t>& PlacementPosition_Enum();
}}

namespace Rose {
    std::string stringifyHighLevelCollectionTypedefsPlacementPosition_Enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyHighLevelCollectionTypedefsPlacementPosition_Enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astRewriteMechanism/rewrite.h line 176
namespace stringify { namespace HighLevelCollectionTypedefs {
    /** Convert HighLevelCollectionTypedefs::IntermediateFileStringPosition_Enum enum constant to a string. */
    const char* IntermediateFileStringPosition_Enum(int64_t);

    /** Convert HighLevelCollectionTypedefs::IntermediateFileStringPosition_Enum enum constant to a string. */
    std::string IntermediateFileStringPosition_Enum(int64_t, const std::string &strip);

    /** Return all HighLevelCollectionTypedefs::IntermediateFileStringPosition_Enum member values as a vector. */
    const std::vector<int64_t>& IntermediateFileStringPosition_Enum();
}}

namespace Rose {
    std::string stringifyHighLevelCollectionTypedefsIntermediateFileStringPosition_Enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyHighLevelCollectionTypedefsIntermediateFileStringPosition_Enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astSnippet/Snippet.h line 319
namespace stringify { namespace Rose { namespace Snippet {
    /** Convert Rose::Snippet::InsertMechanism enum constant to a string. */
    const char* InsertMechanism(int64_t);

    /** Convert Rose::Snippet::InsertMechanism enum constant to a string. */
    std::string InsertMechanism(int64_t, const std::string &strip);

    /** Return all Rose::Snippet::InsertMechanism member values as a vector. */
    const std::vector<int64_t>& InsertMechanism();
}}}

namespace Rose {
    std::string stringifySnippetInsertMechanism(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySnippetInsertMechanism();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astSnippet/Snippet.h line 329
namespace stringify { namespace Rose { namespace Snippet {
    /** Convert Rose::Snippet::LocalDeclarationPosition enum constant to a string. */
    const char* LocalDeclarationPosition(int64_t);

    /** Convert Rose::Snippet::LocalDeclarationPosition enum constant to a string. */
    std::string LocalDeclarationPosition(int64_t, const std::string &strip);

    /** Return all Rose::Snippet::LocalDeclarationPosition member values as a vector. */
    const std::vector<int64_t>& LocalDeclarationPosition();
}}}

namespace Rose {
    std::string stringifySnippetLocalDeclarationPosition(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySnippetLocalDeclarationPosition();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/KLT/include/KLT/RTL/tile.h line 7
namespace stringify { namespace klt_tile_desc_t {
    /** Convert klt_tile_desc_t::tile_kind_e enum constant to a string. */
    const char* tile_kind_e(int64_t);

    /** Convert klt_tile_desc_t::tile_kind_e enum constant to a string. */
    std::string tile_kind_e(int64_t, const std::string &strip);

    /** Return all klt_tile_desc_t::tile_kind_e member values as a vector. */
    const std::vector<int64_t>& tile_kind_e();
}}

namespace Rose {
    std::string stringify_klt_tile_desc_t_tile_kind_e(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_klt_tile_desc_t_tile_kind_e();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/KLT/include/KLT/Core/looptree.hpp line 30
namespace stringify { namespace KLT { namespace LoopTree {
    /** Convert KLT::LoopTree::kind_e enum constant to a string. */
    const char* kind_e(int64_t);

    /** Convert KLT::LoopTree::kind_e enum constant to a string. */
    std::string kind_e(int64_t, const std::string &strip);

    /** Return all KLT::LoopTree::kind_e member values as a vector. */
    const std::vector<int64_t>& kind_e();
}}}

namespace Rose {
    std::string stringifyKLT_LoopTree_kind_e(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyKLT_LoopTree_kind_e();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/KLT/include/KLT/Core/descriptor.hpp line 18
namespace stringify { namespace KLT { namespace Descriptor {
    /** Convert KLT::Descriptor::tile_kind_e enum constant to a string. */
    const char* tile_kind_e(int64_t);

    /** Convert KLT::Descriptor::tile_kind_e enum constant to a string. */
    std::string tile_kind_e(int64_t, const std::string &strip);

    /** Return all KLT::Descriptor::tile_kind_e member values as a vector. */
    const std::vector<int64_t>& tile_kind_e();
}}}

namespace Rose {
    std::string stringifyKLT_Descriptor_tile_kind_e(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyKLT_Descriptor_tile_kind_e();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/abstractMemoryObject/memory_object_impl.h line 84
namespace stringify { namespace AbstractMemoryObject { namespace IndexSet {
    /** Convert AbstractMemoryObject::IndexSet::Index_type enum constant to a string. */
    const char* Index_type(int64_t);

    /** Convert AbstractMemoryObject::IndexSet::Index_type enum constant to a string. */
    std::string Index_type(int64_t, const std::string &strip);

    /** Return all AbstractMemoryObject::IndexSet::Index_type member values as a vector. */
    const std::vector<int64_t>& Index_type();
}}}

namespace Rose {
    std::string stringifyAbstractMemoryObjectIndexSetIndex_type(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyAbstractMemoryObjectIndexSetIndex_type();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/MDCG/include/MDCG/Model/base.hpp line 24
namespace stringify { namespace MDCG { namespace Model {
    /** Convert MDCG::Model::model_elements_e enum constant to a string. */
    const char* model_elements_e(int64_t);

    /** Convert MDCG::Model::model_elements_e enum constant to a string. */
    std::string model_elements_e(int64_t, const std::string &strip);

    /** Return all MDCG::Model::model_elements_e member values as a vector. */
    const std::vector<int64_t>& model_elements_e();
}}}

namespace Rose {
    std::string stringifyMDCG_Model_model_elements_e(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyMDCG_Model_model_elements_e();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/MDCG/include/MDCG/Model/base.hpp line 46
namespace stringify { namespace MDCG { namespace Model { namespace element_t {
    /** Convert MDCG::Model::element_t::kind_e enum constant to a string. */
    const char* kind_e(int64_t);

    /** Convert MDCG::Model::element_t::kind_e enum constant to a string. */
    std::string kind_e(int64_t, const std::string &strip);

    /** Return all MDCG::Model::element_t::kind_e member values as a vector. */
    const std::vector<int64_t>& kind_e();
}}}}

namespace Rose {
    std::string stringifyMDCG_Model_element_t_kind_e(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyMDCG_Model_element_t_kind_e();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astQuery/numberQuery.h line 10
namespace stringify { namespace NumberQuery {
    /** Convert NumberQuery::TypeOfQueryTypeOneParameter enum constant to a string. */
    const char* TypeOfQueryTypeOneParameter(int64_t);

    /** Convert NumberQuery::TypeOfQueryTypeOneParameter enum constant to a string. */
    std::string TypeOfQueryTypeOneParameter(int64_t, const std::string &strip);

    /** Return all NumberQuery::TypeOfQueryTypeOneParameter member values as a vector. */
    const std::vector<int64_t>& TypeOfQueryTypeOneParameter();
}}

namespace Rose {
    std::string stringifyNumberQueryTypeOfQueryTypeOneParameter(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyNumberQueryTypeOfQueryTypeOneParameter();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astQuery/numberQuery.h line 19
namespace stringify { namespace NumberQuery {
    /** Convert NumberQuery::TypeOfQueryTypeTwoParameters enum constant to a string. */
    const char* TypeOfQueryTypeTwoParameters(int64_t);

    /** Convert NumberQuery::TypeOfQueryTypeTwoParameters enum constant to a string. */
    std::string TypeOfQueryTypeTwoParameters(int64_t, const std::string &strip);

    /** Return all NumberQuery::TypeOfQueryTypeTwoParameters member values as a vector. */
    const std::vector<int64_t>& TypeOfQueryTypeTwoParameters();
}}

namespace Rose {
    std::string stringifyNumberQueryTypeOfQueryTypeTwoParameters(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyNumberQueryTypeOfQueryTypeTwoParameters();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astQuery/booleanQuery.h line 43
namespace stringify { namespace BooleanQuery {
    /** Convert BooleanQuery::TypeOfQueryType enum constant to a string. */
    const char* TypeOfQueryType(int64_t);

    /** Convert BooleanQuery::TypeOfQueryType enum constant to a string. */
    std::string TypeOfQueryType(int64_t, const std::string &strip);

    /** Return all BooleanQuery::TypeOfQueryType member values as a vector. */
    const std::vector<int64_t>& TypeOfQueryType();
}}

namespace Rose {
    std::string stringifyBooleanQueryTypeOfQueryType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBooleanQueryTypeOfQueryType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astQuery/astQuery.h line 96
namespace stringify { namespace AstQueryNamespace {
    /** Convert AstQueryNamespace::QueryDepth enum constant to a string. */
    const char* QueryDepth(int64_t);

    /** Convert AstQueryNamespace::QueryDepth enum constant to a string. */
    std::string QueryDepth(int64_t, const std::string &strip);

    /** Return all AstQueryNamespace::QueryDepth member values as a vector. */
    const std::vector<int64_t>& QueryDepth();
}}

namespace Rose {
    std::string stringifyAstQueryNamespaceQueryDepth(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyAstQueryNamespaceQueryDepth();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astQuery/nameQuery.h line 74
namespace stringify { namespace NameQuery {
    /** Convert NameQuery::TypeOfQueryTypeOneParameter enum constant to a string. */
    const char* TypeOfQueryTypeOneParameter(int64_t);

    /** Convert NameQuery::TypeOfQueryTypeOneParameter enum constant to a string. */
    std::string TypeOfQueryTypeOneParameter(int64_t, const std::string &strip);

    /** Return all NameQuery::TypeOfQueryTypeOneParameter member values as a vector. */
    const std::vector<int64_t>& TypeOfQueryTypeOneParameter();
}}

namespace Rose {
    std::string stringifyNameQueryTypeOfQueryTypeOneParameter(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyNameQueryTypeOfQueryTypeOneParameter();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astQuery/nameQuery.h line 94
namespace stringify { namespace NameQuery {
    /** Convert NameQuery::TypeOfQueryTypeTwoParameters enum constant to a string. */
    const char* TypeOfQueryTypeTwoParameters(int64_t);

    /** Convert NameQuery::TypeOfQueryTypeTwoParameters enum constant to a string. */
    std::string TypeOfQueryTypeTwoParameters(int64_t, const std::string &strip);

    /** Return all NameQuery::TypeOfQueryTypeTwoParameters member values as a vector. */
    const std::vector<int64_t>& TypeOfQueryTypeTwoParameters();
}}

namespace Rose {
    std::string stringifyNameQueryTypeOfQueryTypeTwoParameters(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyNameQueryTypeOfQueryTypeTwoParameters();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astQuery/nodeQuery.h line 133
namespace stringify { namespace NodeQuery {
    /** Convert NodeQuery::TypeOfQueryTypeOneParameter enum constant to a string. */
    const char* TypeOfQueryTypeOneParameter(int64_t);

    /** Convert NodeQuery::TypeOfQueryTypeOneParameter enum constant to a string. */
    std::string TypeOfQueryTypeOneParameter(int64_t, const std::string &strip);

    /** Return all NodeQuery::TypeOfQueryTypeOneParameter member values as a vector. */
    const std::vector<int64_t>& TypeOfQueryTypeOneParameter();
}}

namespace Rose {
    std::string stringifyNodeQueryTypeOfQueryTypeOneParameter(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyNodeQueryTypeOfQueryTypeOneParameter();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astQuery/nodeQuery.h line 154
namespace stringify { namespace NodeQuery {
    /** Convert NodeQuery::TypeOfQueryTypeTwoParameters enum constant to a string. */
    const char* TypeOfQueryTypeTwoParameters(int64_t);

    /** Convert NodeQuery::TypeOfQueryTypeTwoParameters enum constant to a string. */
    std::string TypeOfQueryTypeTwoParameters(int64_t, const std::string &strip);

    /** Return all NodeQuery::TypeOfQueryTypeTwoParameters member values as a vector. */
    const std::vector<int64_t>& TypeOfQueryTypeTwoParameters();
}}

namespace Rose {
    std::string stringifyNodeQueryTypeOfQueryTypeTwoParameters(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyNodeQueryTypeOfQueryTypeTwoParameters();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astMatching/MatchOperation.h line 42
namespace stringify { namespace MatchStatus {
    /** Convert MatchStatus::PatternMatchMode enum constant to a string. */
    const char* PatternMatchMode(int64_t);

    /** Convert MatchStatus::PatternMatchMode enum constant to a string. */
    std::string PatternMatchMode(int64_t, const std::string &strip);

    /** Return all MatchStatus::PatternMatchMode member values as a vector. */
    const std::vector<int64_t>& PatternMatchMode();
}}

namespace Rose {
    std::string stringifyMatchStatusPatternMatchMode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyMatchStatusPatternMatchMode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astMatching/MatchOperation.h line 43
namespace stringify { namespace MatchStatus {
    /** Convert MatchStatus::CheckNodeMode enum constant to a string. */
    const char* CheckNodeMode(int64_t);

    /** Convert MatchStatus::CheckNodeMode enum constant to a string. */
    std::string CheckNodeMode(int64_t, const std::string &strip);

    /** Return all MatchStatus::CheckNodeMode member values as a vector. */
    const std::vector<int64_t>& CheckNodeMode();
}}

namespace Rose {
    std::string stringifyMatchStatusCheckNodeMode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyMatchStatusCheckNodeMode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astMatching/matcherparser.h line 49
namespace stringify {
    /** Convert yytokentype enum constant to a string. */
    const char* yytokentype(int64_t);

    /** Convert yytokentype enum constant to a string. */
    std::string yytokentype(int64_t, const std::string &strip);

    /** Return all yytokentype member values as a vector. */
    const std::vector<int64_t>& yytokentype();
}

namespace Rose {
    std::string stringify_yytokentype(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_yytokentype();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/MFB/include/MFB/Sage/graph.hpp line 35
namespace stringify { namespace MFB { namespace Graph { namespace API {
    /** Convert MFB::Graph::API::link_kind_e enum constant to a string. */
    const char* link_kind_e(int64_t);

    /** Convert MFB::Graph::API::link_kind_e enum constant to a string. */
    std::string link_kind_e(int64_t, const std::string &strip);

    /** Return all MFB::Graph::API::link_kind_e member values as a vector. */
    const std::vector<int64_t>& link_kind_e();
}}}}

namespace Rose {
    std::string stringifyMFB_GraphAPIlink_kind_e(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyMFB_GraphAPIlink_kind_e();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/abstractLayer/Labeler.h line 60
namespace stringify { namespace CodeThorn { namespace LabelProperty {
    /** Convert CodeThorn::LabelProperty::LabelType enum constant to a string. */
    const char* LabelType(int64_t);

    /** Convert CodeThorn::LabelProperty::LabelType enum constant to a string. */
    std::string LabelType(int64_t, const std::string &strip);

    /** Return all CodeThorn::LabelProperty::LabelType member values as a vector. */
    const std::vector<int64_t>& LabelType();
}}}

namespace Rose {
    std::string stringifyCodeThornLabelPropertyLabelType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyCodeThornLabelPropertyLabelType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/abstractLayer/Labeler.h line 94
namespace stringify { namespace CodeThorn { namespace LabelProperty {
    /** Convert CodeThorn::LabelProperty::IOType enum constant to a string. */
    const char* IOType(int64_t);

    /** Convert CodeThorn::LabelProperty::IOType enum constant to a string. */
    std::string IOType(int64_t, const std::string &strip);

    /** Return all CodeThorn::LabelProperty::IOType member values as a vector. */
    const std::vector<int64_t>& IOType();
}}}

namespace Rose {
    std::string stringifyCodeThornLabelPropertyIOType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyCodeThornLabelPropertyIOType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/abstractLayer/SgNodeHelper.h line 526
namespace stringify { namespace SgNodeHelper { namespace Pattern { namespace OutputTarget {
    /** Convert SgNodeHelper::Pattern::OutputTarget::OType enum constant to a string. */
    const char* OType(int64_t);

    /** Convert SgNodeHelper::Pattern::OutputTarget::OType enum constant to a string. */
    std::string OType(int64_t, const std::string &strip);

    /** Return all SgNodeHelper::Pattern::OutputTarget::OType member values as a vector. */
    const std::vector<int64_t>& OType();
}}}}

namespace Rose {
    std::string stringifySgNodeHelperPatternOutputTargetOType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgNodeHelperPatternOutputTargetOType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astProcessing/AstRestructure.h line 22
namespace stringify { namespace AstUnparseAttribute {
    /** Convert AstUnparseAttribute::RelativePositionType enum constant to a string. */
    const char* RelativePositionType(int64_t);

    /** Convert AstUnparseAttribute::RelativePositionType enum constant to a string. */
    std::string RelativePositionType(int64_t, const std::string &strip);

    /** Return all AstUnparseAttribute::RelativePositionType member values as a vector. */
    const std::vector<int64_t>& RelativePositionType();
}}

namespace Rose {
    std::string stringifyAstUnparseAttributeRelativePositionType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyAstUnparseAttributeRelativePositionType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astProcessing/AstAttributeMechanism.h line 42
namespace stringify { namespace AstAttribute {
    /** Convert AstAttribute::OwnershipPolicy enum constant to a string. */
    const char* OwnershipPolicy(int64_t);

    /** Convert AstAttribute::OwnershipPolicy enum constant to a string. */
    std::string OwnershipPolicy(int64_t, const std::string &strip);

    /** Return all AstAttribute::OwnershipPolicy member values as a vector. */
    const std::vector<int64_t>& OwnershipPolicy();
}}

namespace Rose {
    std::string stringifyAstAttributeOwnershipPolicy(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyAstAttributeOwnershipPolicy();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/midend/astProcessing/AstAttributeMechanism.C line 21
namespace stringify {
    /** Convert WarningType enum constant to a string. */
    const char* WarningType(int64_t);

    /** Convert WarningType enum constant to a string. */
    std::string WarningType(int64_t, const std::string &strip);

    /** Return all WarningType member values as a vector. */
    const std::vector<int64_t>& WarningType();
}

namespace Rose {
    std::string stringifyWarningType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyWarningType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseSupport/CommandLine.C line 19
namespace stringify { namespace Rose { namespace CommandLine { namespace FailedAssertionBehaviorAdjuster {
    /** Convert Rose::CommandLine::FailedAssertionBehaviorAdjuster::Behavior enum constant to a string. */
    const char* Behavior(int64_t);

    /** Convert Rose::CommandLine::FailedAssertionBehaviorAdjuster::Behavior enum constant to a string. */
    std::string Behavior(int64_t, const std::string &strip);

    /** Return all Rose::CommandLine::FailedAssertionBehaviorAdjuster::Behavior member values as a vector. */
    const std::vector<int64_t>& Behavior();
}}}}

namespace Rose {
    std::string stringifyCommandLineFailedAssertionBehaviorAdjusterBehavior(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyCommandLineFailedAssertionBehaviorAdjusterBehavior();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseSupport/utility_functions.C line 808
namespace stringify {
    /** Convert language_enum enum constant to a string. */
    const char* language_enum(int64_t);

    /** Convert language_enum enum constant to a string. */
    std::string language_enum(int64_t, const std::string &strip);

    /** Return all language_enum member values as a vector. */
    const std::vector<int64_t>& language_enum();
}

namespace Rose {
    std::string stringify_language_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_language_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseSupport/transformationSupport.h line 37
namespace stringify { namespace TransformationSupport {
    /** Convert TransformationSupport::operatorCodeType enum constant to a string. */
    const char* operatorCodeType(int64_t);

    /** Convert TransformationSupport::operatorCodeType enum constant to a string. */
    std::string operatorCodeType(int64_t, const std::string &strip);

    /** Return all TransformationSupport::operatorCodeType member values as a vector. */
    const std::vector<int64_t>& operatorCodeType();
}}

namespace Rose {
    std::string stringifyTransformationSupport_operatorCodeType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyTransformationSupport_operatorCodeType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseSupport/callbacks.h line 14
namespace stringify { namespace Rose { namespace Callbacks {
    /** Convert Rose::Callbacks::Direction enum constant to a string. */
    const char* Direction(int64_t);

    /** Convert Rose::Callbacks::Direction enum constant to a string. */
    std::string Direction(int64_t, const std::string &strip);

    /** Return all Rose::Callbacks::Direction member values as a vector. */
    const std::vector<int64_t>& Direction();
}}}

namespace Rose {
    std::string stringifyCallbacksDirection(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyCallbacksDirection();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseSupport/SqlDatabase.h line 121
namespace stringify { namespace SqlDatabase {
    /** Convert SqlDatabase::Driver enum constant to a string. */
    const char* Driver(int64_t);

    /** Convert SqlDatabase::Driver enum constant to a string. */
    std::string Driver(int64_t, const std::string &strip);

    /** Return all SqlDatabase::Driver member values as a vector. */
    const std::vector<int64_t>& Driver();
}}

namespace Rose {
    std::string stringifySqlDatabaseDriver(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySqlDatabaseDriver();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/qpanellayout.h line 38
namespace stringify { namespace QPanelLayout {
    /** Convert QPanelLayout::Position enum constant to a string. */
    const char* Position(int64_t);

    /** Convert QPanelLayout::Position enum constant to a string. */
    std::string Position(int64_t, const std::string &strip);

    /** Return all QPanelLayout::Position member values as a vector. */
    const std::vector<int64_t>& Position();
}}

namespace Rose {
    std::string stringifyQPanelLayoutPosition(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyQPanelLayoutPosition();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/qpanellayout.h line 87
namespace stringify { namespace QPanelLayout {
    /** Convert QPanelLayout::SizeType enum constant to a string. */
    const char* SizeType(int64_t);

    /** Convert QPanelLayout::SizeType enum constant to a string. */
    std::string SizeType(int64_t, const std::string &strip);

    /** Return all QPanelLayout::SizeType member values as a vector. */
    const std::vector<int64_t>& SizeType();
}}

namespace Rose {
    std::string stringifyQPanelLayoutSizeType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyQPanelLayoutSizeType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/qlanguagedefinition.h line 44
namespace stringify { namespace QLanguageDefinition {
    /** Convert QLanguageDefinition::CollapseFlag enum constant to a string. */
    const char* CollapseFlag(int64_t);

    /** Convert QLanguageDefinition::CollapseFlag enum constant to a string. */
    std::string CollapseFlag(int64_t, const std::string &strip);

    /** Return all QLanguageDefinition::CollapseFlag member values as a vector. */
    const std::vector<int64_t>& CollapseFlag();
}}

namespace Rose {
    std::string stringifyQLanguageDefinitionCollapseFlag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyQLanguageDefinitionCollapseFlag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/document/qdocumentline.h line 38
namespace stringify { namespace QParenthesis {
    /** Convert QParenthesis::Role enum constant to a string. */
    const char* Role(int64_t);

    /** Convert QParenthesis::Role enum constant to a string. */
    std::string Role(int64_t, const std::string &strip);

    /** Return all QParenthesis::Role member values as a vector. */
    const std::vector<int64_t>& Role();
}}

namespace Rose {
    std::string stringifyQParenthesisRole(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyQParenthesisRole();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/document/qdocumentline.h line 69
namespace stringify { namespace QDocumentLine {
    /** Convert QDocumentLine::State enum constant to a string. */
    const char* State(int64_t);

    /** Convert QDocumentLine::State enum constant to a string. */
    std::string State(int64_t, const std::string &strip);

    /** Return all QDocumentLine::State member values as a vector. */
    const std::vector<int64_t>& State();
}}

namespace Rose {
    std::string stringifyQDocumentLineState(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyQDocumentLineState();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/document/qdocumentcursor.h line 39
namespace stringify { namespace QDocumentCursor {
    /** Convert QDocumentCursor::MoveFlag enum constant to a string. */
    const char* MoveFlag(int64_t);

    /** Convert QDocumentCursor::MoveFlag enum constant to a string. */
    std::string MoveFlag(int64_t, const std::string &strip);

    /** Return all QDocumentCursor::MoveFlag member values as a vector. */
    const std::vector<int64_t>& MoveFlag();
}}

namespace Rose {
    std::string stringifyQDocumentCursorMoveFlag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyQDocumentCursorMoveFlag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/document/qdocumentcursor.h line 48
namespace stringify { namespace QDocumentCursor {
    /** Convert QDocumentCursor::MoveOperation enum constant to a string. */
    const char* MoveOperation(int64_t);

    /** Convert QDocumentCursor::MoveOperation enum constant to a string. */
    std::string MoveOperation(int64_t, const std::string &strip);

    /** Return all QDocumentCursor::MoveOperation member values as a vector. */
    const std::vector<int64_t>& MoveOperation();
}}

namespace Rose {
    std::string stringifyQDocumentCursorMoveOperation(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyQDocumentCursorMoveOperation();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/document/qdocumentcursor.h line 75
namespace stringify { namespace QDocumentCursor {
    /** Convert QDocumentCursor::SelectionType enum constant to a string. */
    const char* SelectionType(int64_t);

    /** Convert QDocumentCursor::SelectionType enum constant to a string. */
    std::string SelectionType(int64_t, const std::string &strip);

    /** Return all QDocumentCursor::SelectionType member values as a vector. */
    const std::vector<int64_t>& SelectionType();
}}

namespace Rose {
    std::string stringifyQDocumentCursorSelectionType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyQDocumentCursorSelectionType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/document/qdocument.h line 84
namespace stringify { namespace QDocument {
    /** Convert QDocument::LineEnding enum constant to a string. */
    const char* LineEnding(int64_t);

    /** Convert QDocument::LineEnding enum constant to a string. */
    std::string LineEnding(int64_t, const std::string &strip);

    /** Return all QDocument::LineEnding member values as a vector. */
    const std::vector<int64_t>& LineEnding();
}}

namespace Rose {
    std::string stringifyQDocumentLineEnding(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyQDocumentLineEnding();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/document/qdocument.h line 93
namespace stringify { namespace QDocument {
    /** Convert QDocument::TextProcessing enum constant to a string. */
    const char* TextProcessing(int64_t);

    /** Convert QDocument::TextProcessing enum constant to a string. */
    std::string TextProcessing(int64_t, const std::string &strip);

    /** Return all QDocument::TextProcessing member values as a vector. */
    const std::vector<int64_t>& TextProcessing();
}}

namespace Rose {
    std::string stringifyQDocumentTextProcessing(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyQDocumentTextProcessing();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/document/qdocument.h line 100
namespace stringify { namespace QDocument {
    /** Convert QDocument::WhiteSpaceFlag enum constant to a string. */
    const char* WhiteSpaceFlag(int64_t);

    /** Convert QDocument::WhiteSpaceFlag enum constant to a string. */
    std::string WhiteSpaceFlag(int64_t, const std::string &strip);

    /** Return all QDocument::WhiteSpaceFlag member values as a vector. */
    const std::vector<int64_t>& WhiteSpaceFlag();
}}

namespace Rose {
    std::string stringifyQDocumentWhiteSpaceFlag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyQDocumentWhiteSpaceFlag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/document/qdocumentcommand.h line 37
namespace stringify { namespace QDocumentCommand {
    /** Convert QDocumentCommand::Command enum constant to a string. */
    const char* Command(int64_t);

    /** Convert QDocumentCommand::Command enum constant to a string. */
    std::string Command(int64_t, const std::string &strip);

    /** Return all QDocumentCommand::Command member values as a vector. */
    const std::vector<int64_t>& Command();
}}

namespace Rose {
    std::string stringifyQDocumentCommandCommand(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyQDocumentCommandCommand();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/document/qdocumentsearch.h line 40
namespace stringify { namespace QDocumentSearch {
    /** Convert QDocumentSearch::Option enum constant to a string. */
    const char* Option(int64_t);

    /** Convert QDocumentSearch::Option enum constant to a string. */
    std::string Option(int64_t, const std::string &strip);

    /** Return all QDocumentSearch::Option member values as a vector. */
    const std::vector<int64_t>& Option();
}}

namespace Rose {
    std::string stringifyQDocumentSearchOption(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyQDocumentSearchOption();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/document/qdocumentcursor_p.h line 52
namespace stringify { namespace QDocumentCursorHandle {
    /** Convert QDocumentCursorHandle::Flags enum constant to a string. */
    const char* Flags(int64_t);

    /** Convert QDocumentCursorHandle::Flags enum constant to a string. */
    std::string Flags(int64_t, const std::string &strip);

    /** Return all QDocumentCursorHandle::Flags member values as a vector. */
    const std::vector<int64_t>& Flags();
}}

namespace Rose {
    std::string stringifyQDocumentCursorHandleFlags(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyQDocumentCursorHandleFlags();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/qreliablefilewatch.h line 52
namespace stringify { namespace QReliableFileWatch {
    /** Convert QReliableFileWatch::State enum constant to a string. */
    const char* State(int64_t);

    /** Convert QReliableFileWatch::State enum constant to a string. */
    std::string State(int64_t, const std::string &strip);

    /** Return all QReliableFileWatch::State member values as a vector. */
    const std::vector<int64_t>& State();
}}

namespace Rose {
    std::string stringifyQReliableFileWatchState(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyQReliableFileWatchState();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/qnfa/qnfa.h line 42
namespace stringify {
    /** Convert NFAType enum constant to a string. */
    const char* NFAType(int64_t);

    /** Convert NFAType enum constant to a string. */
    std::string NFAType(int64_t, const std::string &strip);

    /** Return all NFAType member values as a vector. */
    const std::vector<int64_t>& NFAType();
}

namespace Rose {
    std::string stringifyNFAType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyNFAType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/qnfa/qnfa.h line 63
namespace stringify {
    /** Convert NFAAssertion enum constant to a string. */
    const char* NFAAssertion(int64_t);

    /** Convert NFAAssertion enum constant to a string. */
    std::string NFAAssertion(int64_t, const std::string &strip);

    /** Return all NFAAssertion member values as a vector. */
    const std::vector<int64_t>& NFAAssertion();
}

namespace Rose {
    std::string stringifyNFAAssertion(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyNFAAssertion();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/qnfa/qnfadefinition.h line 41
namespace stringify { namespace QNFAAction {
    /** Convert QNFAAction::QNFAAction_ enum constant to a string. */
    const char* QNFAAction_(int64_t);

    /** Convert QNFAAction::QNFAAction_ enum constant to a string. */
    std::string QNFAAction_(int64_t, const std::string &strip);

    /** Return all QNFAAction::QNFAAction_ member values as a vector. */
    const std::vector<int64_t>& QNFAAction_();
}}

namespace Rose {
    std::string stringifyQNFAActionQNFAAction_(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyQNFAActionQNFAAction_();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/qnfa/qnfadefinition.h line 129
namespace stringify { namespace QNFADefinition { namespace PMatch {
    /** Convert QNFADefinition::PMatch::Type enum constant to a string. */
    const char* Type(int64_t);

    /** Convert QNFADefinition::PMatch::Type enum constant to a string. */
    std::string Type(int64_t, const std::string &strip);

    /** Return all QNFADefinition::PMatch::Type member values as a vector. */
    const std::vector<int64_t>& Type();
}}}

namespace Rose {
    std::string stringifyQNFADefinitionPMatchType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyQNFADefinitionPMatchType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/qcodeedit.h line 46
namespace stringify { namespace QCodeEdit {
    /** Convert QCodeEdit::Position enum constant to a string. */
    const char* Position(int64_t);

    /** Convert QCodeEdit::Position enum constant to a string. */
    std::string Position(int64_t, const std::string &strip);

    /** Return all QCodeEdit::Position member values as a vector. */
    const std::vector<int64_t>& Position();
}}

namespace Rose {
    std::string stringifyQCodeEditPosition(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyQCodeEditPosition();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/qeditor.h line 64
namespace stringify { namespace QEditor {
    /** Convert QEditor::CodecUpdatePolicy enum constant to a string. */
    const char* CodecUpdatePolicy(int64_t);

    /** Convert QEditor::CodecUpdatePolicy enum constant to a string. */
    std::string CodecUpdatePolicy(int64_t, const std::string &strip);

    /** Return all QEditor::CodecUpdatePolicy member values as a vector. */
    const std::vector<int64_t>& CodecUpdatePolicy();
}}

namespace Rose {
    std::string stringifyQEditorCodecUpdatePolicy(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyQEditorCodecUpdatePolicy();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/qeditor.h line 74
namespace stringify { namespace QEditor {
    /** Convert QEditor::EditFlag enum constant to a string. */
    const char* EditFlag(int64_t);

    /** Convert QEditor::EditFlag enum constant to a string. */
    std::string EditFlag(int64_t, const std::string &strip);

    /** Return all QEditor::EditFlag member values as a vector. */
    const std::vector<int64_t>& EditFlag();
}}

namespace Rose {
    std::string stringifyQEditorEditFlag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyQEditorEditFlag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/qeditor.h line 493
namespace stringify { namespace QEditor {
    /** Convert QEditor::SaveState enum constant to a string. */
    const char* SaveState(int64_t);

    /** Convert QEditor::SaveState enum constant to a string. */
    std::string SaveState(int64_t, const std::string &strip);

    /** Return all QEditor::SaveState member values as a vector. */
    const std::vector<int64_t>& SaveState();
}}

namespace Rose {
    std::string stringifyQEditorSaveState(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyQEditorSaveState();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QtGradientEditor/qtcolorline.h line 62
namespace stringify { namespace QtColorLine {
    /** Convert QtColorLine::ColorComponent enum constant to a string. */
    const char* ColorComponent(int64_t);

    /** Convert QtColorLine::ColorComponent enum constant to a string. */
    std::string ColorComponent(int64_t, const std::string &strip);

    /** Return all QtColorLine::ColorComponent member values as a vector. */
    const std::vector<int64_t>& ColorComponent();
}}

namespace Rose {
    std::string stringifyQtColorLineColorComponent(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyQtColorLineColorComponent();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/QtGradientEditor/qtgradientwidget.cpp line 91
namespace stringify { namespace QtGradientWidgetPrivate {
    /** Convert QtGradientWidgetPrivate::Handle enum constant to a string. */
    const char* Handle(int64_t);

    /** Convert QtGradientWidgetPrivate::Handle enum constant to a string. */
    std::string Handle(int64_t, const std::string &strip);

    /** Return all QtGradientWidgetPrivate::Handle member values as a vector. */
    const std::vector<int64_t>& Handle();
}}

namespace Rose {
    std::string stringifyQtGradientWidgetPrivateHandle(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyQtGradientWidgetPrivateHandle();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/TaskSystem/TaskInterface.h line 25
namespace stringify { namespace Task {
    /** Convert Task::State enum constant to a string. */
    const char* State(int64_t);

    /** Convert Task::State enum constant to a string. */
    std::string State(int64_t, const std::string &strip);

    /** Return all Task::State member values as a vector. */
    const std::vector<int64_t>& State();
}}

namespace Rose {
    std::string stringifyTaskState(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyTaskState();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/TaskSystem/CompilerOutputWidget.h line 25
namespace stringify { namespace CompilerOutputWidget {
    /** Convert CompilerOutputWidget::PatternType enum constant to a string. */
    const char* PatternType(int64_t);

    /** Convert CompilerOutputWidget::PatternType enum constant to a string. */
    std::string PatternType(int64_t, const std::string &strip);

    /** Return all CompilerOutputWidget::PatternType member values as a vector. */
    const std::vector<int64_t>& PatternType();
}}

namespace Rose {
    std::string stringifyCompilerOutputWidgetPatternType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyCompilerOutputWidgetPatternType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/AstGraphWidget/DisplayEdge.h line 40
namespace stringify { namespace DisplayEdge {
    /** Convert DisplayEdge::PaintMode enum constant to a string. */
    const char* PaintMode(int64_t);

    /** Convert DisplayEdge::PaintMode enum constant to a string. */
    std::string PaintMode(int64_t, const std::string &strip);

    /** Return all DisplayEdge::PaintMode member values as a vector. */
    const std::vector<int64_t>& PaintMode();
}}

namespace Rose {
    std::string stringifyDisplayEdgePaintMode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyDisplayEdgePaintMode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/util/AstDisplayInfo.h line 14
namespace stringify { namespace AstDisplayInfo {
    /** Convert AstDisplayInfo::NodeType enum constant to a string. */
    const char* NodeType(int64_t);

    /** Convert AstDisplayInfo::NodeType enum constant to a string. */
    std::string NodeType(int64_t, const std::string &strip);

    /** Return all AstDisplayInfo::NodeType member values as a vector. */
    const std::vector<int64_t>& NodeType();
}}

namespace Rose {
    std::string stringifyAstDisplayInfoNodeType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyAstDisplayInfoNodeType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/qtWidgets/ProjectManager/DependencyInfo.h line 20
namespace stringify { namespace DependencyInfo {
    /** Convert DependencyInfo::State enum constant to a string. */
    const char* State(int64_t);

    /** Convert DependencyInfo::State enum constant to a string. */
    std::string State(int64_t, const std::string &strip);

    /** Return all DependencyInfo::State member values as a vector. */
    const std::vector<int64_t>& State();
}}

namespace Rose {
    std::string stringifyDependencyInfoState(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyDependencyInfoState();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/failSafe/failSafePragma.h line 31
namespace stringify { namespace FailSafe {
    /** Convert FailSafe::fail_safe_enum enum constant to a string. */
    const char* fail_safe_enum(int64_t);

    /** Convert FailSafe::fail_safe_enum enum constant to a string. */
    std::string fail_safe_enum(int64_t, const std::string &strip);

    /** Return all FailSafe::fail_safe_enum member values as a vector. */
    const std::vector<int64_t>& fail_safe_enum();
}}

namespace Rose {
    std::string stringifyFailSafe_fail_safe_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyFailSafe_fail_safe_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/dataStructureTraversal/exampleTest.C line 3
namespace stringify {
    /** Convert controlEnum enum constant to a string. */
    const char* controlEnum(int64_t);

    /** Convert controlEnum enum constant to a string. */
    std::string controlEnum(int64_t, const std::string &strip);

    /** Return all controlEnum member values as a vector. */
    const std::vector<int64_t>& controlEnum();
}

namespace Rose {
    std::string stringify_controlEnum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_controlEnum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/roseExtensions/dataStructureTraversal/GenRepresentation.h line 23
namespace stringify { namespace GenRepresentation {
    /** Convert GenRepresentation::TypeOfPrint enum constant to a string. */
    const char* TypeOfPrint(int64_t);

    /** Convert GenRepresentation::TypeOfPrint enum constant to a string. */
    std::string TypeOfPrint(int64_t, const std::string &strip);

    /** Return all GenRepresentation::TypeOfPrint member values as a vector. */
    const std::vector<int64_t>& TypeOfPrint();
}}

namespace Rose {
    std::string stringifyGenRepresentationTypeOfPrint(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyGenRepresentationTypeOfPrint();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/backend/unparser/languageIndependenceSupport/unparseLanguageIndependentConstructs.h line 19
namespace stringify {
    /** Convert AssociativitySpecifier enum constant to a string. */
    const char* AssociativitySpecifier(int64_t);

    /** Convert AssociativitySpecifier enum constant to a string. */
    std::string AssociativitySpecifier(int64_t, const std::string &strip);

    /** Return all AssociativitySpecifier member values as a vector. */
    const std::vector<int64_t>& AssociativitySpecifier();
}

namespace Rose {
    std::string stringifyAssociativitySpecifier(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyAssociativitySpecifier();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/backend/unparser/languageIndependenceSupport/unparseLanguageIndependentConstructs.h line 46
namespace stringify { namespace UnparseLanguageIndependentConstructs {
    /** Convert UnparseLanguageIndependentConstructs::token_sequence_position_enum_type enum constant to a string. */
    const char* token_sequence_position_enum_type(int64_t);

    /** Convert UnparseLanguageIndependentConstructs::token_sequence_position_enum_type enum constant to a string. */
    std::string token_sequence_position_enum_type(int64_t, const std::string &strip);

    /** Return all UnparseLanguageIndependentConstructs::token_sequence_position_enum_type member values as a vector. */
    const std::vector<int64_t>& token_sequence_position_enum_type();
}}

namespace Rose {
    std::string stringifyUnparseLanguageIndependentConstructs_token_sequence_position_enum_type(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyUnparseLanguageIndependentConstructs_token_sequence_position_enum_type();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/backend/unparser/languageIndependenceSupport/unparseLanguageIndependentConstructs.h line 74
namespace stringify { namespace UnparseLanguageIndependentConstructs {
    /** Convert UnparseLanguageIndependentConstructs::unparsed_as_enum_type enum constant to a string. */
    const char* unparsed_as_enum_type(int64_t);

    /** Convert UnparseLanguageIndependentConstructs::unparsed_as_enum_type enum constant to a string. */
    std::string unparsed_as_enum_type(int64_t, const std::string &strip);

    /** Return all UnparseLanguageIndependentConstructs::unparsed_as_enum_type member values as a vector. */
    const std::vector<int64_t>& unparsed_as_enum_type();
}}

namespace Rose {
    std::string stringifyUnparseLanguageIndependentConstructs_unparsed_as_enum_type(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyUnparseLanguageIndependentConstructs_unparsed_as_enum_type();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/backend/unparser/unparser.h line 205
namespace stringify { namespace Unparser {
    /** Convert Unparser::token_sequence_position_enum_type enum constant to a string. */
    const char* token_sequence_position_enum_type(int64_t);

    /** Convert Unparser::token_sequence_position_enum_type enum constant to a string. */
    std::string token_sequence_position_enum_type(int64_t, const std::string &strip);

    /** Return all Unparser::token_sequence_position_enum_type member values as a vector. */
    const std::vector<int64_t>& token_sequence_position_enum_type();
}}

namespace Rose {
    std::string stringifyUnparser_token_sequence_position_enum_type(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyUnparser_token_sequence_position_enum_type();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/backend/unparser/formatSupport/unparse_format.h line 51
namespace stringify {
    /** Convert Format_Opt enum constant to a string. */
    const char* Format_Opt(int64_t);

    /** Convert Format_Opt enum constant to a string. */
    std::string Format_Opt(int64_t, const std::string &strip);

    /** Return all Format_Opt member values as a vector. */
    const std::vector<int64_t>& Format_Opt();
}

namespace Rose {
    std::string stringifyFormat_Opt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyFormat_Opt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/backend/unparser/CxxCodeGeneration/unparseCxx.h line 543
namespace stringify { namespace Unparse_ExprStmt {
    /** Convert Unparse_ExprStmt::token_sequence_position_enum_type enum constant to a string. */
    const char* token_sequence_position_enum_type(int64_t);

    /** Convert Unparse_ExprStmt::token_sequence_position_enum_type enum constant to a string. */
    std::string token_sequence_position_enum_type(int64_t, const std::string &strip);

    /** Return all Unparse_ExprStmt::token_sequence_position_enum_type member values as a vector. */
    const std::vector<int64_t>& token_sequence_position_enum_type();
}}

namespace Rose {
    std::string stringifyUnparse_ExprStmt_token_sequence_position_enum_type(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyUnparse_ExprStmt_token_sequence_position_enum_type();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/backend/asmUnparser/BinaryEdgeArrows.h line 34
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Unparser { namespace EdgeArrows {
    /** Convert Rose::BinaryAnalysis::Unparser::EdgeArrows::OutputPart enum constant to a string. */
    const char* OutputPart(int64_t);

    /** Convert Rose::BinaryAnalysis::Unparser::EdgeArrows::OutputPart enum constant to a string. */
    std::string OutputPart(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::Unparser::EdgeArrows::OutputPart member values as a vector. */
    const std::vector<int64_t>& OutputPart();
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisUnparserEdgeArrowsOutputPart(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisUnparserEdgeArrowsOutputPart();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/backend/asmUnparser/BinaryEdgeArrows.h line 62
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Unparser { namespace EdgeArrows {
    /** Convert Rose::BinaryAnalysis::Unparser::EdgeArrows::ArrowStylePreset enum constant to a string. */
    const char* ArrowStylePreset(int64_t);

    /** Convert Rose::BinaryAnalysis::Unparser::EdgeArrows::ArrowStylePreset enum constant to a string. */
    std::string ArrowStylePreset(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::Unparser::EdgeArrows::ArrowStylePreset member values as a vector. */
    const std::vector<int64_t>& ArrowStylePreset();
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisUnparserEdgeArrowsArrowStylePreset(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisUnparserEdgeArrowsArrowStylePreset();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/backend/asmUnparser/BinaryEdgeArrows.h line 71
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Unparser { namespace EdgeArrows {
    /** Convert Rose::BinaryAnalysis::Unparser::EdgeArrows::ArrowSide enum constant to a string. */
    const char* ArrowSide(int64_t);

    /** Convert Rose::BinaryAnalysis::Unparser::EdgeArrows::ArrowSide enum constant to a string. */
    std::string ArrowSide(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::Unparser::EdgeArrows::ArrowSide member values as a vector. */
    const std::vector<int64_t>& ArrowSide();
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisUnparserEdgeArrowsArrowSide(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisUnparserEdgeArrowsArrowSide();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/backend/asmUnparser/BinarySerialIo.h line 122
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace SerialIo {
    /** Convert Rose::BinaryAnalysis::SerialIo::Format enum constant to a string. */
    const char* Format(int64_t);

    /** Convert Rose::BinaryAnalysis::SerialIo::Format enum constant to a string. */
    std::string Format(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::SerialIo::Format member values as a vector. */
    const std::vector<int64_t>& Format();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisSerialIoFormat(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisSerialIoFormat();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/backend/asmUnparser/BinarySerialIo.h line 133
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace SerialIo {
    /** Convert Rose::BinaryAnalysis::SerialIo::Savable enum constant to a string. */
    const char* Savable(int64_t);

    /** Convert Rose::BinaryAnalysis::SerialIo::Savable enum constant to a string. */
    std::string Savable(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::SerialIo::Savable member values as a vector. */
    const std::vector<int64_t>& Savable();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisSerialIoSavable(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisSerialIoSavable();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/backend/asmUnparser/AsmUnparser.h line 254
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace AsmUnparser {
    /** Convert Rose::BinaryAnalysis::AsmUnparser::Organization enum constant to a string. */
    const char* Organization(int64_t);

    /** Convert Rose::BinaryAnalysis::AsmUnparser::Organization enum constant to a string. */
    std::string Organization(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::AsmUnparser::Organization member values as a vector. */
    const std::vector<int64_t>& Organization();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisAsmUnparserOrganization(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisAsmUnparserOrganization();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/backend/asmUnparser/BinaryUnparserBase.h line 40
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Unparser { namespace ArrowMargin {
    /** Convert Rose::BinaryAnalysis::Unparser::ArrowMargin::Flags enum constant to a string. */
    const char* Flags(int64_t);

    /** Convert Rose::BinaryAnalysis::Unparser::ArrowMargin::Flags enum constant to a string. */
    std::string Flags(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::Unparser::ArrowMargin::Flags member values as a vector. */
    const std::vector<int64_t>& Flags();
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisUnparserArrowMarginFlags(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisUnparserArrowMarginFlags();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/ECJ_ROSE_Connection/JavaParserActionROSE.C line 4128
namespace stringify {
    /** Convert ops enum constant to a string. */
    const char* ops(int64_t);

    /** Convert ops enum constant to a string. */
    std::string ops(int64_t, const std::string &strip);

    /** Return all ops member values as a vector. */
    const std::vector<int64_t>& ops();
}

namespace Rose {
    std::string stringify_ops(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_ops();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Csharp_ROSE_Connection/csharpBuilder.h line 10
namespace stringify { namespace csharp_translator {
    /** Convert csharp_translator::SeqKind enum constant to a string. */
    const char* SeqKind(int64_t);

    /** Convert csharp_translator::SeqKind enum constant to a string. */
    std::string SeqKind(int64_t, const std::string &strip);

    /** Return all csharp_translator::SeqKind member values as a vector. */
    const std::vector<int64_t>& SeqKind();
}}

namespace Rose {
    std::string stringify_csharp_translatorSeqKind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_csharp_translatorSeqKind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Csharp_ROSE_Connection/ast2dot.hpp line 11
namespace stringify { namespace dot {
    /** Convert dot::attr_set enum constant to a string. */
    const char* attr_set(int64_t);

    /** Convert dot::attr_set enum constant to a string. */
    std::string attr_set(int64_t, const std::string &strip);

    /** Return all dot::attr_set member values as a vector. */
    const std::vector<int64_t>& attr_set();
}}

namespace Rose {
    std::string stringify_dot_attr_set(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_dot_attr_set();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/Clang/clang-frontend-private.hpp line 140
namespace stringify { namespace ClangToSageTranslator {
    /** Convert ClangToSageTranslator::Language enum constant to a string. */
    const char* Language(int64_t);

    /** Convert ClangToSageTranslator::Language enum constant to a string. */
    std::string Language(int64_t, const std::string &strip);

    /** Return all ClangToSageTranslator::Language member values as a vector. */
    const std::vector<int64_t>& Language();
}}

namespace Rose {
    std::string stringifyClangToSageTranslatorLanguage(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyClangToSageTranslatorLanguage();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/edgRose/edgRose.C line 6228
namespace stringify {
    /** Convert kinds_of_type_references enum constant to a string. */
    const char* kinds_of_type_references(int64_t);

    /** Convert kinds_of_type_references enum constant to a string. */
    std::string kinds_of_type_references(int64_t, const std::string &strip);

    /** Return all kinds_of_type_references member values as a vector. */
    const std::vector<int64_t>& kinds_of_type_references();
}

namespace Rose {
    std::string stringify_kinds_of_type_references(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_kinds_of_type_references();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/edgRose/edgRose.C line 45672
namespace stringify {
    /** Convert a_special_function_kind_tag enum constant to a string. */
    const char* a_special_function_kind_tag(int64_t);

    /** Convert a_special_function_kind_tag enum constant to a string. */
    std::string a_special_function_kind_tag(int64_t, const std::string &strip);

    /** Return all a_special_function_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_special_function_kind_tag();
}

namespace Rose {
    std::string stringify_a_special_function_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_special_function_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/edgRose/edgRose.C line 60195
namespace stringify {
    /** Convert a_pragma_kind_tag enum constant to a string. */
    const char* a_pragma_kind_tag(int64_t);

    /** Convert a_pragma_kind_tag enum constant to a string. */
    std::string a_pragma_kind_tag(int64_t, const std::string &strip);

    /** Return all a_pragma_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_pragma_kind_tag();
}

namespace Rose {
    std::string stringify_a_pragma_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_pragma_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/edgRose/debugging.C line 266
namespace stringify {
    /** Convert an_init_kind_tag enum constant to a string. */
    const char* an_init_kind_tag(int64_t);

    /** Convert an_init_kind_tag enum constant to a string. */
    std::string an_init_kind_tag(int64_t, const std::string &strip);

    /** Return all an_init_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_init_kind_tag();
}

namespace Rose {
    std::string stringify_an_init_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_init_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/edgRose/debugging.C line 1182
namespace stringify {
    /** Convert a_decl_modifier_tag enum constant to a string. */
    const char* a_decl_modifier_tag(int64_t);

    /** Convert a_decl_modifier_tag enum constant to a string. */
    std::string a_decl_modifier_tag(int64_t, const std::string &strip);

    /** Return all a_decl_modifier_tag member values as a vector. */
    const std::vector<int64_t>& a_decl_modifier_tag();
}

namespace Rose {
    std::string stringify_a_decl_modifier_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_decl_modifier_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/edgRose/debugging.C line 7697
namespace stringify {
    /** Convert a_local_expr_node_ref_kind_tag enum constant to a string. */
    const char* a_local_expr_node_ref_kind_tag(int64_t);

    /** Convert a_local_expr_node_ref_kind_tag enum constant to a string. */
    std::string a_local_expr_node_ref_kind_tag(int64_t, const std::string &strip);

    /** Return all a_local_expr_node_ref_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_local_expr_node_ref_kind_tag();
}

namespace Rose {
    std::string stringify_a_local_expr_node_ref_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_local_expr_node_ref_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/edgRose/debugging.C line 10894
namespace stringify {
    /** Convert an_operand_kind_tag enum constant to a string. */
    const char* an_operand_kind_tag(int64_t);

    /** Convert an_operand_kind_tag enum constant to a string. */
    std::string an_operand_kind_tag(int64_t, const std::string &strip);

    /** Return all an_operand_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_operand_kind_tag();
}

namespace Rose {
    std::string stringify_an_operand_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_operand_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/edgRose/debugging.C line 13879
namespace stringify {
    /** Convert a_name_linkage_kind_tag enum constant to a string. */
    const char* a_name_linkage_kind_tag(int64_t);

    /** Convert a_name_linkage_kind_tag enum constant to a string. */
    std::string a_name_linkage_kind_tag(int64_t, const std::string &strip);

    /** Return all a_name_linkage_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_name_linkage_kind_tag();
}

namespace Rose {
    std::string stringify_a_name_linkage_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_name_linkage_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/symbol_tbl.h line 464
namespace stringify {
    /** Convert a_symbol_kind_tag enum constant to a string. */
    const char* a_symbol_kind_tag(int64_t);

    /** Convert a_symbol_kind_tag enum constant to a string. */
    std::string a_symbol_kind_tag(int64_t, const std::string &strip);

    /** Return all a_symbol_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_symbol_kind_tag();
}

namespace Rose {
    std::string stringify_a_symbol_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_symbol_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/symbol_tbl.h line 763
namespace stringify {
    /** Convert a_dependent_type_fixup_kind_tag enum constant to a string. */
    const char* a_dependent_type_fixup_kind_tag(int64_t);

    /** Convert a_dependent_type_fixup_kind_tag enum constant to a string. */
    std::string a_dependent_type_fixup_kind_tag(int64_t, const std::string &strip);

    /** Return all a_dependent_type_fixup_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_dependent_type_fixup_kind_tag();
}

namespace Rose {
    std::string stringify_a_dependent_type_fixup_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_dependent_type_fixup_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/symbol_tbl.h line 4006
namespace stringify {
    /** Convert a_cli_operator_kind_tag enum constant to a string. */
    const char* a_cli_operator_kind_tag(int64_t);

    /** Convert a_cli_operator_kind_tag enum constant to a string. */
    std::string a_cli_operator_kind_tag(int64_t, const std::string &strip);

    /** Return all a_cli_operator_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_cli_operator_kind_tag();
}

namespace Rose {
    std::string stringify_a_cli_operator_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_cli_operator_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/symbol_tbl.h line 4901
namespace stringify {
    /** Convert a_cli_symbol_kind_tag enum constant to a string. */
    const char* a_cli_symbol_kind_tag(int64_t);

    /** Convert a_cli_symbol_kind_tag enum constant to a string. */
    std::string a_cli_symbol_kind_tag(int64_t, const std::string &strip);

    /** Return all a_cli_symbol_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_cli_symbol_kind_tag();
}

namespace Rose {
    std::string stringify_a_cli_symbol_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_cli_symbol_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/floating.h line 416
namespace stringify {
    /** Convert an_fp_type enum constant to a string. */
    const char* an_fp_type(int64_t);

    /** Convert an_fp_type enum constant to a string. */
    std::string an_fp_type(int64_t, const std::string &strip);

    /** Return all an_fp_type member values as a vector. */
    const std::vector<int64_t>& an_fp_type();
}

namespace Rose {
    std::string stringify_an_fp_type(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_fp_type();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/floating.h line 515
namespace stringify {
    /** Convert an_fp_return_type enum constant to a string. */
    const char* an_fp_return_type(int64_t);

    /** Convert an_fp_return_type enum constant to a string. */
    std::string an_fp_return_type(int64_t, const std::string &strip);

    /** Return all an_fp_return_type member values as a vector. */
    const std::vector<int64_t>& an_fp_return_type();
}

namespace Rose {
    std::string stringify_an_fp_return_type(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_fp_return_type();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/interpret.h line 59
namespace stringify {
    /** Convert a_constexpr_intrinsic_tag enum constant to a string. */
    const char* a_constexpr_intrinsic_tag(int64_t);

    /** Convert a_constexpr_intrinsic_tag enum constant to a string. */
    std::string a_constexpr_intrinsic_tag(int64_t, const std::string &strip);

    /** Return all a_constexpr_intrinsic_tag member values as a vector. */
    const std::vector<int64_t>& a_constexpr_intrinsic_tag();
}

namespace Rose {
    std::string stringify_a_constexpr_intrinsic_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_constexpr_intrinsic_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/pragma.h line 52
namespace stringify {
    /** Convert a_pragma_binding_kind enum constant to a string. */
    const char* a_pragma_binding_kind(int64_t);

    /** Convert a_pragma_binding_kind enum constant to a string. */
    std::string a_pragma_binding_kind(int64_t, const std::string &strip);

    /** Return all a_pragma_binding_kind member values as a vector. */
    const std::vector<int64_t>& a_pragma_binding_kind();
}

namespace Rose {
    std::string stringify_a_pragma_binding_kind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_pragma_binding_kind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/host_envir.h line 2382
namespace stringify {
    /** Convert a_unicode_source_kind_tag enum constant to a string. */
    const char* a_unicode_source_kind_tag(int64_t);

    /** Convert a_unicode_source_kind_tag enum constant to a string. */
    std::string a_unicode_source_kind_tag(int64_t, const std::string &strip);

    /** Return all a_unicode_source_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_unicode_source_kind_tag();
}

namespace Rose {
    std::string stringify_a_unicode_source_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_unicode_source_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/host_envir.h line 3758
namespace stringify {
    /** Convert a_predef_macro_mode enum constant to a string. */
    const char* a_predef_macro_mode(int64_t);

    /** Convert a_predef_macro_mode enum constant to a string. */
    std::string a_predef_macro_mode(int64_t, const std::string &strip);

    /** Return all a_predef_macro_mode member values as a vector. */
    const std::vector<int64_t>& a_predef_macro_mode();
}

namespace Rose {
    std::string stringify_a_predef_macro_mode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_predef_macro_mode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/builtin_defs.h line 25
namespace stringify {
    /** Convert a_builtin_function_type_index enum constant to a string. */
    const char* a_builtin_function_type_index(int64_t);

    /** Convert a_builtin_function_type_index enum constant to a string. */
    std::string a_builtin_function_type_index(int64_t, const std::string &strip);

    /** Return all a_builtin_function_type_index member values as a vector. */
    const std::vector<int64_t>& a_builtin_function_type_index();
}

namespace Rose {
    std::string stringify_a_builtin_function_type_index(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_builtin_function_type_index();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/builtin_defs.h line 5812
namespace stringify {
    /** Convert a_builtin_function_condition_index enum constant to a string. */
    const char* a_builtin_function_condition_index(int64_t);

    /** Convert a_builtin_function_condition_index enum constant to a string. */
    std::string a_builtin_function_condition_index(int64_t, const std::string &strip);

    /** Return all a_builtin_function_condition_index member values as a vector. */
    const std::vector<int64_t>& a_builtin_function_condition_index();
}

namespace Rose {
    std::string stringify_a_builtin_function_condition_index(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_builtin_function_condition_index();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/builtin_defs.h line 6527
namespace stringify {
    /** Convert a_builtin_function_kind_tag enum constant to a string. */
    const char* a_builtin_function_kind_tag(int64_t);

    /** Convert a_builtin_function_kind_tag enum constant to a string. */
    std::string a_builtin_function_kind_tag(int64_t, const std::string &strip);

    /** Return all a_builtin_function_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_builtin_function_kind_tag();
}

namespace Rose {
    std::string stringify_a_builtin_function_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_builtin_function_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/expr.h line 93
namespace stringify {
    /** Convert an_init_component_kind_tag enum constant to a string. */
    const char* an_init_component_kind_tag(int64_t);

    /** Convert an_init_component_kind_tag enum constant to a string. */
    std::string an_init_component_kind_tag(int64_t, const std::string &strip);

    /** Return all an_init_component_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_init_component_kind_tag();
}

namespace Rose {
    std::string stringify_an_init_component_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_init_component_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/exprutil.h line 106
namespace stringify {
    /** Convert an_expression_kind_tag enum constant to a string. */
    const char* an_expression_kind_tag(int64_t);

    /** Convert an_expression_kind_tag enum constant to a string. */
    std::string an_expression_kind_tag(int64_t, const std::string &strip);

    /** Return all an_expression_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_expression_kind_tag();
}

namespace Rose {
    std::string stringify_an_expression_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_expression_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/exprutil.h line 143
namespace stringify {
    /** Convert a_cast_source_form enum constant to a string. */
    const char* a_cast_source_form(int64_t);

    /** Convert a_cast_source_form enum constant to a string. */
    std::string a_cast_source_form(int64_t, const std::string &strip);

    /** Return all a_cast_source_form member values as a vector. */
    const std::vector<int64_t>& a_cast_source_form();
}

namespace Rose {
    std::string stringify_a_cast_source_form(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_cast_source_form();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/exprutil.h line 162
namespace stringify {
    /** Convert an_overload_context enum constant to a string. */
    const char* an_overload_context(int64_t);

    /** Convert an_overload_context enum constant to a string. */
    std::string an_overload_context(int64_t, const std::string &strip);

    /** Return all an_overload_context member values as a vector. */
    const std::vector<int64_t>& an_overload_context();
}

namespace Rose {
    std::string stringify_an_overload_context(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_overload_context();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/exprutil.h line 195
namespace stringify {
    /** Convert a_type_class_kind enum constant to a string. */
    const char* a_type_class_kind(int64_t);

    /** Convert a_type_class_kind enum constant to a string. */
    std::string a_type_class_kind(int64_t, const std::string &strip);

    /** Return all a_type_class_kind member values as a vector. */
    const std::vector<int64_t>& a_type_class_kind();
}

namespace Rose {
    std::string stringify_a_type_class_kind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_type_class_kind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/exprutil.h line 323
namespace stringify {
    /** Convert an_operand_state_tag enum constant to a string. */
    const char* an_operand_state_tag(int64_t);

    /** Convert an_operand_state_tag enum constant to a string. */
    std::string an_operand_state_tag(int64_t, const std::string &strip);

    /** Return all an_operand_state_tag member values as a vector. */
    const std::vector<int64_t>& an_operand_state_tag();
}

namespace Rose {
    std::string stringify_an_operand_state_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_operand_state_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/lexical.h line 1973
namespace stringify {
    /** Convert a_token_extra_info_kind_tag enum constant to a string. */
    const char* a_token_extra_info_kind_tag(int64_t);

    /** Convert a_token_extra_info_kind_tag enum constant to a string. */
    std::string a_token_extra_info_kind_tag(int64_t, const std::string &strip);

    /** Return all a_token_extra_info_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_token_extra_info_kind_tag();
}

namespace Rose {
    std::string stringify_a_token_extra_info_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_token_extra_info_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 387
namespace stringify {
    /** Convert an_access_specifier_tag enum constant to a string. */
    const char* an_access_specifier_tag(int64_t);

    /** Convert an_access_specifier_tag enum constant to a string. */
    std::string an_access_specifier_tag(int64_t, const std::string &strip);

    /** Return all an_access_specifier_tag member values as a vector. */
    const std::vector<int64_t>& an_access_specifier_tag();
}

namespace Rose {
    std::string stringify_an_access_specifier_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_access_specifier_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 407
namespace stringify {
    /** Convert an_assembly_visibility_tag enum constant to a string. */
    const char* an_assembly_visibility_tag(int64_t);

    /** Convert an_assembly_visibility_tag enum constant to a string. */
    std::string an_assembly_visibility_tag(int64_t, const std::string &strip);

    /** Return all an_assembly_visibility_tag member values as a vector. */
    const std::vector<int64_t>& an_assembly_visibility_tag();
}

namespace Rose {
    std::string stringify_an_assembly_visibility_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_assembly_visibility_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 1570
namespace stringify {
    /** Convert an_element_position_kind_tag enum constant to a string. */
    const char* an_element_position_kind_tag(int64_t);

    /** Convert an_element_position_kind_tag enum constant to a string. */
    std::string an_element_position_kind_tag(int64_t, const std::string &strip);

    /** Return all an_element_position_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_element_position_kind_tag();
}

namespace Rose {
    std::string stringify_an_element_position_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_element_position_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 1680
namespace stringify {
    /** Convert an_ELF_visibility_kind_tag enum constant to a string. */
    const char* an_ELF_visibility_kind_tag(int64_t);

    /** Convert an_ELF_visibility_kind_tag enum constant to a string. */
    std::string an_ELF_visibility_kind_tag(int64_t, const std::string &strip);

    /** Return all an_ELF_visibility_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_ELF_visibility_kind_tag();
}

namespace Rose {
    std::string stringify_an_ELF_visibility_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_ELF_visibility_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 2398
namespace stringify {
    /** Convert an_attribute_arg_kind_tag enum constant to a string. */
    const char* an_attribute_arg_kind_tag(int64_t);

    /** Convert an_attribute_arg_kind_tag enum constant to a string. */
    std::string an_attribute_arg_kind_tag(int64_t, const std::string &strip);

    /** Return all an_attribute_arg_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_attribute_arg_kind_tag();
}

namespace Rose {
    std::string stringify_an_attribute_arg_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_attribute_arg_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 2474
namespace stringify {
    /** Convert an_attribute_family_tag enum constant to a string. */
    const char* an_attribute_family_tag(int64_t);

    /** Convert an_attribute_family_tag enum constant to a string. */
    std::string an_attribute_family_tag(int64_t, const std::string &strip);

    /** Return all an_attribute_family_tag member values as a vector. */
    const std::vector<int64_t>& an_attribute_family_tag();
}

namespace Rose {
    std::string stringify_an_attribute_family_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_attribute_family_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 2499
namespace stringify {
    /** Convert an_attribute_location_tag enum constant to a string. */
    const char* an_attribute_location_tag(int64_t);

    /** Convert an_attribute_location_tag enum constant to a string. */
    std::string an_attribute_location_tag(int64_t, const std::string &strip);

    /** Return all an_attribute_location_tag member values as a vector. */
    const std::vector<int64_t>& an_attribute_location_tag();
}

namespace Rose {
    std::string stringify_an_attribute_location_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_attribute_location_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 2568
namespace stringify {
    /** Convert an_attribute_kind_tag enum constant to a string. */
    const char* an_attribute_kind_tag(int64_t);

    /** Convert an_attribute_kind_tag enum constant to a string. */
    std::string an_attribute_kind_tag(int64_t, const std::string &strip);

    /** Return all an_attribute_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_attribute_kind_tag();
}

namespace Rose {
    std::string stringify_an_attribute_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_attribute_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 3206
namespace stringify {
    /** Convert a_constant_repr_kind_tag enum constant to a string. */
    const char* a_constant_repr_kind_tag(int64_t);

    /** Convert a_constant_repr_kind_tag enum constant to a string. */
    std::string a_constant_repr_kind_tag(int64_t, const std::string &strip);

    /** Return all a_constant_repr_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_constant_repr_kind_tag();
}

namespace Rose {
    std::string stringify_a_constant_repr_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_constant_repr_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 3258
namespace stringify {
    /** Convert an_address_base_kind_tag enum constant to a string. */
    const char* an_address_base_kind_tag(int64_t);

    /** Convert an_address_base_kind_tag enum constant to a string. */
    std::string an_address_base_kind_tag(int64_t, const std::string &strip);

    /** Return all an_address_base_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_address_base_kind_tag();
}

namespace Rose {
    std::string stringify_an_address_base_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_address_base_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 3519
namespace stringify {
    /** Convert a_dynamic_init_kind_tag enum constant to a string. */
    const char* a_dynamic_init_kind_tag(int64_t);

    /** Convert a_dynamic_init_kind_tag enum constant to a string. */
    std::string a_dynamic_init_kind_tag(int64_t, const std::string &strip);

    /** Return all a_dynamic_init_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_dynamic_init_kind_tag();
}

namespace Rose {
    std::string stringify_a_dynamic_init_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_dynamic_init_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 3953
namespace stringify {
    /** Convert a_template_param_constant_kind_tag enum constant to a string. */
    const char* a_template_param_constant_kind_tag(int64_t);

    /** Convert a_template_param_constant_kind_tag enum constant to a string. */
    std::string a_template_param_constant_kind_tag(int64_t, const std::string &strip);

    /** Return all a_template_param_constant_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_template_param_constant_kind_tag();
}

namespace Rose {
    std::string stringify_a_template_param_constant_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_template_param_constant_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 4087
namespace stringify {
    /** Convert a_character_kind_tag enum constant to a string. */
    const char* a_character_kind_tag(int64_t);

    /** Convert a_character_kind_tag enum constant to a string. */
    std::string a_character_kind_tag(int64_t, const std::string &strip);

    /** Return all a_character_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_character_kind_tag();
}

namespace Rose {
    std::string stringify_a_character_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_character_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 4909
namespace stringify {
    /** Convert a_type_kind_tag enum constant to a string. */
    const char* a_type_kind_tag(int64_t);

    /** Convert a_type_kind_tag enum constant to a string. */
    std::string a_type_kind_tag(int64_t, const std::string &strip);

    /** Return all a_type_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_type_kind_tag();
}

namespace Rose {
    std::string stringify_a_type_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_type_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 4957
namespace stringify {
    /** Convert an_integer_kind_tag enum constant to a string. */
    const char* an_integer_kind_tag(int64_t);

    /** Convert an_integer_kind_tag enum constant to a string. */
    std::string an_integer_kind_tag(int64_t, const std::string &strip);

    /** Return all an_integer_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_integer_kind_tag();
}

namespace Rose {
    std::string stringify_an_integer_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_integer_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 5047
namespace stringify {
    /** Convert a_fixed_point_precision_tag enum constant to a string. */
    const char* a_fixed_point_precision_tag(int64_t);

    /** Convert a_fixed_point_precision_tag enum constant to a string. */
    std::string a_fixed_point_precision_tag(int64_t, const std::string &strip);

    /** Return all a_fixed_point_precision_tag member values as a vector. */
    const std::vector<int64_t>& a_fixed_point_precision_tag();
}

namespace Rose {
    std::string stringify_a_fixed_point_precision_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_fixed_point_precision_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 5079
namespace stringify {
    /** Convert a_float_kind_tag enum constant to a string. */
    const char* a_float_kind_tag(int64_t);

    /** Convert a_float_kind_tag enum constant to a string. */
    std::string a_float_kind_tag(int64_t, const std::string &strip);

    /** Return all a_float_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_float_kind_tag();
}

namespace Rose {
    std::string stringify_a_float_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_float_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 5105
namespace stringify {
    /** Convert a_type_mode_kind_tag enum constant to a string. */
    const char* a_type_mode_kind_tag(int64_t);

    /** Convert a_type_mode_kind_tag enum constant to a string. */
    std::string a_type_mode_kind_tag(int64_t, const std::string &strip);

    /** Return all a_type_mode_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_type_mode_kind_tag();
}

namespace Rose {
    std::string stringify_a_type_mode_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_type_mode_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 5161
namespace stringify {
    /** Convert an_asm_operand_constraint_kind_tag enum constant to a string. */
    const char* an_asm_operand_constraint_kind_tag(int64_t);

    /** Convert an_asm_operand_constraint_kind_tag enum constant to a string. */
    std::string an_asm_operand_constraint_kind_tag(int64_t, const std::string &strip);

    /** Return all an_asm_operand_constraint_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_asm_operand_constraint_kind_tag();
}

namespace Rose {
    std::string stringify_an_asm_operand_constraint_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_asm_operand_constraint_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 5326
namespace stringify {
    /** Convert an_asm_operand_modifier_tag enum constant to a string. */
    const char* an_asm_operand_modifier_tag(int64_t);

    /** Convert an_asm_operand_modifier_tag enum constant to a string. */
    std::string an_asm_operand_modifier_tag(int64_t, const std::string &strip);

    /** Return all an_asm_operand_modifier_tag member values as a vector. */
    const std::vector<int64_t>& an_asm_operand_modifier_tag();
}

namespace Rose {
    std::string stringify_an_asm_operand_modifier_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_asm_operand_modifier_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 5337
namespace stringify {
    /** Convert a_named_register_tag enum constant to a string. */
    const char* a_named_register_tag(int64_t);

    /** Convert a_named_register_tag enum constant to a string. */
    std::string a_named_register_tag(int64_t, const std::string &strip);

    /** Return all a_named_register_tag member values as a vector. */
    const std::vector<int64_t>& a_named_register_tag();
}

namespace Rose {
    std::string stringify_a_named_register_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_named_register_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 5512
namespace stringify {
    /** Convert a_type_qualifier_tag enum constant to a string. */
    const char* a_type_qualifier_tag(int64_t);

    /** Convert a_type_qualifier_tag enum constant to a string. */
    std::string a_type_qualifier_tag(int64_t, const std::string &strip);

    /** Return all a_type_qualifier_tag member values as a vector. */
    const std::vector<int64_t>& a_type_qualifier_tag();
}

namespace Rose {
    std::string stringify_a_type_qualifier_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_type_qualifier_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 5614
namespace stringify {
    /** Convert a_upc_pragma_kind_tag enum constant to a string. */
    const char* a_upc_pragma_kind_tag(int64_t);

    /** Convert a_upc_pragma_kind_tag enum constant to a string. */
    std::string a_upc_pragma_kind_tag(int64_t, const std::string &strip);

    /** Return all a_upc_pragma_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_upc_pragma_kind_tag();
}

namespace Rose {
    std::string stringify_a_upc_pragma_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_upc_pragma_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 5624
namespace stringify {
    /** Convert a_upc_access_method_tag enum constant to a string. */
    const char* a_upc_access_method_tag(int64_t);

    /** Convert a_upc_access_method_tag enum constant to a string. */
    std::string a_upc_access_method_tag(int64_t, const std::string &strip);

    /** Return all a_upc_access_method_tag member values as a vector. */
    const std::vector<int64_t>& a_upc_access_method_tag();
}

namespace Rose {
    std::string stringify_a_upc_access_method_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_upc_access_method_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 5635
namespace stringify {
    /** Convert a_upc_coherence_stack_operation_tag enum constant to a string. */
    const char* a_upc_coherence_stack_operation_tag(int64_t);

    /** Convert a_upc_coherence_stack_operation_tag enum constant to a string. */
    std::string a_upc_coherence_stack_operation_tag(int64_t, const std::string &strip);

    /** Return all a_upc_coherence_stack_operation_tag member values as a vector. */
    const std::vector<int64_t>& a_upc_coherence_stack_operation_tag();
}

namespace Rose {
    std::string stringify_a_upc_coherence_stack_operation_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_upc_coherence_stack_operation_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 5816
namespace stringify {
    /** Convert a_stdc_pragma_kind_tag enum constant to a string. */
    const char* a_stdc_pragma_kind_tag(int64_t);

    /** Convert a_stdc_pragma_kind_tag enum constant to a string. */
    std::string a_stdc_pragma_kind_tag(int64_t, const std::string &strip);

    /** Return all a_stdc_pragma_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_stdc_pragma_kind_tag();
}

namespace Rose {
    std::string stringify_a_stdc_pragma_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_stdc_pragma_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 5842
namespace stringify {
    /** Convert a_stdc_pragma_value_tag enum constant to a string. */
    const char* a_stdc_pragma_value_tag(int64_t);

    /** Convert a_stdc_pragma_value_tag enum constant to a string. */
    std::string a_stdc_pragma_value_tag(int64_t, const std::string &strip);

    /** Return all a_stdc_pragma_value_tag member values as a vector. */
    const std::vector<int64_t>& a_stdc_pragma_value_tag();
}

namespace Rose {
    std::string stringify_a_stdc_pragma_value_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_stdc_pragma_value_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 5863
namespace stringify {
    /** Convert a_gcc_pragma_kind_tag enum constant to a string. */
    const char* a_gcc_pragma_kind_tag(int64_t);

    /** Convert a_gcc_pragma_kind_tag enum constant to a string. */
    std::string a_gcc_pragma_kind_tag(int64_t, const std::string &strip);

    /** Return all a_gcc_pragma_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_gcc_pragma_kind_tag();
}

namespace Rose {
    std::string stringify_a_gcc_pragma_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_gcc_pragma_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 6133
namespace stringify {
    /** Convert a_microsoft_pragma_comment_type_tag enum constant to a string. */
    const char* a_microsoft_pragma_comment_type_tag(int64_t);

    /** Convert a_microsoft_pragma_comment_type_tag enum constant to a string. */
    std::string a_microsoft_pragma_comment_type_tag(int64_t, const std::string &strip);

    /** Return all a_microsoft_pragma_comment_type_tag member values as a vector. */
    const std::vector<int64_t>& a_microsoft_pragma_comment_type_tag();
}

namespace Rose {
    std::string stringify_a_microsoft_pragma_comment_type_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_microsoft_pragma_comment_type_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 6147
namespace stringify {
    /** Convert a_microsoft_pragma_conform_kind_tag enum constant to a string. */
    const char* a_microsoft_pragma_conform_kind_tag(int64_t);

    /** Convert a_microsoft_pragma_conform_kind_tag enum constant to a string. */
    std::string a_microsoft_pragma_conform_kind_tag(int64_t, const std::string &strip);

    /** Return all a_microsoft_pragma_conform_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_microsoft_pragma_conform_kind_tag();
}

namespace Rose {
    std::string stringify_a_microsoft_pragma_conform_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_microsoft_pragma_conform_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 6454
namespace stringify {
    /** Convert a_calling_convention_tag enum constant to a string. */
    const char* a_calling_convention_tag(int64_t);

    /** Convert a_calling_convention_tag enum constant to a string. */
    std::string a_calling_convention_tag(int64_t, const std::string &strip);

    /** Return all a_calling_convention_tag member values as a vector. */
    const std::vector<int64_t>& a_calling_convention_tag();
}

namespace Rose {
    std::string stringify_a_calling_convention_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_calling_convention_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 6642
namespace stringify {
    /** Convert a_ref_qualifier_kind_tag enum constant to a string. */
    const char* a_ref_qualifier_kind_tag(int64_t);

    /** Convert a_ref_qualifier_kind_tag enum constant to a string. */
    std::string a_ref_qualifier_kind_tag(int64_t, const std::string &strip);

    /** Return all a_ref_qualifier_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_ref_qualifier_kind_tag();
}

namespace Rose {
    std::string stringify_a_ref_qualifier_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_ref_qualifier_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 6924
namespace stringify {
    /** Convert a_templ_arg_kind_tag enum constant to a string. */
    const char* a_templ_arg_kind_tag(int64_t);

    /** Convert a_templ_arg_kind_tag enum constant to a string. */
    std::string a_templ_arg_kind_tag(int64_t, const std::string &strip);

    /** Return all a_templ_arg_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_templ_arg_kind_tag();
}

namespace Rose {
    std::string stringify_a_templ_arg_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_templ_arg_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 7554
namespace stringify {
    /** Convert an_anonymous_union_kind_tag enum constant to a string. */
    const char* an_anonymous_union_kind_tag(int64_t);

    /** Convert an_anonymous_union_kind_tag enum constant to a string. */
    std::string an_anonymous_union_kind_tag(int64_t, const std::string &strip);

    /** Return all an_anonymous_union_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_anonymous_union_kind_tag();
}

namespace Rose {
    std::string stringify_an_anonymous_union_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_anonymous_union_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 7569
namespace stringify {
    /** Convert an_inheritance_kind_tag enum constant to a string. */
    const char* an_inheritance_kind_tag(int64_t);

    /** Convert an_inheritance_kind_tag enum constant to a string. */
    std::string an_inheritance_kind_tag(int64_t, const std::string &strip);

    /** Return all an_inheritance_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_inheritance_kind_tag();
}

namespace Rose {
    std::string stringify_an_inheritance_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_inheritance_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 7603
namespace stringify {
    /** Convert a_cli_class_type_kind_tag enum constant to a string. */
    const char* a_cli_class_type_kind_tag(int64_t);

    /** Convert a_cli_class_type_kind_tag enum constant to a string. */
    std::string a_cli_class_type_kind_tag(int64_t, const std::string &strip);

    /** Return all a_cli_class_type_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_cli_class_type_kind_tag();
}

namespace Rose {
    std::string stringify_a_cli_class_type_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_cli_class_type_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 7636
namespace stringify {
    /** Convert a_property_or_event_kind_tag enum constant to a string. */
    const char* a_property_or_event_kind_tag(int64_t);

    /** Convert a_property_or_event_kind_tag enum constant to a string. */
    std::string a_property_or_event_kind_tag(int64_t, const std::string &strip);

    /** Return all a_property_or_event_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_property_or_event_kind_tag();
}

namespace Rose {
    std::string stringify_a_property_or_event_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_property_or_event_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 7769
namespace stringify {
    /** Convert a_rewritten_property_reference_kind_tag enum constant to a string. */
    const char* a_rewritten_property_reference_kind_tag(int64_t);

    /** Convert a_rewritten_property_reference_kind_tag enum constant to a string. */
    std::string a_rewritten_property_reference_kind_tag(int64_t, const std::string &strip);

    /** Return all a_rewritten_property_reference_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_rewritten_property_reference_kind_tag();
}

namespace Rose {
    std::string stringify_a_rewritten_property_reference_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_rewritten_property_reference_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 8436
namespace stringify {
    /** Convert a_template_param_type_kind_tag enum constant to a string. */
    const char* a_template_param_type_kind_tag(int64_t);

    /** Convert a_template_param_type_kind_tag enum constant to a string. */
    std::string a_template_param_type_kind_tag(int64_t, const std::string &strip);

    /** Return all a_template_param_type_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_template_param_type_kind_tag();
}

namespace Rose {
    std::string stringify_a_template_param_type_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_template_param_type_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 8702
namespace stringify {
    /** Convert a_based_type_kind_tag enum constant to a string. */
    const char* a_based_type_kind_tag(int64_t);

    /** Convert a_based_type_kind_tag enum constant to a string. */
    std::string a_based_type_kind_tag(int64_t, const std::string &strip);

    /** Return all a_based_type_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_based_type_kind_tag();
}

namespace Rose {
    std::string stringify_a_based_type_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_based_type_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 8763
namespace stringify {
    /** Convert a_pointer_modifier_tag enum constant to a string. */
    const char* a_pointer_modifier_tag(int64_t);

    /** Convert a_pointer_modifier_tag enum constant to a string. */
    std::string a_pointer_modifier_tag(int64_t, const std::string &strip);

    /** Return all a_pointer_modifier_tag member values as a vector. */
    const std::vector<int64_t>& a_pointer_modifier_tag();
}

namespace Rose {
    std::string stringify_a_pointer_modifier_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_pointer_modifier_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 9944
namespace stringify {
    /** Convert a_storage_class_tag enum constant to a string. */
    const char* a_storage_class_tag(int64_t);

    /** Convert a_storage_class_tag enum constant to a string. */
    std::string a_storage_class_tag(int64_t, const std::string &strip);

    /** Return all a_storage_class_tag member values as a vector. */
    const std::vector<int64_t>& a_storage_class_tag();
}

namespace Rose {
    std::string stringify_a_storage_class_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_storage_class_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 11066
namespace stringify {
    /** Convert an_opname_kind_tag enum constant to a string. */
    const char* an_opname_kind_tag(int64_t);

    /** Convert an_opname_kind_tag enum constant to a string. */
    std::string an_opname_kind_tag(int64_t, const std::string &strip);

    /** Return all an_opname_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_opname_kind_tag();
}

namespace Rose {
    std::string stringify_an_opname_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_opname_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 11121
namespace stringify {
    /** Convert a_ctor_or_dtor_kind_tag enum constant to a string. */
    const char* a_ctor_or_dtor_kind_tag(int64_t);

    /** Convert a_ctor_or_dtor_kind_tag enum constant to a string. */
    std::string a_ctor_or_dtor_kind_tag(int64_t, const std::string &strip);

    /** Return all a_ctor_or_dtor_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_ctor_or_dtor_kind_tag();
}

namespace Rose {
    std::string stringify_a_ctor_or_dtor_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_ctor_or_dtor_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 12399
namespace stringify {
    /** Convert an_expr_node_kind_tag enum constant to a string. */
    const char* an_expr_node_kind_tag(int64_t);

    /** Convert an_expr_node_kind_tag enum constant to a string. */
    std::string an_expr_node_kind_tag(int64_t, const std::string &strip);

    /** Return all an_expr_node_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_expr_node_kind_tag();
}

namespace Rose {
    std::string stringify_an_expr_node_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_expr_node_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 12524
namespace stringify {
    /** Convert a_lowered_eh_construct_kind_tag enum constant to a string. */
    const char* a_lowered_eh_construct_kind_tag(int64_t);

    /** Convert a_lowered_eh_construct_kind_tag enum constant to a string. */
    std::string a_lowered_eh_construct_kind_tag(int64_t, const std::string &strip);

    /** Return all a_lowered_eh_construct_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_lowered_eh_construct_kind_tag();
}

namespace Rose {
    std::string stringify_a_lowered_eh_construct_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_lowered_eh_construct_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 12566
namespace stringify {
    /** Convert an_expr_operator_kind_tag enum constant to a string. */
    const char* an_expr_operator_kind_tag(int64_t);

    /** Convert an_expr_operator_kind_tag enum constant to a string. */
    std::string an_expr_operator_kind_tag(int64_t, const std::string &strip);

    /** Return all an_expr_operator_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_expr_operator_kind_tag();
}

namespace Rose {
    std::string stringify_an_expr_operator_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_expr_operator_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 13090
namespace stringify {
    /** Convert a_builtin_operation_kind_tag enum constant to a string. */
    const char* a_builtin_operation_kind_tag(int64_t);

    /** Convert a_builtin_operation_kind_tag enum constant to a string. */
    std::string a_builtin_operation_kind_tag(int64_t, const std::string &strip);

    /** Return all a_builtin_operation_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_builtin_operation_kind_tag();
}

namespace Rose {
    std::string stringify_a_builtin_operation_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_builtin_operation_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 14313
namespace stringify {
    /** Convert a_statement_kind_tag enum constant to a string. */
    const char* a_statement_kind_tag(int64_t);

    /** Convert a_statement_kind_tag enum constant to a string. */
    std::string a_statement_kind_tag(int64_t, const std::string &strip);

    /** Return all a_statement_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_statement_kind_tag();
}

namespace Rose {
    std::string stringify_a_statement_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_statement_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 14542
namespace stringify {
    /** Convert a_for_each_pattern_kind_tag enum constant to a string. */
    const char* a_for_each_pattern_kind_tag(int64_t);

    /** Convert a_for_each_pattern_kind_tag enum constant to a string. */
    std::string a_for_each_pattern_kind_tag(int64_t, const std::string &strip);

    /** Return all a_for_each_pattern_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_for_each_pattern_kind_tag();
}

namespace Rose {
    std::string stringify_a_for_each_pattern_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_for_each_pattern_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 15361
namespace stringify {
    /** Convert a_constructor_init_kind_tag enum constant to a string. */
    const char* a_constructor_init_kind_tag(int64_t);

    /** Convert a_constructor_init_kind_tag enum constant to a string. */
    std::string a_constructor_init_kind_tag(int64_t, const std::string &strip);

    /** Return all a_constructor_init_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_constructor_init_kind_tag();
}

namespace Rose {
    std::string stringify_a_constructor_init_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_constructor_init_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 15587
namespace stringify {
    /** Convert a_generic_constraint_kind_tag enum constant to a string. */
    const char* a_generic_constraint_kind_tag(int64_t);

    /** Convert a_generic_constraint_kind_tag enum constant to a string. */
    std::string a_generic_constraint_kind_tag(int64_t, const std::string &strip);

    /** Return all a_generic_constraint_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_generic_constraint_kind_tag();
}

namespace Rose {
    std::string stringify_a_generic_constraint_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_generic_constraint_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 15675
namespace stringify {
    /** Convert a_template_parameter_kind_tag enum constant to a string. */
    const char* a_template_parameter_kind_tag(int64_t);

    /** Convert a_template_parameter_kind_tag enum constant to a string. */
    std::string a_template_parameter_kind_tag(int64_t, const std::string &strip);

    /** Return all a_template_parameter_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_template_parameter_kind_tag();
}

namespace Rose {
    std::string stringify_a_template_parameter_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_template_parameter_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 15779
namespace stringify {
    /** Convert a_template_kind_tag enum constant to a string. */
    const char* a_template_kind_tag(int64_t);

    /** Convert a_template_kind_tag enum constant to a string. */
    std::string a_template_kind_tag(int64_t, const std::string &strip);

    /** Return all a_template_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_template_kind_tag();
}

namespace Rose {
    std::string stringify_a_template_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_template_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 16125
namespace stringify {
    /** Convert an_object_lifetime_kind_tag enum constant to a string. */
    const char* an_object_lifetime_kind_tag(int64_t);

    /** Convert an_object_lifetime_kind_tag enum constant to a string. */
    std::string an_object_lifetime_kind_tag(int64_t, const std::string &strip);

    /** Return all an_object_lifetime_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_object_lifetime_kind_tag();
}

namespace Rose {
    std::string stringify_an_object_lifetime_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_object_lifetime_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 16268
namespace stringify {
    /** Convert an_ms_attribute_kind_tag enum constant to a string. */
    const char* an_ms_attribute_kind_tag(int64_t);

    /** Convert an_ms_attribute_kind_tag enum constant to a string. */
    std::string an_ms_attribute_kind_tag(int64_t, const std::string &strip);

    /** Return all an_ms_attribute_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_ms_attribute_kind_tag();
}

namespace Rose {
    std::string stringify_an_ms_attribute_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_ms_attribute_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 16290
namespace stringify {
    /** Convert an_ms_attribute_arg_kind_tag enum constant to a string. */
    const char* an_ms_attribute_arg_kind_tag(int64_t);

    /** Convert an_ms_attribute_arg_kind_tag enum constant to a string. */
    std::string an_ms_attribute_arg_kind_tag(int64_t, const std::string &strip);

    /** Return all an_ms_attribute_arg_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_ms_attribute_arg_kind_tag();
}

namespace Rose {
    std::string stringify_an_ms_attribute_arg_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_ms_attribute_arg_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il_def.h line 16680
namespace stringify {
    /** Convert a_scope_kind_tag enum constant to a string. */
    const char* a_scope_kind_tag(int64_t);

    /** Convert a_scope_kind_tag enum constant to a string. */
    std::string a_scope_kind_tag(int64_t, const std::string &strip);

    /** Return all a_scope_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_scope_kind_tag();
}

namespace Rose {
    std::string stringify_a_scope_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_scope_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/lower_il.h line 424
namespace stringify {
    /** Convert an_insert_location_kind enum constant to a string. */
    const char* an_insert_location_kind(int64_t);

    /** Convert an_insert_location_kind enum constant to a string. */
    std::string an_insert_location_kind(int64_t, const std::string &strip);

    /** Return all an_insert_location_kind member values as a vector. */
    const std::vector<int64_t>& an_insert_location_kind();
}

namespace Rose {
    std::string stringify_an_insert_location_kind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_insert_location_kind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/il.h line 83
namespace stringify {
    /** Convert a_type_info_kind_tag enum constant to a string. */
    const char* a_type_info_kind_tag(int64_t);

    /** Convert a_type_info_kind_tag enum constant to a string. */
    std::string a_type_info_kind_tag(int64_t, const std::string &strip);

    /** Return all a_type_info_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_type_info_kind_tag();
}

namespace Rose {
    std::string stringify_a_type_info_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_type_info_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/statements.h line 56
namespace stringify {
    /** Convert a_control_flow_descr_kind_tag enum constant to a string. */
    const char* a_control_flow_descr_kind_tag(int64_t);

    /** Convert a_control_flow_descr_kind_tag enum constant to a string. */
    std::string a_control_flow_descr_kind_tag(int64_t, const std::string &strip);

    /** Return all a_control_flow_descr_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_control_flow_descr_kind_tag();
}

namespace Rose {
    std::string stringify_a_control_flow_descr_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_control_flow_descr_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/sys_predef.h line 220
namespace stringify {
    /** Convert a_builtin_user_function_kind_tag enum constant to a string. */
    const char* a_builtin_user_function_kind_tag(int64_t);

    /** Convert a_builtin_user_function_kind_tag enum constant to a string. */
    std::string a_builtin_user_function_kind_tag(int64_t, const std::string &strip);

    /** Return all a_builtin_user_function_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_builtin_user_function_kind_tag();
}

namespace Rose {
    std::string stringify_a_builtin_user_function_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_builtin_user_function_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/sys_predef.h line 453
namespace stringify {
    /** Convert a_multiversion_arch_kind_tag enum constant to a string. */
    const char* a_multiversion_arch_kind_tag(int64_t);

    /** Convert a_multiversion_arch_kind_tag enum constant to a string. */
    std::string a_multiversion_arch_kind_tag(int64_t, const std::string &strip);

    /** Return all a_multiversion_arch_kind_tag member values as a vector. */
    const std::vector<int64_t>& a_multiversion_arch_kind_tag();
}

namespace Rose {
    std::string stringify_a_multiversion_arch_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_multiversion_arch_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/mem_manage.h line 421
namespace stringify {
    /** Convert a_function_number_tag enum constant to a string. */
    const char* a_function_number_tag(int64_t);

    /** Convert a_function_number_tag enum constant to a string. */
    std::string a_function_number_tag(int64_t, const std::string &strip);

    /** Return all a_function_number_tag member values as a vector. */
    const std::vector<int64_t>& a_function_number_tag();
}

namespace Rose {
    std::string stringify_a_function_number_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_function_number_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/ms_metadata.cpp line 1032
namespace stringify { namespace a_type_wrapper {
    /** Convert a_type_wrapper::a_kind enum constant to a string. */
    const char* a_kind(int64_t);

    /** Convert a_type_wrapper::a_kind enum constant to a string. */
    std::string a_kind(int64_t, const std::string &strip);

    /** Return all a_type_wrapper::a_kind member values as a vector. */
    const std::vector<int64_t>& a_kind();
}}

namespace Rose {
    std::string stringify_a_type_wrapper_a_kind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_type_wrapper_a_kind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/ms_metadata.cpp line 1293
namespace stringify { namespace a_class_type_wrapper {
    /** Convert a_class_type_wrapper::a_class_kind enum constant to a string. */
    const char* a_class_kind(int64_t);

    /** Convert a_class_type_wrapper::a_class_kind enum constant to a string. */
    std::string a_class_kind(int64_t, const std::string &strip);

    /** Return all a_class_type_wrapper::a_class_kind member values as a vector. */
    const std::vector<int64_t>& a_class_kind();
}}

namespace Rose {
    std::string stringify_a_class_type_wrapper_a_class_kind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_class_type_wrapper_a_class_kind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/ms_metadata.cpp line 1414
namespace stringify { namespace a_type_indirection {
    /** Convert a_type_indirection::an_indirection_kind enum constant to a string. */
    const char* an_indirection_kind(int64_t);

    /** Convert a_type_indirection::an_indirection_kind enum constant to a string. */
    std::string an_indirection_kind(int64_t, const std::string &strip);

    /** Return all a_type_indirection::an_indirection_kind member values as a vector. */
    const std::vector<int64_t>& an_indirection_kind();
}}

namespace Rose {
    std::string stringify_a_type_indirection_an_indirection_kind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_type_indirection_an_indirection_kind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/ms_metadata.cpp line 1566
namespace stringify { namespace an_array_type_wrapper {
    /** Convert an_array_type_wrapper::an_array_kind enum constant to a string. */
    const char* an_array_kind(int64_t);

    /** Convert an_array_type_wrapper::an_array_kind enum constant to a string. */
    std::string an_array_kind(int64_t, const std::string &strip);

    /** Return all an_array_type_wrapper::an_array_kind member values as a vector. */
    const std::vector<int64_t>& an_array_kind();
}}

namespace Rose {
    std::string stringify_an_array_type_wrapper_an_array_kind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_array_type_wrapper_an_array_kind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/ms_metadata.cpp line 3807
namespace stringify { namespace an_accessibility {
    /** Convert an_accessibility::access_kind enum constant to a string. */
    const char* access_kind(int64_t);

    /** Convert an_accessibility::access_kind enum constant to a string. */
    std::string access_kind(int64_t, const std::string &strip);

    /** Return all an_accessibility::access_kind member values as a vector. */
    const std::vector<int64_t>& access_kind();
}}

namespace Rose {
    std::string stringify_an_accessibility_access_kind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_accessibility_access_kind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/ms_metadata.cpp line 3846
namespace stringify { namespace a_type_definition {
    /** Convert a_type_definition::a_type_definition_kind enum constant to a string. */
    const char* a_type_definition_kind(int64_t);

    /** Convert a_type_definition::a_type_definition_kind enum constant to a string. */
    std::string a_type_definition_kind(int64_t, const std::string &strip);

    /** Return all a_type_definition::a_type_definition_kind member values as a vector. */
    const std::vector<int64_t>& a_type_definition_kind();
}}

namespace Rose {
    std::string stringify_a_type_definition_a_type_definition_kind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_type_definition_a_type_definition_kind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/src/ms_metadata.h line 22
namespace stringify {
    /** Convert a_cpp_cli_import_flag_tag enum constant to a string. */
    const char* a_cpp_cli_import_flag_tag(int64_t);

    /** Convert a_cpp_cli_import_flag_tag enum constant to a string. */
    std::string a_cpp_cli_import_flag_tag(int64_t, const std::string &strip);

    /** Return all a_cpp_cli_import_flag_tag member values as a vector. */
    const std::vector<int64_t>& a_cpp_cli_import_flag_tag();
}

namespace Rose {
    std::string stringify_a_cpp_cli_import_flag_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_cpp_cli_import_flag_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/lib_src/eh.h line 348
namespace stringify {
    /** Convert an_eh_stack_entry_kind_tag enum constant to a string. */
    const char* an_eh_stack_entry_kind_tag(int64_t);

    /** Convert an_eh_stack_entry_kind_tag enum constant to a string. */
    std::string an_eh_stack_entry_kind_tag(int64_t, const std::string &strip);

    /** Return all an_eh_stack_entry_kind_tag member values as a vector. */
    const std::vector<int64_t>& an_eh_stack_entry_kind_tag();
}

namespace Rose {
    std::string stringify_an_eh_stack_entry_kind_tag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_eh_stack_entry_kind_tag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/lib_src/rtti.c line 120
namespace stringify {
    /** Convert a_result_virtuality enum constant to a string. */
    const char* a_result_virtuality(int64_t);

    /** Convert a_result_virtuality enum constant to a string. */
    std::string a_result_virtuality(int64_t, const std::string &strip);

    /** Return all a_result_virtuality member values as a vector. */
    const std::vector<int64_t>& a_result_virtuality();
}

namespace Rose {
    std::string stringify_a_result_virtuality(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_result_virtuality();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/include/cxxabi.h line 62
namespace stringify { namespace __cxxabiv1 { namespace __base_class_type_info {
    /** Convert __cxxabiv1::__base_class_type_info::__offset_flags_masks enum constant to a string. */
    const char* __offset_flags_masks(int64_t);

    /** Convert __cxxabiv1::__base_class_type_info::__offset_flags_masks enum constant to a string. */
    std::string __offset_flags_masks(int64_t, const std::string &strip);

    /** Return all __cxxabiv1::__base_class_type_info::__offset_flags_masks member values as a vector. */
    const std::vector<int64_t>& __offset_flags_masks();
}}}

namespace Rose {
    std::string stringify__cxxabiv1__base_class_type_info__offset_flags_masks(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify__cxxabiv1__base_class_type_info__offset_flags_masks();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/include/cxxabi.h line 77
namespace stringify { namespace __cxxabiv1 { namespace __vmi_class_type_info {
    /** Convert __cxxabiv1::__vmi_class_type_info::__flags_masks enum constant to a string. */
    const char* __flags_masks(int64_t);

    /** Convert __cxxabiv1::__vmi_class_type_info::__flags_masks enum constant to a string. */
    std::string __flags_masks(int64_t, const std::string &strip);

    /** Return all __cxxabiv1::__vmi_class_type_info::__flags_masks member values as a vector. */
    const std::vector<int64_t>& __flags_masks();
}}}

namespace Rose {
    std::string stringify__cxxabiv1__vmi_class_type_info__flags_masks(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify__cxxabiv1__vmi_class_type_info__flags_masks();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/include/cxxabi.h line 90
namespace stringify { namespace __cxxabiv1 { namespace __pbase_type_info {
    /** Convert __cxxabiv1::__pbase_type_info::__masks enum constant to a string. */
    const char* __masks(int64_t);

    /** Convert __cxxabiv1::__pbase_type_info::__masks enum constant to a string. */
    std::string __masks(int64_t, const std::string &strip);

    /** Return all __cxxabiv1::__pbase_type_info::__masks member values as a vector. */
    const std::vector<int64_t>& __masks();
}}}

namespace Rose {
    std::string stringify__cxxabiv1__pbase_type_info__masks(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify__cxxabiv1__pbase_type_info__masks();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_6.0/util/decode.c line 4308
namespace stringify {
    /** Convert a_substitution_kind enum constant to a string. */
    const char* a_substitution_kind(int64_t);

    /** Convert a_substitution_kind enum constant to a string. */
    std::string a_substitution_kind(int64_t, const std::string &strip);

    /** Return all a_substitution_kind member values as a vector. */
    const std::vector<int64_t>& a_substitution_kind();
}

namespace Rose {
    std::string stringify_a_substitution_kind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_substitution_kind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_5.0/src/decls.c line 16203
namespace stringify {
    /** Convert an_end_of_decl_action enum constant to a string. */
    const char* an_end_of_decl_action(int64_t);

    /** Convert an_end_of_decl_action enum constant to a string. */
    std::string an_end_of_decl_action(int64_t, const std::string &strip);

    /** Return all an_end_of_decl_action member values as a vector. */
    const std::vector<int64_t>& an_end_of_decl_action();
}

namespace Rose {
    std::string stringify_an_end_of_decl_action(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_an_end_of_decl_action();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_5.0/src/disp/error.c line 91
namespace stringify {
    /** Convert a_diag_fill_in_kind enum constant to a string. */
    const char* a_diag_fill_in_kind(int64_t);

    /** Convert a_diag_fill_in_kind enum constant to a string. */
    std::string a_diag_fill_in_kind(int64_t, const std::string &strip);

    /** Return all a_diag_fill_in_kind member values as a vector. */
    const std::vector<int64_t>& a_diag_fill_in_kind();
}

namespace Rose {
    std::string stringify_a_diag_fill_in_kind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_diag_fill_in_kind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/CxxFrontend/EDG/EDG_5.0/src/disp/error.c line 196
namespace stringify {
    /** Convert a_diagnostic_kind enum constant to a string. */
    const char* a_diagnostic_kind(int64_t);

    /** Convert a_diagnostic_kind enum constant to a string. */
    std::string a_diagnostic_kind(int64_t, const std::string &strip);

    /** Return all a_diagnostic_kind member values as a vector. */
    const std::vector<int64_t>& a_diagnostic_kind();
}

namespace Rose {
    std::string stringify_a_diagnostic_kind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_a_diagnostic_kind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_General_Language_Support/general_language_translation.h line 14
namespace stringify { namespace LanguageTranslation {
    /** Convert LanguageTranslation::FunctionModifier enum constant to a string. */
    const char* FunctionModifier(int64_t);

    /** Convert LanguageTranslation::FunctionModifier enum constant to a string. */
    std::string FunctionModifier(int64_t, const std::string &strip);

    /** Return all LanguageTranslation::FunctionModifier member values as a vector. */
    const std::vector<int64_t>& FunctionModifier();
}}

namespace Rose {
    std::string stringifyLanguageTranslationFunctionModifier(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyLanguageTranslationFunctionModifier();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_General_Language_Support/general_language_translation.h line 35
namespace stringify { namespace LanguageTranslation {
    /** Convert LanguageTranslation::PackingSpecifier enum constant to a string. */
    const char* PackingSpecifier(int64_t);

    /** Convert LanguageTranslation::PackingSpecifier enum constant to a string. */
    std::string PackingSpecifier(int64_t, const std::string &strip);

    /** Return all LanguageTranslation::PackingSpecifier member values as a vector. */
    const std::vector<int64_t>& PackingSpecifier();
}}

namespace Rose {
    std::string stringifyLanguageTranslationPackingSpecifier(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyLanguageTranslationPackingSpecifier();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_General_Language_Support/general_language_translation.h line 45
namespace stringify { namespace LanguageTranslation {
    /** Convert LanguageTranslation::ExpressionKind enum constant to a string. */
    const char* ExpressionKind(int64_t);

    /** Convert LanguageTranslation::ExpressionKind enum constant to a string. */
    std::string ExpressionKind(int64_t, const std::string &strip);

    /** Return all LanguageTranslation::ExpressionKind member values as a vector. */
    const std::vector<int64_t>& ExpressionKind();
}}

namespace Rose {
    std::string stringifyLanguageTranslationExpressionKind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyLanguageTranslationExpressionKind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_General_Language_Support/FASTNodes.h line 88
namespace stringify { namespace FAST { namespace TypeSpec {
    /** Convert FAST::TypeSpec::TypeEnum enum constant to a string. */
    const char* TypeEnum(int64_t);

    /** Convert FAST::TypeSpec::TypeEnum enum constant to a string. */
    std::string TypeEnum(int64_t, const std::string &strip);

    /** Return all FAST::TypeSpec::TypeEnum member values as a vector. */
    const std::vector<int64_t>& TypeEnum();
}}}

namespace Rose {
    std::string stringifyFAST_TypeSpecTypeEnum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyFAST_TypeSpecTypeEnum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_General_Language_Support/FASTNodes.h line 136
namespace stringify { namespace FAST { namespace AttrSpec {
    /** Convert FAST::AttrSpec::AttrEnum enum constant to a string. */
    const char* AttrEnum(int64_t);

    /** Convert FAST::AttrSpec::AttrEnum enum constant to a string. */
    std::string AttrEnum(int64_t, const std::string &strip);

    /** Return all FAST::AttrSpec::AttrEnum member values as a vector. */
    const std::vector<int64_t>& AttrEnum();
}}}

namespace Rose {
    std::string stringifyFAST_AttrSpecAttrEnum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyFAST_AttrSpecAttrEnum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_General_Language_Support/FASTNodes.h line 265
namespace stringify { namespace FAST { namespace UseStmt {
    /** Convert FAST::UseStmt::ModuleNature enum constant to a string. */
    const char* ModuleNature(int64_t);

    /** Convert FAST::UseStmt::ModuleNature enum constant to a string. */
    std::string ModuleNature(int64_t, const std::string &strip);

    /** Return all FAST::UseStmt::ModuleNature member values as a vector. */
    const std::vector<int64_t>& ModuleNature();
}}}

namespace Rose {
    std::string stringifyFAST_UseStmtModuleNature(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyFAST_UseStmtModuleNature();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_General_Language_Support/FASTNodes.h line 444
namespace stringify { namespace FAST { namespace PrefixSpec {
    /** Convert FAST::PrefixSpec::PrefixEnum enum constant to a string. */
    const char* PrefixEnum(int64_t);

    /** Convert FAST::PrefixSpec::PrefixEnum enum constant to a string. */
    std::string PrefixEnum(int64_t, const std::string &strip);

    /** Return all FAST::PrefixSpec::PrefixEnum member values as a vector. */
    const std::vector<int64_t>& PrefixEnum();
}}}

namespace Rose {
    std::string stringifyFAST_PrefixSpecPrefixEnum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyFAST_PrefixSpecPrefixEnum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Partitioner2/Partitioner.h line 1471
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Partitioner2 { namespace Partitioner { namespace MayReturnVertexInfo {
    /** Convert Rose::BinaryAnalysis::Partitioner2::Partitioner::MayReturnVertexInfo::State enum constant to a string. */
    const char* State(int64_t);

    /** Convert Rose::BinaryAnalysis::Partitioner2::Partitioner::MayReturnVertexInfo::State enum constant to a string. */
    std::string State(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::Partitioner2::Partitioner::MayReturnVertexInfo::State member values as a vector. */
    const std::vector<int64_t>& State();
}}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPartitioner2PartitionerMayReturnVertexInfoState(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisPartitioner2PartitionerMayReturnVertexInfoState();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Partitioner2/Function.h line 46
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Partitioner2 { namespace Function {
    /** Convert Rose::BinaryAnalysis::Partitioner2::Function::Ownership enum constant to a string. */
    const char* Ownership(int64_t);

    /** Convert Rose::BinaryAnalysis::Partitioner2::Function::Ownership enum constant to a string. */
    std::string Ownership(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::Partitioner2::Function::Ownership member values as a vector. */
    const std::vector<int64_t>& Ownership();
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPartitioner2FunctionOwnership(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisPartitioner2FunctionOwnership();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Partitioner2/CfgPath.h line 412
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Partitioner2 { namespace Inliner {
    /** Convert Rose::BinaryAnalysis::Partitioner2::Inliner::HowInline enum constant to a string. */
    const char* HowInline(int64_t);

    /** Convert Rose::BinaryAnalysis::Partitioner2::Inliner::HowInline enum constant to a string. */
    std::string HowInline(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::Partitioner2::Inliner::HowInline member values as a vector. */
    const std::vector<int64_t>& HowInline();
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPartitioner2InlinerHowInline(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisPartitioner2InlinerHowInline();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Partitioner2/ModulesElf.h line 76
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Partitioner2 { namespace ModulesElf { namespace FixUndefinedSymbols {
    /** Convert Rose::BinaryAnalysis::Partitioner2::ModulesElf::FixUndefinedSymbols::Boolean enum constant to a string. */
    const char* Boolean(int64_t);

    /** Convert Rose::BinaryAnalysis::Partitioner2::ModulesElf::FixUndefinedSymbols::Boolean enum constant to a string. */
    std::string Boolean(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::Partitioner2::ModulesElf::FixUndefinedSymbols::Boolean member values as a vector. */
    const std::vector<int64_t>& Boolean();
}}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPartitioner2ModulesElfFixUndefinedSymbolsBoolean(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisPartitioner2ModulesElfFixUndefinedSymbolsBoolean();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Partitioner2/Modules.h line 49
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Partitioner2 { namespace BasicBlockCallback {
    /** Convert Rose::BinaryAnalysis::Partitioner2::BasicBlockCallback::Termination enum constant to a string. */
    const char* Termination(int64_t);

    /** Convert Rose::BinaryAnalysis::Partitioner2::BasicBlockCallback::Termination enum constant to a string. */
    std::string Termination(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::Partitioner2::BasicBlockCallback::Termination member values as a vector. */
    const std::vector<int64_t>& Termination();
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPartitioner2BasicBlockCallbackTermination(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisPartitioner2BasicBlockCallbackTermination();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Partitioner2/BasicTypes.h line 27
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Partitioner2 { namespace Precision {
    /** Convert Rose::BinaryAnalysis::Partitioner2::Precision::Level enum constant to a string. */
    const char* Level(int64_t);

    /** Convert Rose::BinaryAnalysis::Partitioner2::Precision::Level enum constant to a string. */
    std::string Level(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::Partitioner2::Precision::Level member values as a vector. */
    const std::vector<int64_t>& Level();
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPartitioner2PrecisionLevel(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisPartitioner2PrecisionLevel();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Partitioner2/BasicTypes.h line 37
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Partitioner2 { namespace AllowParallelEdges {
    /** Convert Rose::BinaryAnalysis::Partitioner2::AllowParallelEdges::Type enum constant to a string. */
    const char* Type(int64_t);

    /** Convert Rose::BinaryAnalysis::Partitioner2::AllowParallelEdges::Type enum constant to a string. */
    std::string Type(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::Partitioner2::AllowParallelEdges::Type member values as a vector. */
    const std::vector<int64_t>& Type();
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPartitioner2AllowParallelEdgesType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisPartitioner2AllowParallelEdgesType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Partitioner2/BasicTypes.h line 44
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Partitioner2 {
    /** Convert Rose::BinaryAnalysis::Partitioner2::VertexType enum constant to a string. */
    const char* VertexType(int64_t);

    /** Convert Rose::BinaryAnalysis::Partitioner2::VertexType enum constant to a string. */
    std::string VertexType(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::Partitioner2::VertexType member values as a vector. */
    const std::vector<int64_t>& VertexType();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPartitioner2VertexType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisPartitioner2VertexType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Partitioner2/BasicTypes.h line 55
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Partitioner2 {
    /** Convert Rose::BinaryAnalysis::Partitioner2::EdgeType enum constant to a string. */
    const char* EdgeType(int64_t);

    /** Convert Rose::BinaryAnalysis::Partitioner2::EdgeType enum constant to a string. */
    std::string EdgeType(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::Partitioner2::EdgeType member values as a vector. */
    const std::vector<int64_t>& EdgeType();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPartitioner2EdgeType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisPartitioner2EdgeType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Partitioner2/BasicTypes.h line 79
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Partitioner2 {
    /** Convert Rose::BinaryAnalysis::Partitioner2::Confidence enum constant to a string. */
    const char* Confidence(int64_t);

    /** Convert Rose::BinaryAnalysis::Partitioner2::Confidence enum constant to a string. */
    std::string Confidence(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::Partitioner2::Confidence member values as a vector. */
    const std::vector<int64_t>& Confidence();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPartitioner2Confidence(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisPartitioner2Confidence();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Partitioner2/BasicTypes.h line 85
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Partitioner2 {
    /** Convert Rose::BinaryAnalysis::Partitioner2::SemanticMemoryParadigm enum constant to a string. */
    const char* SemanticMemoryParadigm(int64_t);

    /** Convert Rose::BinaryAnalysis::Partitioner2::SemanticMemoryParadigm enum constant to a string. */
    std::string SemanticMemoryParadigm(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::Partitioner2::SemanticMemoryParadigm member values as a vector. */
    const std::vector<int64_t>& SemanticMemoryParadigm();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPartitioner2SemanticMemoryParadigm(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisPartitioner2SemanticMemoryParadigm();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Partitioner2/BasicTypes.h line 183
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Partitioner2 {
    /** Convert Rose::BinaryAnalysis::Partitioner2::MemoryDataAdjustment enum constant to a string. */
    const char* MemoryDataAdjustment(int64_t);

    /** Convert Rose::BinaryAnalysis::Partitioner2::MemoryDataAdjustment enum constant to a string. */
    std::string MemoryDataAdjustment(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::Partitioner2::MemoryDataAdjustment member values as a vector. */
    const std::vector<int64_t>& MemoryDataAdjustment();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPartitioner2MemoryDataAdjustment(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisPartitioner2MemoryDataAdjustment();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Partitioner2/BasicTypes.h line 291
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Partitioner2 {
    /** Convert Rose::BinaryAnalysis::Partitioner2::FunctionReturnAnalysis enum constant to a string. */
    const char* FunctionReturnAnalysis(int64_t);

    /** Convert Rose::BinaryAnalysis::Partitioner2::FunctionReturnAnalysis enum constant to a string. */
    std::string FunctionReturnAnalysis(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::Partitioner2::FunctionReturnAnalysis member values as a vector. */
    const std::vector<int64_t>& FunctionReturnAnalysis();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPartitioner2FunctionReturnAnalysis(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisPartitioner2FunctionReturnAnalysis();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Partitioner2/Reference.h line 32
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Partitioner2 { namespace Reference {
    /** Convert Rose::BinaryAnalysis::Partitioner2::Reference::Granularity enum constant to a string. */
    const char* Granularity(int64_t);

    /** Convert Rose::BinaryAnalysis::Partitioner2::Reference::Granularity enum constant to a string. */
    std::string Granularity(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::Partitioner2::Reference::Granularity member values as a vector. */
    const std::vector<int64_t>& Granularity();
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPartitioner2ReferenceGranularity(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisPartitioner2ReferenceGranularity();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Partitioner2/DataFlow.h line 31
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Partitioner2 { namespace DataFlow { namespace DfCfgVertex {
    /** Convert Rose::BinaryAnalysis::Partitioner2::DataFlow::DfCfgVertex::Type enum constant to a string. */
    const char* Type(int64_t);

    /** Convert Rose::BinaryAnalysis::Partitioner2::DataFlow::DfCfgVertex::Type enum constant to a string. */
    std::string Type(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::Partitioner2::DataFlow::DfCfgVertex::Type member values as a vector. */
    const std::vector<int64_t>& Type();
}}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPartitioner2DataFlowDfCfgVertexType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisPartitioner2DataFlowDfCfgVertexType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Jovial_ROSE_Connection/jovial_preprocess.C line 12
namespace stringify {
    /** Convert State enum constant to a string. */
    const char* State(int64_t);

    /** Convert State enum constant to a string. */
    std::string State(int64_t, const std::string &strip);

    /** Return all State member values as a vector. */
    const std::vector<int64_t>& State();
}

namespace Rose {
    std::string stringifyState(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyState();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Jovial_ROSE_Connection/Jovial_to_ROSE_translation.h line 11
namespace stringify { namespace Jovial_ROSE_Translation {
    /** Convert Jovial_ROSE_Translation::ExpressionKind enum constant to a string. */
    const char* ExpressionKind(int64_t);

    /** Convert Jovial_ROSE_Translation::ExpressionKind enum constant to a string. */
    std::string ExpressionKind(int64_t, const std::string &strip);

    /** Return all Jovial_ROSE_Translation::ExpressionKind member values as a vector. */
    const std::vector<int64_t>& ExpressionKind();
}}

namespace Rose {
    std::string stringifyJovial_ROSE_TranslationExpressionKind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyJovial_ROSE_TranslationExpressionKind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/BinaryLoader/BinaryLoader.h line 66
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace BinaryLoader {
    /** Convert Rose::BinaryAnalysis::BinaryLoader::MappingContribution enum constant to a string. */
    const char* MappingContribution(int64_t);

    /** Convert Rose::BinaryAnalysis::BinaryLoader::MappingContribution enum constant to a string. */
    std::string MappingContribution(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::BinaryLoader::MappingContribution member values as a vector. */
    const std::vector<int64_t>& MappingContribution();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisBinaryLoaderMappingContribution(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisBinaryLoaderMappingContribution();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/BinaryLoader/BinaryLoader.h line 74
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace BinaryLoader {
    /** Convert Rose::BinaryAnalysis::BinaryLoader::ConflictResolution enum constant to a string. */
    const char* ConflictResolution(int64_t);

    /** Convert Rose::BinaryAnalysis::BinaryLoader::ConflictResolution enum constant to a string. */
    std::string ConflictResolution(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::BinaryLoader::ConflictResolution member values as a vector. */
    const std::vector<int64_t>& ConflictResolution();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisBinaryLoaderConflictResolution(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisBinaryLoaderConflictResolution();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/OpenFortranParser_SAGE_Connection/rose_token_defs_gen.h line 14
namespace stringify { namespace ROSE_Fortran_defs {
    /** Convert ROSE_Fortran_defs::ROSE_Fortran_keywords enum constant to a string. */
    const char* ROSE_Fortran_keywords(int64_t);

    /** Convert ROSE_Fortran_defs::ROSE_Fortran_keywords enum constant to a string. */
    std::string ROSE_Fortran_keywords(int64_t, const std::string &strip);

    /** Return all ROSE_Fortran_defs::ROSE_Fortran_keywords member values as a vector. */
    const std::vector<int64_t>& ROSE_Fortran_keywords();
}}

namespace Rose {
    std::string stringifyROSE_Fortran_defsROSE_Fortran_keywords(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyROSE_Fortran_defsROSE_Fortran_keywords();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/OpenFortranParser_SAGE_Connection/rose_token_defs_gen.h line 147
namespace stringify { namespace ROSE_Fortran_defs {
    /** Convert ROSE_Fortran_defs::ROSE_C_CXX_keywords enum constant to a string. */
    const char* ROSE_C_CXX_keywords(int64_t);

    /** Convert ROSE_Fortran_defs::ROSE_C_CXX_keywords enum constant to a string. */
    std::string ROSE_C_CXX_keywords(int64_t, const std::string &strip);

    /** Return all ROSE_Fortran_defs::ROSE_C_CXX_keywords member values as a vector. */
    const std::vector<int64_t>& ROSE_C_CXX_keywords();
}}

namespace Rose {
    std::string stringifyROSE_Fortran_defsROSE_C_CXX_keywords(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyROSE_Fortran_defsROSE_C_CXX_keywords();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/OpenFortranParser_SAGE_Connection/rose_token_defs_gen.h line 215
namespace stringify { namespace ROSE_Fortran_defs {
    /** Convert ROSE_Fortran_defs::ROSE_Fortran_Operators enum constant to a string. */
    const char* ROSE_Fortran_Operators(int64_t);

    /** Convert ROSE_Fortran_defs::ROSE_Fortran_Operators enum constant to a string. */
    std::string ROSE_Fortran_Operators(int64_t, const std::string &strip);

    /** Return all ROSE_Fortran_defs::ROSE_Fortran_Operators member values as a vector. */
    const std::vector<int64_t>& ROSE_Fortran_Operators();
}}

namespace Rose {
    std::string stringifyROSE_Fortran_defsROSE_Fortran_Operators(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyROSE_Fortran_defsROSE_Fortran_Operators();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/OpenFortranParser_SAGE_Connection/rose_token_defs_gen.h line 242
namespace stringify { namespace ROSE_Fortran_defs {
    /** Convert ROSE_Fortran_defs::ROSE_C_CXX_operators enum constant to a string. */
    const char* ROSE_C_CXX_operators(int64_t);

    /** Convert ROSE_Fortran_defs::ROSE_C_CXX_operators enum constant to a string. */
    std::string ROSE_C_CXX_operators(int64_t, const std::string &strip);

    /** Return all ROSE_Fortran_defs::ROSE_C_CXX_operators member values as a vector. */
    const std::vector<int64_t>& ROSE_C_CXX_operators();
}}

namespace Rose {
    std::string stringifyROSE_Fortran_defsROSE_C_CXX_operators(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyROSE_Fortran_defsROSE_C_CXX_operators();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/OpenFortranParser_SAGE_Connection/rose_token_defs_gen.h line 321
namespace stringify { namespace ROSE_Fortran_defs {
    /** Convert ROSE_Fortran_defs::ROSE_Fortran_Additional_Info enum constant to a string. */
    const char* ROSE_Fortran_Additional_Info(int64_t);

    /** Convert ROSE_Fortran_defs::ROSE_Fortran_Additional_Info enum constant to a string. */
    std::string ROSE_Fortran_Additional_Info(int64_t, const std::string &strip);

    /** Return all ROSE_Fortran_defs::ROSE_Fortran_Additional_Info member values as a vector. */
    const std::vector<int64_t>& ROSE_Fortran_Additional_Info();
}}

namespace Rose {
    std::string stringifyROSE_Fortran_defsROSE_Fortran_Additional_Info(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyROSE_Fortran_defsROSE_Fortran_Additional_Info();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/OpenFortranParser_SAGE_Connection/rose_token_defs.h line 10
namespace stringify {
    /** Convert ROSE_Fortran_Identifiers enum constant to a string. */
    const char* ROSE_Fortran_Identifiers(int64_t);

    /** Convert ROSE_Fortran_Identifiers enum constant to a string. */
    std::string ROSE_Fortran_Identifiers(int64_t, const std::string &strip);

    /** Return all ROSE_Fortran_Identifiers member values as a vector. */
    const std::vector<int64_t>& ROSE_Fortran_Identifiers();
}

namespace Rose {
    std::string stringifyROSE_Fortran_Identifiers(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyROSE_Fortran_Identifiers();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/OpenFortranParser_SAGE_Connection/rose_token_defs.h line 140
namespace stringify {
    /** Convert ROSE_Fortran_Operators enum constant to a string. */
    const char* ROSE_Fortran_Operators(int64_t);

    /** Convert ROSE_Fortran_Operators enum constant to a string. */
    std::string ROSE_Fortran_Operators(int64_t, const std::string &strip);

    /** Return all ROSE_Fortran_Operators member values as a vector. */
    const std::vector<int64_t>& ROSE_Fortran_Operators();
}

namespace Rose {
    std::string stringifyROSE_Fortran_Operators(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyROSE_Fortran_Operators();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/OpenFortranParser_SAGE_Connection/rose_token_defs.h line 167
namespace stringify {
    /** Convert ROSE_Fortran_Additional_Info enum constant to a string. */
    const char* ROSE_Fortran_Additional_Info(int64_t);

    /** Convert ROSE_Fortran_Additional_Info enum constant to a string. */
    std::string ROSE_Fortran_Additional_Info(int64_t, const std::string &strip);

    /** Return all ROSE_Fortran_Additional_Info member values as a vector. */
    const std::vector<int64_t>& ROSE_Fortran_Additional_Info();
}

namespace Rose {
    std::string stringifyROSE_Fortran_Additional_Info(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyROSE_Fortran_Additional_Info();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_OpenFortranParser_ROSE_Connection/Fortran_to_ROSE_translation.h line 8
namespace stringify { namespace Fortran_ROSE_Translation {
    /** Convert Fortran_ROSE_Translation::ExpressionKind enum constant to a string. */
    const char* ExpressionKind(int64_t);

    /** Convert Fortran_ROSE_Translation::ExpressionKind enum constant to a string. */
    std::string ExpressionKind(int64_t, const std::string &strip);

    /** Return all Fortran_ROSE_Translation::ExpressionKind member values as a vector. */
    const std::vector<int64_t>& ExpressionKind();
}}

namespace Rose {
    std::string stringifyFortran_ROSE_TranslationExpressionKind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyFortran_ROSE_TranslationExpressionKind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/AssemblerX86Init.h line 27
namespace stringify { namespace Rose { namespace BinaryAnalysis {
    /** Convert Rose::BinaryAnalysis::X86InstructionKind enum constant to a string. */
    const char* X86InstructionKind(int64_t);

    /** Convert Rose::BinaryAnalysis::X86InstructionKind enum constant to a string. */
    std::string X86InstructionKind(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::X86InstructionKind member values as a vector. */
    const std::vector<int64_t>& X86InstructionKind();
}}}

namespace Rose {
    std::string stringifyBinaryAnalysisX86InstructionKind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisX86InstructionKind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsPowerpc.h line 13
namespace stringify { namespace Rose { namespace BinaryAnalysis {
    /** Convert Rose::BinaryAnalysis::PowerpcWordSize enum constant to a string. */
    const char* PowerpcWordSize(int64_t);

    /** Convert Rose::BinaryAnalysis::PowerpcWordSize enum constant to a string. */
    std::string PowerpcWordSize(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::PowerpcWordSize member values as a vector. */
    const std::vector<int64_t>& PowerpcWordSize();
}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPowerpcWordSize(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisPowerpcWordSize();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsPowerpc.h line 19
namespace stringify { namespace Rose { namespace BinaryAnalysis {
    /** Convert Rose::BinaryAnalysis::PowerpcInstructionKind enum constant to a string. */
    const char* PowerpcInstructionKind(int64_t);

    /** Convert Rose::BinaryAnalysis::PowerpcInstructionKind enum constant to a string. */
    std::string PowerpcInstructionKind(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::PowerpcInstructionKind member values as a vector. */
    const std::vector<int64_t>& PowerpcInstructionKind();
}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPowerpcInstructionKind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisPowerpcInstructionKind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsPowerpc.h line 466
namespace stringify { namespace Rose { namespace BinaryAnalysis {
    /** Convert Rose::BinaryAnalysis::PowerpcRegisterClass enum constant to a string. */
    const char* PowerpcRegisterClass(int64_t);

    /** Convert Rose::BinaryAnalysis::PowerpcRegisterClass enum constant to a string. */
    std::string PowerpcRegisterClass(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::PowerpcRegisterClass member values as a vector. */
    const std::vector<int64_t>& PowerpcRegisterClass();
}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPowerpcRegisterClass(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisPowerpcRegisterClass();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsPowerpc.h line 482
namespace stringify { namespace Rose { namespace BinaryAnalysis {
    /** Convert Rose::BinaryAnalysis::PowerpcConditionRegisterAccessGranularity enum constant to a string. */
    const char* PowerpcConditionRegisterAccessGranularity(int64_t);

    /** Convert Rose::BinaryAnalysis::PowerpcConditionRegisterAccessGranularity enum constant to a string. */
    std::string PowerpcConditionRegisterAccessGranularity(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::PowerpcConditionRegisterAccessGranularity member values as a vector. */
    const std::vector<int64_t>& PowerpcConditionRegisterAccessGranularity();
}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPowerpcConditionRegisterAccessGranularity(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisPowerpcConditionRegisterAccessGranularity();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsPowerpc.h line 489
namespace stringify { namespace Rose { namespace BinaryAnalysis {
    /** Convert Rose::BinaryAnalysis::PowerpcSpecialPurposeRegister enum constant to a string. */
    const char* PowerpcSpecialPurposeRegister(int64_t);

    /** Convert Rose::BinaryAnalysis::PowerpcSpecialPurposeRegister enum constant to a string. */
    std::string PowerpcSpecialPurposeRegister(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::PowerpcSpecialPurposeRegister member values as a vector. */
    const std::vector<int64_t>& PowerpcSpecialPurposeRegister();
}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPowerpcSpecialPurposeRegister(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisPowerpcSpecialPurposeRegister();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsPowerpc.h line 500
namespace stringify { namespace Rose { namespace BinaryAnalysis {
    /** Convert Rose::BinaryAnalysis::PowerpcTimeBaseRegister enum constant to a string. */
    const char* PowerpcTimeBaseRegister(int64_t);

    /** Convert Rose::BinaryAnalysis::PowerpcTimeBaseRegister enum constant to a string. */
    std::string PowerpcTimeBaseRegister(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::PowerpcTimeBaseRegister member values as a vector. */
    const std::vector<int64_t>& PowerpcTimeBaseRegister();
}}}

namespace Rose {
    std::string stringifyBinaryAnalysisPowerpcTimeBaseRegister(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisPowerpcTimeBaseRegister();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/Assembler.h line 79
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace Assembler {
    /** Convert Rose::BinaryAnalysis::Assembler::EncodingType enum constant to a string. */
    const char* EncodingType(int64_t);

    /** Convert Rose::BinaryAnalysis::Assembler::EncodingType enum constant to a string. */
    std::string EncodingType(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::Assembler::EncodingType member values as a vector. */
    const std::vector<int64_t>& EncodingType();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisAssemblerEncodingType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisAssemblerEncodingType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/AssemblerX86.h line 143
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace AssemblerX86 {
    /** Convert Rose::BinaryAnalysis::AssemblerX86::OperandDefn enum constant to a string. */
    const char* OperandDefn(int64_t);

    /** Convert Rose::BinaryAnalysis::AssemblerX86::OperandDefn enum constant to a string. */
    std::string OperandDefn(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::AssemblerX86::OperandDefn member values as a vector. */
    const std::vector<int64_t>& OperandDefn();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisAssemblerX86OperandDefn(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisAssemblerX86OperandDefn();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/AssemblerX86.h line 384
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace AssemblerX86 {
    /** Convert Rose::BinaryAnalysis::AssemblerX86::MemoryReferencePattern enum constant to a string. */
    const char* MemoryReferencePattern(int64_t);

    /** Convert Rose::BinaryAnalysis::AssemblerX86::MemoryReferencePattern enum constant to a string. */
    std::string MemoryReferencePattern(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::AssemblerX86::MemoryReferencePattern member values as a vector. */
    const std::vector<int64_t>& MemoryReferencePattern();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisAssemblerX86MemoryReferencePattern(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisAssemblerX86MemoryReferencePattern();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/DisassemblerMips.h line 37
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace DisassemblerMips { namespace Mips32 {
    /** Convert Rose::BinaryAnalysis::DisassemblerMips::Mips32::Architecture enum constant to a string. */
    const char* Architecture(int64_t);

    /** Convert Rose::BinaryAnalysis::DisassemblerMips::Mips32::Architecture enum constant to a string. */
    std::string Architecture(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::DisassemblerMips::Mips32::Architecture member values as a vector. */
    const std::vector<int64_t>& Architecture();
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisDisassemblerMipsMips32Architecture(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisDisassemblerMipsMips32Architecture();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsM68k.h line 19
namespace stringify { namespace Rose { namespace BinaryAnalysis {
    /** Convert Rose::BinaryAnalysis::M68kFamily enum constant to a string. */
    const char* M68kFamily(int64_t);

    /** Convert Rose::BinaryAnalysis::M68kFamily enum constant to a string. */
    std::string M68kFamily(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::M68kFamily member values as a vector. */
    const std::vector<int64_t>& M68kFamily();
}}}

namespace Rose {
    std::string stringifyBinaryAnalysisM68kFamily(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisM68kFamily();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsM68k.h line 57
namespace stringify { namespace Rose { namespace BinaryAnalysis {
    /** Convert Rose::BinaryAnalysis::M68kRegisterClass enum constant to a string. */
    const char* M68kRegisterClass(int64_t);

    /** Convert Rose::BinaryAnalysis::M68kRegisterClass enum constant to a string. */
    std::string M68kRegisterClass(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::M68kRegisterClass member values as a vector. */
    const std::vector<int64_t>& M68kRegisterClass();
}}}

namespace Rose {
    std::string stringifyBinaryAnalysisM68kRegisterClass(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisM68kRegisterClass();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsM68k.h line 67
namespace stringify { namespace Rose { namespace BinaryAnalysis {
    /** Convert Rose::BinaryAnalysis::M68kSpecialPurposeRegister enum constant to a string. */
    const char* M68kSpecialPurposeRegister(int64_t);

    /** Convert Rose::BinaryAnalysis::M68kSpecialPurposeRegister enum constant to a string. */
    std::string M68kSpecialPurposeRegister(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::M68kSpecialPurposeRegister member values as a vector. */
    const std::vector<int64_t>& M68kSpecialPurposeRegister();
}}}

namespace Rose {
    std::string stringifyBinaryAnalysisM68kSpecialPurposeRegister(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisM68kSpecialPurposeRegister();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsM68k.h line 76
namespace stringify { namespace Rose { namespace BinaryAnalysis {
    /** Convert Rose::BinaryAnalysis::M68kMacRegister enum constant to a string. */
    const char* M68kMacRegister(int64_t);

    /** Convert Rose::BinaryAnalysis::M68kMacRegister enum constant to a string. */
    std::string M68kMacRegister(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::M68kMacRegister member values as a vector. */
    const std::vector<int64_t>& M68kMacRegister();
}}}

namespace Rose {
    std::string stringifyBinaryAnalysisM68kMacRegister(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisM68kMacRegister();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsM68k.h line 92
namespace stringify { namespace Rose { namespace BinaryAnalysis {
    /** Convert Rose::BinaryAnalysis::M68kEmacRegister enum constant to a string. */
    const char* M68kEmacRegister(int64_t);

    /** Convert Rose::BinaryAnalysis::M68kEmacRegister enum constant to a string. */
    std::string M68kEmacRegister(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::M68kEmacRegister member values as a vector. */
    const std::vector<int64_t>& M68kEmacRegister();
}}}

namespace Rose {
    std::string stringifyBinaryAnalysisM68kEmacRegister(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisM68kEmacRegister();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsM68k.h line 102
namespace stringify { namespace Rose { namespace BinaryAnalysis {
    /** Convert Rose::BinaryAnalysis::M68kSupervisorRegister enum constant to a string. */
    const char* M68kSupervisorRegister(int64_t);

    /** Convert Rose::BinaryAnalysis::M68kSupervisorRegister enum constant to a string. */
    std::string M68kSupervisorRegister(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::M68kSupervisorRegister member values as a vector. */
    const std::vector<int64_t>& M68kSupervisorRegister();
}}}

namespace Rose {
    std::string stringifyBinaryAnalysisM68kSupervisorRegister(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisM68kSupervisorRegister();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsM68k.h line 189
namespace stringify { namespace Rose { namespace BinaryAnalysis {
    /** Convert Rose::BinaryAnalysis::M68kEffectiveAddressMode enum constant to a string. */
    const char* M68kEffectiveAddressMode(int64_t);

    /** Convert Rose::BinaryAnalysis::M68kEffectiveAddressMode enum constant to a string. */
    std::string M68kEffectiveAddressMode(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::M68kEffectiveAddressMode member values as a vector. */
    const std::vector<int64_t>& M68kEffectiveAddressMode();
}}}

namespace Rose {
    std::string stringifyBinaryAnalysisM68kEffectiveAddressMode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisM68kEffectiveAddressMode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsM68k.h line 243
namespace stringify { namespace Rose { namespace BinaryAnalysis {
    /** Convert Rose::BinaryAnalysis::M68kDataFormat enum constant to a string. */
    const char* M68kDataFormat(int64_t);

    /** Convert Rose::BinaryAnalysis::M68kDataFormat enum constant to a string. */
    std::string M68kDataFormat(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::M68kDataFormat member values as a vector. */
    const std::vector<int64_t>& M68kDataFormat();
}}}

namespace Rose {
    std::string stringifyBinaryAnalysisM68kDataFormat(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisM68kDataFormat();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsM68k.h line 255
namespace stringify { namespace Rose { namespace BinaryAnalysis {
    /** Convert Rose::BinaryAnalysis::M68kInstructionKind enum constant to a string. */
    const char* M68kInstructionKind(int64_t);

    /** Convert Rose::BinaryAnalysis::M68kInstructionKind enum constant to a string. */
    std::string M68kInstructionKind(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::M68kInstructionKind member values as a vector. */
    const std::vector<int64_t>& M68kInstructionKind();
}}}

namespace Rose {
    std::string stringifyBinaryAnalysisM68kInstructionKind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisM68kInstructionKind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/DisassemblerX86.h line 151
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace DisassemblerX86 {
    /** Convert Rose::BinaryAnalysis::DisassemblerX86::RegisterMode enum constant to a string. */
    const char* RegisterMode(int64_t);

    /** Convert Rose::BinaryAnalysis::DisassemblerX86::RegisterMode enum constant to a string. */
    std::string RegisterMode(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::DisassemblerX86::RegisterMode member values as a vector. */
    const std::vector<int64_t>& RegisterMode();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisDisassemblerX86RegisterMode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisDisassemblerX86RegisterMode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/DisassemblerX86.h line 156
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace DisassemblerX86 {
    /** Convert Rose::BinaryAnalysis::DisassemblerX86::MMPrefix enum constant to a string. */
    const char* MMPrefix(int64_t);

    /** Convert Rose::BinaryAnalysis::DisassemblerX86::MMPrefix enum constant to a string. */
    std::string MMPrefix(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::DisassemblerX86::MMPrefix member values as a vector. */
    const std::vector<int64_t>& MMPrefix();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisDisassemblerX86MMPrefix(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisDisassemblerX86MMPrefix();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsA64.h line 34
namespace stringify { namespace Rose { namespace BinaryAnalysis {
    /** Convert Rose::BinaryAnalysis::A64RegisterClass enum constant to a string. */
    const char* A64RegisterClass(int64_t);

    /** Convert Rose::BinaryAnalysis::A64RegisterClass enum constant to a string. */
    std::string A64RegisterClass(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::A64RegisterClass member values as a vector. */
    const std::vector<int64_t>& A64RegisterClass();
}}}

namespace Rose {
    std::string stringifyBinaryAnalysisA64RegisterClass(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisA64RegisterClass();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsA64.h line 49
namespace stringify { namespace Rose { namespace BinaryAnalysis {
    /** Convert Rose::BinaryAnalysis::A64SystemRegisters enum constant to a string. */
    const char* A64SystemRegisters(int64_t);

    /** Convert Rose::BinaryAnalysis::A64SystemRegisters enum constant to a string. */
    std::string A64SystemRegisters(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::A64SystemRegisters member values as a vector. */
    const std::vector<int64_t>& A64SystemRegisters();
}}}

namespace Rose {
    std::string stringifyBinaryAnalysisA64SystemRegisters(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisA64SystemRegisters();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/DisassemblerA64.h line 39
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace DisassemblerArm {
    /** Convert Rose::BinaryAnalysis::DisassemblerArm::Architecture enum constant to a string. */
    const char* Architecture(int64_t);

    /** Convert Rose::BinaryAnalysis::DisassemblerArm::Architecture enum constant to a string. */
    std::string Architecture(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::DisassemblerArm::Architecture member values as a vector. */
    const std::vector<int64_t>& Architecture();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisDisassemblerArmArchitecture(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisDisassemblerArmArchitecture();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/DisassemblerA64.h line 45
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace DisassemblerArm {
    /** Convert Rose::BinaryAnalysis::DisassemblerArm::Mode enum constant to a string. */
    const char* Mode(int64_t);

    /** Convert Rose::BinaryAnalysis::DisassemblerArm::Mode enum constant to a string. */
    std::string Mode(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::DisassemblerArm::Mode member values as a vector. */
    const std::vector<int64_t>& Mode();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisDisassemblerArmMode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisDisassemblerArmMode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsX86.h line 15
namespace stringify { namespace Rose { namespace BinaryAnalysis {
    /** Convert Rose::BinaryAnalysis::X86InstructionSize enum constant to a string. */
    const char* X86InstructionSize(int64_t);

    /** Convert Rose::BinaryAnalysis::X86InstructionSize enum constant to a string. */
    std::string X86InstructionSize(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::X86InstructionSize member values as a vector. */
    const std::vector<int64_t>& X86InstructionSize();
}}}

namespace Rose {
    std::string stringifyBinaryAnalysisX86InstructionSize(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisX86InstructionSize();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsX86.h line 23
namespace stringify { namespace Rose { namespace BinaryAnalysis {
    /** Convert Rose::BinaryAnalysis::X86RegisterClass enum constant to a string. */
    const char* X86RegisterClass(int64_t);

    /** Convert Rose::BinaryAnalysis::X86RegisterClass enum constant to a string. */
    std::string X86RegisterClass(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::X86RegisterClass member values as a vector. */
    const std::vector<int64_t>& X86RegisterClass();
}}}

namespace Rose {
    std::string stringifyBinaryAnalysisX86RegisterClass(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisX86RegisterClass();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsX86.h line 36
namespace stringify { namespace Rose { namespace BinaryAnalysis {
    /** Convert Rose::BinaryAnalysis::X86SegmentRegister enum constant to a string. */
    const char* X86SegmentRegister(int64_t);

    /** Convert Rose::BinaryAnalysis::X86SegmentRegister enum constant to a string. */
    std::string X86SegmentRegister(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::X86SegmentRegister member values as a vector. */
    const std::vector<int64_t>& X86SegmentRegister();
}}}

namespace Rose {
    std::string stringifyBinaryAnalysisX86SegmentRegister(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisX86SegmentRegister();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsX86.h line 47
namespace stringify { namespace Rose { namespace BinaryAnalysis {
    /** Convert Rose::BinaryAnalysis::X86GeneralPurposeRegister enum constant to a string. */
    const char* X86GeneralPurposeRegister(int64_t);

    /** Convert Rose::BinaryAnalysis::X86GeneralPurposeRegister enum constant to a string. */
    std::string X86GeneralPurposeRegister(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::X86GeneralPurposeRegister member values as a vector. */
    const std::vector<int64_t>& X86GeneralPurposeRegister();
}}}

namespace Rose {
    std::string stringifyBinaryAnalysisX86GeneralPurposeRegister(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisX86GeneralPurposeRegister();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsX86.h line 67
namespace stringify { namespace Rose { namespace BinaryAnalysis {
    /** Convert Rose::BinaryAnalysis::X86StRegister enum constant to a string. */
    const char* X86StRegister(int64_t);

    /** Convert Rose::BinaryAnalysis::X86StRegister enum constant to a string. */
    std::string X86StRegister(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::X86StRegister member values as a vector. */
    const std::vector<int64_t>& X86StRegister();
}}}

namespace Rose {
    std::string stringifyBinaryAnalysisX86StRegister(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisX86StRegister();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsX86.h line 80
namespace stringify { namespace Rose { namespace BinaryAnalysis {
    /** Convert Rose::BinaryAnalysis::X86Flags enum constant to a string. */
    const char* X86Flags(int64_t);

    /** Convert Rose::BinaryAnalysis::X86Flags enum constant to a string. */
    std::string X86Flags(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::X86Flags member values as a vector. */
    const std::vector<int64_t>& X86Flags();
}}}

namespace Rose {
    std::string stringifyBinaryAnalysisX86Flags(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisX86Flags();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsX86.h line 89
namespace stringify { namespace Rose { namespace BinaryAnalysis {
    /** Convert Rose::BinaryAnalysis::X86Flag enum constant to a string. */
    const char* X86Flag(int64_t);

    /** Convert Rose::BinaryAnalysis::X86Flag enum constant to a string. */
    std::string X86Flag(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::X86Flag member values as a vector. */
    const std::vector<int64_t>& X86Flag();
}}}

namespace Rose {
    std::string stringifyBinaryAnalysisX86Flag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisX86Flag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsX86.h line 110
namespace stringify { namespace Rose { namespace BinaryAnalysis {
    /** Convert Rose::BinaryAnalysis::X86BranchPrediction enum constant to a string. */
    const char* X86BranchPrediction(int64_t);

    /** Convert Rose::BinaryAnalysis::X86BranchPrediction enum constant to a string. */
    std::string X86BranchPrediction(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::X86BranchPrediction member values as a vector. */
    const std::vector<int64_t>& X86BranchPrediction();
}}}

namespace Rose {
    std::string stringifyBinaryAnalysisX86BranchPrediction(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisX86BranchPrediction();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsX86.h line 118
namespace stringify { namespace Rose { namespace BinaryAnalysis {
    /** Convert Rose::BinaryAnalysis::X86RepeatPrefix enum constant to a string. */
    const char* X86RepeatPrefix(int64_t);

    /** Convert Rose::BinaryAnalysis::X86RepeatPrefix enum constant to a string. */
    std::string X86RepeatPrefix(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::X86RepeatPrefix member values as a vector. */
    const std::vector<int64_t>& X86RepeatPrefix();
}}}

namespace Rose {
    std::string stringifyBinaryAnalysisX86RepeatPrefix(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisX86RepeatPrefix();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsX86.h line 127
namespace stringify { namespace Rose { namespace BinaryAnalysis {
    /** Convert Rose::BinaryAnalysis::X86Exception enum constant to a string. */
    const char* X86Exception(int64_t);

    /** Convert Rose::BinaryAnalysis::X86Exception enum constant to a string. */
    std::string X86Exception(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::X86Exception member values as a vector. */
    const std::vector<int64_t>& X86Exception();
}}}

namespace Rose {
    std::string stringifyBinaryAnalysisX86Exception(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisX86Exception();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsMips.h line 12
namespace stringify { namespace Rose { namespace BinaryAnalysis {
    /** Convert Rose::BinaryAnalysis::MipsRegisterClass enum constant to a string. */
    const char* MipsRegisterClass(int64_t);

    /** Convert Rose::BinaryAnalysis::MipsRegisterClass enum constant to a string. */
    std::string MipsRegisterClass(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::MipsRegisterClass member values as a vector. */
    const std::vector<int64_t>& MipsRegisterClass();
}}}

namespace Rose {
    std::string stringifyBinaryAnalysisMipsRegisterClass(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisMipsRegisterClass();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsMips.h line 25
namespace stringify { namespace Rose { namespace BinaryAnalysis {
    /** Convert Rose::BinaryAnalysis::MipsFcsrMinors enum constant to a string. */
    const char* MipsFcsrMinors(int64_t);

    /** Convert Rose::BinaryAnalysis::MipsFcsrMinors enum constant to a string. */
    std::string MipsFcsrMinors(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::MipsFcsrMinors member values as a vector. */
    const std::vector<int64_t>& MipsFcsrMinors();
}}}

namespace Rose {
    std::string stringifyBinaryAnalysisMipsFcsrMinors(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisMipsFcsrMinors();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsMips.h line 33
namespace stringify { namespace Rose { namespace BinaryAnalysis {
    /** Convert Rose::BinaryAnalysis::MipsSpecialPurposeRegister enum constant to a string. */
    const char* MipsSpecialPurposeRegister(int64_t);

    /** Convert Rose::BinaryAnalysis::MipsSpecialPurposeRegister enum constant to a string. */
    std::string MipsSpecialPurposeRegister(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::MipsSpecialPurposeRegister member values as a vector. */
    const std::vector<int64_t>& MipsSpecialPurposeRegister();
}}}

namespace Rose {
    std::string stringifyBinaryAnalysisMipsSpecialPurposeRegister(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisMipsSpecialPurposeRegister();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/InstructionEnumsMips.h line 42
namespace stringify { namespace Rose { namespace BinaryAnalysis {
    /** Convert Rose::BinaryAnalysis::MipsInstructionKind enum constant to a string. */
    const char* MipsInstructionKind(int64_t);

    /** Convert Rose::BinaryAnalysis::MipsInstructionKind enum constant to a string. */
    std::string MipsInstructionKind(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::MipsInstructionKind member values as a vector. */
    const std::vector<int64_t>& MipsInstructionKind();
}}}

namespace Rose {
    std::string stringifyBinaryAnalysisMipsInstructionKind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisMipsInstructionKind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/BinaryInstructionCache.h line 47
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace ManagedInstruction {
    /** Convert Rose::BinaryAnalysis::ManagedInstruction::State enum constant to a string. */
    const char* State(int64_t);

    /** Convert Rose::BinaryAnalysis::ManagedInstruction::State enum constant to a string. */
    std::string State(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::ManagedInstruction::State member values as a vector. */
    const std::vector<int64_t>& State();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisManagedInstructionState(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisManagedInstructionState();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Disassemblers/Registers.h line 294
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace RegisterDictionary { namespace SortBySize {
    /** Convert Rose::BinaryAnalysis::RegisterDictionary::SortBySize::Direction enum constant to a string. */
    const char* Direction(int64_t);

    /** Convert Rose::BinaryAnalysis::RegisterDictionary::SortBySize::Direction enum constant to a string. */
    std::string Direction(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::RegisterDictionary::SortBySize::Direction member values as a vector. */
    const std::vector<int64_t>& Direction();
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisRegisterDictionarySortBySizeDirection(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisRegisterDictionarySortBySizeDirection();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/dot_asis/dot_asis_library/include/a_nodes.h line 47
namespace stringify {
    /** Convert Element_Kinds enum constant to a string. */
    const char* Element_Kinds(int64_t);

    /** Convert Element_Kinds enum constant to a string. */
    std::string Element_Kinds(int64_t, const std::string &strip);

    /** Return all Element_Kinds member values as a vector. */
    const std::vector<int64_t>& Element_Kinds();
}

namespace Rose {
    std::string stringifyElement_Kinds(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyElement_Kinds();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/dot_asis/dot_asis_library/include/a_nodes.h line 142
namespace stringify {
    /** Convert Operator_Kinds enum constant to a string. */
    const char* Operator_Kinds(int64_t);

    /** Convert Operator_Kinds enum constant to a string. */
    std::string Operator_Kinds(int64_t, const std::string &strip);

    /** Return all Operator_Kinds member values as a vector. */
    const std::vector<int64_t>& Operator_Kinds();
}

namespace Rose {
    std::string stringifyOperator_Kinds(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOperator_Kinds();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/dot_asis/dot_asis_library/include/a_nodes.h line 172
namespace stringify {
    /** Convert Pragma_Kinds enum constant to a string. */
    const char* Pragma_Kinds(int64_t);

    /** Convert Pragma_Kinds enum constant to a string. */
    std::string Pragma_Kinds(int64_t, const std::string &strip);

    /** Return all Pragma_Kinds member values as a vector. */
    const std::vector<int64_t>& Pragma_Kinds();
}

namespace Rose {
    std::string stringifyPragma_Kinds(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyPragma_Kinds();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/dot_asis/dot_asis_library/include/a_nodes.h line 247
namespace stringify {
    /** Convert Defining_Name_Kinds enum constant to a string. */
    const char* Defining_Name_Kinds(int64_t);

    /** Convert Defining_Name_Kinds enum constant to a string. */
    std::string Defining_Name_Kinds(int64_t, const std::string &strip);

    /** Return all Defining_Name_Kinds member values as a vector. */
    const std::vector<int64_t>& Defining_Name_Kinds();
}

namespace Rose {
    std::string stringifyDefining_Name_Kinds(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyDefining_Name_Kinds();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/dot_asis/dot_asis_library/include/a_nodes.h line 288
namespace stringify {
    /** Convert Declaration_Kinds enum constant to a string. */
    const char* Declaration_Kinds(int64_t);

    /** Convert Declaration_Kinds enum constant to a string. */
    std::string Declaration_Kinds(int64_t, const std::string &strip);

    /** Return all Declaration_Kinds member values as a vector. */
    const std::vector<int64_t>& Declaration_Kinds();
}

namespace Rose {
    std::string stringifyDeclaration_Kinds(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyDeclaration_Kinds();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/dot_asis/dot_asis_library/include/a_nodes.h line 392
namespace stringify {
    /** Convert Declaration_Origins enum constant to a string. */
    const char* Declaration_Origins(int64_t);

    /** Convert Declaration_Origins enum constant to a string. */
    std::string Declaration_Origins(int64_t, const std::string &strip);

    /** Return all Declaration_Origins member values as a vector. */
    const std::vector<int64_t>& Declaration_Origins();
}

namespace Rose {
    std::string stringifyDeclaration_Origins(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyDeclaration_Origins();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/dot_asis/dot_asis_library/include/a_nodes.h line 408
namespace stringify {
    /** Convert Mode_Kinds enum constant to a string. */
    const char* Mode_Kinds(int64_t);

    /** Convert Mode_Kinds enum constant to a string. */
    std::string Mode_Kinds(int64_t, const std::string &strip);

    /** Return all Mode_Kinds member values as a vector. */
    const std::vector<int64_t>& Mode_Kinds();
}

namespace Rose {
    std::string stringifyMode_Kinds(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyMode_Kinds();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/dot_asis/dot_asis_library/include/a_nodes.h line 418
namespace stringify {
    /** Convert Subprogram_Default_Kinds enum constant to a string. */
    const char* Subprogram_Default_Kinds(int64_t);

    /** Convert Subprogram_Default_Kinds enum constant to a string. */
    std::string Subprogram_Default_Kinds(int64_t, const std::string &strip);

    /** Return all Subprogram_Default_Kinds member values as a vector. */
    const std::vector<int64_t>& Subprogram_Default_Kinds();
}

namespace Rose {
    std::string stringifySubprogram_Default_Kinds(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySubprogram_Default_Kinds();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/dot_asis/dot_asis_library/include/a_nodes.h line 806
namespace stringify {
    /** Convert Definition_Kinds enum constant to a string. */
    const char* Definition_Kinds(int64_t);

    /** Convert Definition_Kinds enum constant to a string. */
    std::string Definition_Kinds(int64_t, const std::string &strip);

    /** Return all Definition_Kinds member values as a vector. */
    const std::vector<int64_t>& Definition_Kinds();
}

namespace Rose {
    std::string stringifyDefinition_Kinds(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyDefinition_Kinds();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/dot_asis/dot_asis_library/include/a_nodes.h line 839
namespace stringify {
    /** Convert _Type_Kinds enum constant to a string. */
    const char* _Type_Kinds(int64_t);

    /** Convert _Type_Kinds enum constant to a string. */
    std::string _Type_Kinds(int64_t, const std::string &strip);

    /** Return all _Type_Kinds member values as a vector. */
    const std::vector<int64_t>& _Type_Kinds();
}

namespace Rose {
    std::string stringify_Type_Kinds(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_Type_Kinds();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/dot_asis/dot_asis_library/include/a_nodes.h line 863
namespace stringify {
    /** Convert _Constraint_Kinds enum constant to a string. */
    const char* _Constraint_Kinds(int64_t);

    /** Convert _Constraint_Kinds enum constant to a string. */
    std::string _Constraint_Kinds(int64_t, const std::string &strip);

    /** Return all _Constraint_Kinds member values as a vector. */
    const std::vector<int64_t>& _Constraint_Kinds();
}

namespace Rose {
    std::string stringify_Constraint_Kinds(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_Constraint_Kinds();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/dot_asis/dot_asis_library/include/a_nodes.h line 873
namespace stringify {
    /** Convert _Interface_Kinds enum constant to a string. */
    const char* _Interface_Kinds(int64_t);

    /** Convert _Interface_Kinds enum constant to a string. */
    std::string _Interface_Kinds(int64_t, const std::string &strip);

    /** Return all _Interface_Kinds member values as a vector. */
    const std::vector<int64_t>& _Interface_Kinds();
}

namespace Rose {
    std::string stringify_Interface_Kinds(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_Interface_Kinds();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/dot_asis/dot_asis_library/include/a_nodes.h line 882
namespace stringify {
    /** Convert _Root_Type_Kinds enum constant to a string. */
    const char* _Root_Type_Kinds(int64_t);

    /** Convert _Root_Type_Kinds enum constant to a string. */
    std::string _Root_Type_Kinds(int64_t, const std::string &strip);

    /** Return all _Root_Type_Kinds member values as a vector. */
    const std::vector<int64_t>& _Root_Type_Kinds();
}

namespace Rose {
    std::string stringify_Root_Type_Kinds(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_Root_Type_Kinds();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/dot_asis/dot_asis_library/include/a_nodes.h line 891
namespace stringify {
    /** Convert _Discrete_Range_Kinds enum constant to a string. */
    const char* _Discrete_Range_Kinds(int64_t);

    /** Convert _Discrete_Range_Kinds enum constant to a string. */
    std::string _Discrete_Range_Kinds(int64_t, const std::string &strip);

    /** Return all _Discrete_Range_Kinds member values as a vector. */
    const std::vector<int64_t>& _Discrete_Range_Kinds();
}

namespace Rose {
    std::string stringify_Discrete_Range_Kinds(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_Discrete_Range_Kinds();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/dot_asis/dot_asis_library/include/a_nodes.h line 898
namespace stringify {
    /** Convert _Formal_Type_Kinds enum constant to a string. */
    const char* _Formal_Type_Kinds(int64_t);

    /** Convert _Formal_Type_Kinds enum constant to a string. */
    std::string _Formal_Type_Kinds(int64_t, const std::string &strip);

    /** Return all _Formal_Type_Kinds member values as a vector. */
    const std::vector<int64_t>& _Formal_Type_Kinds();
}

namespace Rose {
    std::string stringify_Formal_Type_Kinds(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_Formal_Type_Kinds();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/dot_asis/dot_asis_library/include/a_nodes.h line 920
namespace stringify {
    /** Convert _Access_Type_Kinds enum constant to a string. */
    const char* _Access_Type_Kinds(int64_t);

    /** Convert _Access_Type_Kinds enum constant to a string. */
    std::string _Access_Type_Kinds(int64_t, const std::string &strip);

    /** Return all _Access_Type_Kinds member values as a vector. */
    const std::vector<int64_t>& _Access_Type_Kinds();
}

namespace Rose {
    std::string stringify_Access_Type_Kinds(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_Access_Type_Kinds();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/dot_asis/dot_asis_library/include/a_nodes.h line 931
namespace stringify {
    /** Convert _Access_Definition_Kinds enum constant to a string. */
    const char* _Access_Definition_Kinds(int64_t);

    /** Convert _Access_Definition_Kinds enum constant to a string. */
    std::string _Access_Definition_Kinds(int64_t, const std::string &strip);

    /** Return all _Access_Definition_Kinds member values as a vector. */
    const std::vector<int64_t>& _Access_Definition_Kinds();
}

namespace Rose {
    std::string stringify_Access_Definition_Kinds(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_Access_Definition_Kinds();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/dot_asis/dot_asis_library/include/a_nodes.h line 1247
namespace stringify {
    /** Convert Expression_Kinds enum constant to a string. */
    const char* Expression_Kinds(int64_t);

    /** Convert Expression_Kinds enum constant to a string. */
    std::string Expression_Kinds(int64_t, const std::string &strip);

    /** Return all Expression_Kinds member values as a vector. */
    const std::vector<int64_t>& Expression_Kinds();
}

namespace Rose {
    std::string stringifyExpression_Kinds(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyExpression_Kinds();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/dot_asis/dot_asis_library/include/a_nodes.h line 1292
namespace stringify {
    /** Convert Attribute_Kinds enum constant to a string. */
    const char* Attribute_Kinds(int64_t);

    /** Convert Attribute_Kinds enum constant to a string. */
    std::string Attribute_Kinds(int64_t, const std::string &strip);

    /** Return all Attribute_Kinds member values as a vector. */
    const std::vector<int64_t>& Attribute_Kinds();
}

namespace Rose {
    std::string stringifyAttribute_Kinds(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyAttribute_Kinds();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/dot_asis/dot_asis_library/include/a_nodes.h line 1518
namespace stringify {
    /** Convert Association_Kinds enum constant to a string. */
    const char* Association_Kinds(int64_t);

    /** Convert Association_Kinds enum constant to a string. */
    std::string Association_Kinds(int64_t, const std::string &strip);

    /** Return all Association_Kinds member values as a vector. */
    const std::vector<int64_t>& Association_Kinds();
}

namespace Rose {
    std::string stringifyAssociation_Kinds(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyAssociation_Kinds();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/dot_asis/dot_asis_library/include/a_nodes.h line 1567
namespace stringify {
    /** Convert Statement_Kinds enum constant to a string. */
    const char* Statement_Kinds(int64_t);

    /** Convert Statement_Kinds enum constant to a string. */
    std::string Statement_Kinds(int64_t, const std::string &strip);

    /** Return all Statement_Kinds member values as a vector. */
    const std::vector<int64_t>& Statement_Kinds();
}

namespace Rose {
    std::string stringifyStatement_Kinds(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyStatement_Kinds();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/dot_asis/dot_asis_library/include/a_nodes.h line 1715
namespace stringify {
    /** Convert Path_Kinds enum constant to a string. */
    const char* Path_Kinds(int64_t);

    /** Convert Path_Kinds enum constant to a string. */
    std::string Path_Kinds(int64_t, const std::string &strip);

    /** Return all Path_Kinds member values as a vector. */
    const std::vector<int64_t>& Path_Kinds();
}

namespace Rose {
    std::string stringifyPath_Kinds(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyPath_Kinds();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/dot_asis/dot_asis_library/include/a_nodes.h line 1795
namespace stringify {
    /** Convert Clause_Kinds enum constant to a string. */
    const char* Clause_Kinds(int64_t);

    /** Convert Clause_Kinds enum constant to a string. */
    std::string Clause_Kinds(int64_t, const std::string &strip);

    /** Return all Clause_Kinds member values as a vector. */
    const std::vector<int64_t>& Clause_Kinds();
}

namespace Rose {
    std::string stringifyClause_Kinds(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyClause_Kinds();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/dot_asis/dot_asis_library/include/a_nodes.h line 1807
namespace stringify {
    /** Convert _Representation_Clause_Kinds enum constant to a string. */
    const char* _Representation_Clause_Kinds(int64_t);

    /** Convert _Representation_Clause_Kinds enum constant to a string. */
    std::string _Representation_Clause_Kinds(int64_t, const std::string &strip);

    /** Return all _Representation_Clause_Kinds member values as a vector. */
    const std::vector<int64_t>& _Representation_Clause_Kinds();
}

namespace Rose {
    std::string stringify_Representation_Clause_Kinds(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_Representation_Clause_Kinds();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/dot_asis/dot_asis_library/include/a_nodes.h line 1896
namespace stringify {
    /** Convert Enclosing_Kinds enum constant to a string. */
    const char* Enclosing_Kinds(int64_t);

    /** Convert Enclosing_Kinds enum constant to a string. */
    std::string Enclosing_Kinds(int64_t, const std::string &strip);

    /** Return all Enclosing_Kinds member values as a vector. */
    const std::vector<int64_t>& Enclosing_Kinds();
}

namespace Rose {
    std::string stringifyEnclosing_Kinds(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyEnclosing_Kinds();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/dot_asis/dot_asis_library/include/a_nodes.h line 1948
namespace stringify {
    /** Convert Unit_Kinds enum constant to a string. */
    const char* Unit_Kinds(int64_t);

    /** Convert Unit_Kinds enum constant to a string. */
    std::string Unit_Kinds(int64_t, const std::string &strip);

    /** Return all Unit_Kinds member values as a vector. */
    const std::vector<int64_t>& Unit_Kinds();
}

namespace Rose {
    std::string stringifyUnit_Kinds(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyUnit_Kinds();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/dot_asis/dot_asis_library/include/a_nodes.h line 2015
namespace stringify {
    /** Convert Unit_Classes enum constant to a string. */
    const char* Unit_Classes(int64_t);

    /** Convert Unit_Classes enum constant to a string. */
    std::string Unit_Classes(int64_t, const std::string &strip);

    /** Return all Unit_Classes member values as a vector. */
    const std::vector<int64_t>& Unit_Classes();
}

namespace Rose {
    std::string stringifyUnit_Classes(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyUnit_Classes();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/dot_asis/dot_asis_library/include/a_nodes.h line 2036
namespace stringify {
    /** Convert Unit_Origins enum constant to a string. */
    const char* Unit_Origins(int64_t);

    /** Convert Unit_Origins enum constant to a string. */
    std::string Unit_Origins(int64_t, const std::string &strip);

    /** Return all Unit_Origins member values as a vector. */
    const std::vector<int64_t>& Unit_Origins();
}

namespace Rose {
    std::string stringifyUnit_Origins(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyUnit_Origins();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Ada_ROSE_Connection/Ada_to_ROSE_translation.h line 26
namespace stringify { namespace Ada_ROSE_Translation {
    /** Convert Ada_ROSE_Translation::ExpressionKind enum constant to a string. */
    const char* ExpressionKind(int64_t);

    /** Convert Ada_ROSE_Translation::ExpressionKind enum constant to a string. */
    std::string ExpressionKind(int64_t, const std::string &strip);

    /** Return all Ada_ROSE_Translation::ExpressionKind member values as a vector. */
    const std::vector<int64_t>& ExpressionKind();
}}

namespace Rose {
    std::string stringifyAda_ROSE_TranslationExpressionKind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyAda_ROSE_TranslationExpressionKind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/BinaryFormats/MemoryMap.h line 129
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace MemoryMap { namespace Attach {
    /** Convert Rose::BinaryAnalysis::MemoryMap::Attach::Boolean enum constant to a string. */
    const char* Boolean(int64_t);

    /** Convert Rose::BinaryAnalysis::MemoryMap::Attach::Boolean enum constant to a string. */
    std::string Boolean(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::MemoryMap::Attach::Boolean member values as a vector. */
    const std::vector<int64_t>& Boolean();
}}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisMemoryMapAttachBoolean(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisMemoryMapAttachBoolean();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/BinaryFormats/MemoryMap.h line 285
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace MemoryMap {
    /** Convert Rose::BinaryAnalysis::MemoryMap::InsertFileMapMode enum constant to a string. */
    const char* InsertFileMapMode(int64_t);

    /** Convert Rose::BinaryAnalysis::MemoryMap::InsertFileMapMode enum constant to a string. */
    std::string InsertFileMapMode(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::MemoryMap::InsertFileMapMode member values as a vector. */
    const std::vector<int64_t>& InsertFileMapMode();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisMemoryMapInsertFileMapMode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisMemoryMapInsertFileMapMode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/BinaryFormats/ByteOrder.h line 10
namespace stringify { namespace ByteOrder {
    /** Convert ByteOrder::Endianness enum constant to a string. */
    const char* Endianness(int64_t);

    /** Convert ByteOrder::Endianness enum constant to a string. */
    std::string Endianness(int64_t, const std::string &strip);

    /** Return all ByteOrder::Endianness member values as a vector. */
    const std::vector<int64_t>& Endianness();
}}

namespace Rose {
    std::string stringifyByteOrderEndianness(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyByteOrderEndianness();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/BinaryFormats/SRecord.h line 31
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace SRecord {
    /** Convert Rose::BinaryAnalysis::SRecord::Syntax enum constant to a string. */
    const char* Syntax(int64_t);

    /** Convert Rose::BinaryAnalysis::SRecord::Syntax enum constant to a string. */
    std::string Syntax(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::SRecord::Syntax member values as a vector. */
    const std::vector<int64_t>& Syntax();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisSRecordSyntax(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisSRecordSyntax();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/BinaryFormats/SRecord.h line 38
namespace stringify { namespace Rose { namespace BinaryAnalysis { namespace SRecord {
    /** Convert Rose::BinaryAnalysis::SRecord::Type enum constant to a string. */
    const char* Type(int64_t);

    /** Convert Rose::BinaryAnalysis::SRecord::Type enum constant to a string. */
    std::string Type(int64_t, const std::string &strip);

    /** Return all Rose::BinaryAnalysis::SRecord::Type member values as a vector. */
    const std::vector<int64_t>& Type();
}}}}

namespace Rose {
    std::string stringifyBinaryAnalysisSRecordType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBinaryAnalysisSRecordType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/rose_attributes_list.h line 133
namespace stringify { namespace PreprocessingInfo {
    /** Convert PreprocessingInfo::RelativePositionType enum constant to a string. */
    const char* RelativePositionType(int64_t);

    /** Convert PreprocessingInfo::RelativePositionType enum constant to a string. */
    std::string RelativePositionType(int64_t, const std::string &strip);

    /** Return all PreprocessingInfo::RelativePositionType member values as a vector. */
    const std::vector<int64_t>& RelativePositionType();
}}

namespace Rose {
    std::string stringifyPreprocessingInfoRelativePositionType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyPreprocessingInfoRelativePositionType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/rose_attributes_list.h line 154
namespace stringify { namespace PreprocessingInfo {
    /** Convert PreprocessingInfo::DirectiveType enum constant to a string. */
    const char* DirectiveType(int64_t);

    /** Convert PreprocessingInfo::DirectiveType enum constant to a string. */
    std::string DirectiveType(int64_t, const std::string &strip);

    /** Return all PreprocessingInfo::DirectiveType member values as a vector. */
    const std::vector<int64_t>& DirectiveType();
}}

namespace Rose {
    std::string stringifyPreprocessingInfoDirectiveType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyPreprocessingInfoDirectiveType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/rose_attributes_list.h line 522
namespace stringify { namespace ROSEAttributesList {
    /** Convert ROSEAttributesList::languageTypeEnum enum constant to a string. */
    const char* languageTypeEnum(int64_t);

    /** Convert ROSEAttributesList::languageTypeEnum enum constant to a string. */
    std::string languageTypeEnum(int64_t, const std::string &strip);

    /** Return all ROSEAttributesList::languageTypeEnum member values as a vector. */
    const std::vector<int64_t>& languageTypeEnum();
}}

namespace Rose {
    std::string stringifyROSEAttributesList_languageTypeEnum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyROSEAttributesList_languageTypeEnum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/general_token_defs.h line 12
namespace stringify { namespace ROSE_token_ids {
    /** Convert ROSE_token_ids::whitespace enum constant to a string. */
    const char* whitespace(int64_t);

    /** Convert ROSE_token_ids::whitespace enum constant to a string. */
    std::string whitespace(int64_t, const std::string &strip);

    /** Return all ROSE_token_ids::whitespace member values as a vector. */
    const std::vector<int64_t>& whitespace();
}}

namespace Rose {
    std::string stringifyROSE_token_ids_whitespace(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyROSE_token_ids_whitespace();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/general_token_defs.h line 21
namespace stringify { namespace ROSE_token_ids {
    /** Convert ROSE_token_ids::ROSE_C_CXX_keywords enum constant to a string. */
    const char* ROSE_C_CXX_keywords(int64_t);

    /** Convert ROSE_token_ids::ROSE_C_CXX_keywords enum constant to a string. */
    std::string ROSE_C_CXX_keywords(int64_t, const std::string &strip);

    /** Return all ROSE_token_ids::ROSE_C_CXX_keywords member values as a vector. */
    const std::vector<int64_t>& ROSE_C_CXX_keywords();
}}

namespace Rose {
    std::string stringifyROSE_token_idsROSE_C_CXX_keywords(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyROSE_token_idsROSE_C_CXX_keywords();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/general_token_defs.h line 159
namespace stringify { namespace ROSE_token_ids {
    /** Convert ROSE_token_ids::ROSE_C_CXX_alternate_tok enum constant to a string. */
    const char* ROSE_C_CXX_alternate_tok(int64_t);

    /** Convert ROSE_token_ids::ROSE_C_CXX_alternate_tok enum constant to a string. */
    std::string ROSE_C_CXX_alternate_tok(int64_t, const std::string &strip);

    /** Return all ROSE_token_ids::ROSE_C_CXX_alternate_tok member values as a vector. */
    const std::vector<int64_t>& ROSE_C_CXX_alternate_tok();
}}

namespace Rose {
    std::string stringifyROSE_token_idsROSE_C_CXX_alternate_tok(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyROSE_token_idsROSE_C_CXX_alternate_tok();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/general_token_defs.h line 171
namespace stringify { namespace ROSE_token_ids {
    /** Convert ROSE_token_ids::ROSE_C_CXX_Additional_Info enum constant to a string. */
    const char* ROSE_C_CXX_Additional_Info(int64_t);

    /** Convert ROSE_token_ids::ROSE_C_CXX_Additional_Info enum constant to a string. */
    std::string ROSE_C_CXX_Additional_Info(int64_t, const std::string &strip);

    /** Return all ROSE_token_ids::ROSE_C_CXX_Additional_Info member values as a vector. */
    const std::vector<int64_t>& ROSE_C_CXX_Additional_Info();
}}

namespace Rose {
    std::string stringifyROSE_token_idsROSE_C_CXX_Additional_Info(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyROSE_token_idsROSE_C_CXX_Additional_Info();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/OmpAttribute.h line 31
namespace stringify { namespace OmpSupport {
    /** Convert OmpSupport::omp_construct_enum enum constant to a string. */
    const char* omp_construct_enum(int64_t);

    /** Convert OmpSupport::omp_construct_enum enum constant to a string. */
    std::string omp_construct_enum(int64_t, const std::string &strip);

    /** Return all OmpSupport::omp_construct_enum member values as a vector. */
    const std::vector<int64_t>& omp_construct_enum();
}}

namespace Rose {
    std::string stringifyOmpSupport_omp_construct_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyOmpSupport_omp_construct_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/sageInterface/sageBuilder.h line 138
namespace stringify { namespace SageBuilder {
    /** Convert SageBuilder::SourcePositionClassification enum constant to a string. */
    const char* SourcePositionClassification(int64_t);

    /** Convert SageBuilder::SourcePositionClassification enum constant to a string. */
    std::string SourcePositionClassification(int64_t, const std::string &strip);

    /** Return all SageBuilder::SourcePositionClassification member values as a vector. */
    const std::vector<int64_t>& SourcePositionClassification();
}}

namespace Rose {
    std::string stringifySageBuilderSourcePositionClassification(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySageBuilderSourcePositionClassification();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/omp.h line 30
namespace stringify {
    /** Convert omp_lock_hint_t enum constant to a string. */
    const char* omp_lock_hint_t(int64_t);

    /** Convert omp_lock_hint_t enum constant to a string. */
    std::string omp_lock_hint_t(int64_t, const std::string &strip);

    /** Return all omp_lock_hint_t member values as a vector. */
    const std::vector<int64_t>& omp_lock_hint_t();
}

namespace Rose {
    std::string stringify_omp_lock_hint_t(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_omp_lock_hint_t();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/omp.h line 46
namespace stringify {
    /** Convert omp_sched_t enum constant to a string. */
    const char* omp_sched_t(int64_t);

    /** Convert omp_sched_t enum constant to a string. */
    std::string omp_sched_t(int64_t, const std::string &strip);

    /** Return all omp_sched_t member values as a vector. */
    const std::vector<int64_t>& omp_sched_t();
}

namespace Rose {
    std::string stringify_omp_sched_t(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_omp_sched_t();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/omp.h line 57
namespace stringify {
    /** Convert omp_proc_bind_t enum constant to a string. */
    const char* omp_proc_bind_t(int64_t);

    /** Convert omp_proc_bind_t enum constant to a string. */
    std::string omp_proc_bind_t(int64_t, const std::string &strip);

    /** Return all omp_proc_bind_t member values as a vector. */
    const std::vector<int64_t>& omp_proc_bind_t();
}

namespace Rose {
    std::string stringify_omp_proc_bind_t(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_omp_proc_bind_t();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/virtualCFG/virtualBinCFG.h line 17
namespace stringify { namespace VirtualBinCFG {
    /** Convert VirtualBinCFG::EdgeConditionKind enum constant to a string. */
    const char* EdgeConditionKind(int64_t);

    /** Convert VirtualBinCFG::EdgeConditionKind enum constant to a string. */
    std::string EdgeConditionKind(int64_t, const std::string &strip);

    /** Return all VirtualBinCFG::EdgeConditionKind member values as a vector. */
    const std::vector<int64_t>& EdgeConditionKind();
}}

namespace Rose {
    std::string stringifyVirtualBinCFG_EdgeConditionKind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyVirtualBinCFG_EdgeConditionKind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/virtualCFG/virtualCFG.h line 47
namespace stringify { namespace VirtualCFG {
    /** Convert VirtualCFG::EdgeConditionKind enum constant to a string. */
    const char* EdgeConditionKind(int64_t);

    /** Convert VirtualCFG::EdgeConditionKind enum constant to a string. */
    std::string EdgeConditionKind(int64_t, const std::string &strip);

    /** Return all VirtualCFG::EdgeConditionKind member values as a vector. */
    const std::vector<int64_t>& EdgeConditionKind();
}}

namespace Rose {
    std::string stringifyVirtualCFG_EdgeConditionKind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyVirtualCFG_EdgeConditionKind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/astVisualization/astGraph.h line 12
namespace stringify { namespace AST_Graph {
    /** Convert AST_Graph::pointerHandling enum constant to a string. */
    const char* pointerHandling(int64_t);

    /** Convert AST_Graph::pointerHandling enum constant to a string. */
    std::string pointerHandling(int64_t, const std::string &strip);

    /** Return all AST_Graph::pointerHandling member values as a vector. */
    const std::vector<int64_t>& pointerHandling();
}}

namespace Rose {
    std::string stringifyAST_Graph_pointerHandling(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyAST_Graph_pointerHandling();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/astVisualization/astGraph.h line 19
namespace stringify { namespace AST_Graph {
    /** Convert AST_Graph::traversalType enum constant to a string. */
    const char* traversalType(int64_t);

    /** Convert AST_Graph::traversalType enum constant to a string. */
    std::string traversalType(int64_t, const std::string &strip);

    /** Return all AST_Graph::traversalType member values as a vector. */
    const std::vector<int64_t>& traversalType();
}}

namespace Rose {
    std::string stringifyAST_Graph_traversalType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyAST_Graph_traversalType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/astVisualization/AstAttributeDOT.h line 25
namespace stringify { namespace AstAttributeDOT {
    /** Convert AstAttributeDOT::DOTStyles enum constant to a string. */
    const char* DOTStyles(int64_t);

    /** Convert AstAttributeDOT::DOTStyles enum constant to a string. */
    std::string DOTStyles(int64_t, const std::string &strip);

    /** Return all AstAttributeDOT::DOTStyles member values as a vector. */
    const std::vector<int64_t>& DOTStyles();
}}

namespace Rose {
    std::string stringifyAstAttributeDOT_DOTStyles(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyAstAttributeDOT_DOTStyles();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/astVisualization/AstAttributeDOT.h line 90
namespace stringify { namespace DOTGraphNode {
    /** Convert DOTGraphNode::DOTShapeTypes enum constant to a string. */
    const char* DOTShapeTypes(int64_t);

    /** Convert DOTGraphNode::DOTShapeTypes enum constant to a string. */
    std::string DOTShapeTypes(int64_t, const std::string &strip);

    /** Return all DOTGraphNode::DOTShapeTypes member values as a vector. */
    const std::vector<int64_t>& DOTShapeTypes();
}}

namespace Rose {
    std::string stringifyDOTGraphNodeDOTShapeTypes(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyDOTGraphNodeDOTShapeTypes();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/SageIII/astVisualization/AstAttributeDOT.h line 137
namespace stringify { namespace DOTGraphEdge {
    /** Convert DOTGraphEdge::DOTArrowTypes enum constant to a string. */
    const char* DOTArrowTypes(int64_t);

    /** Convert DOTGraphEdge::DOTArrowTypes enum constant to a string. */
    std::string DOTArrowTypes(int64_t, const std::string &strip);

    /** Return all DOTGraphEdge::DOTArrowTypes member values as a vector. */
    const std::vector<int64_t>& DOTArrowTypes();
}}

namespace Rose {
    std::string stringifyDOTGraphEdgeDOTArrowTypes(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyDOTGraphEdgeDOTArrowTypes();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Cobol_ROSE_Connection/Cobol_to_ROSE_translation.h line 8
namespace stringify { namespace Cobol_ROSE_Translation {
    /** Convert Cobol_ROSE_Translation::ProgramSpec enum constant to a string. */
    const char* ProgramSpec(int64_t);

    /** Convert Cobol_ROSE_Translation::ProgramSpec enum constant to a string. */
    std::string ProgramSpec(int64_t, const std::string &strip);

    /** Return all Cobol_ROSE_Translation::ProgramSpec member values as a vector. */
    const std::vector<int64_t>& ProgramSpec();
}}

namespace Rose {
    std::string stringifyCobol_ROSE_TranslationProgramSpec(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyCobol_ROSE_TranslationProgramSpec();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/frontend/Experimental_Cobol_ROSE_Connection/Cobol_to_ROSE_translation.h line 21
namespace stringify { namespace Cobol_ROSE_Translation {
    /** Convert Cobol_ROSE_Translation::ExpressionKind enum constant to a string. */
    const char* ExpressionKind(int64_t);

    /** Convert Cobol_ROSE_Translation::ExpressionKind enum constant to a string. */
    std::string ExpressionKind(int64_t, const std::string &strip);

    /** Return all Cobol_ROSE_Translation::ExpressionKind member values as a vector. */
    const std::vector<int64_t>& ExpressionKind();
}}

namespace Rose {
    std::string stringifyCobol_ROSE_TranslationExpressionKind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyCobol_ROSE_TranslationExpressionKind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/CommandLine.h line 170
namespace stringify { namespace Sawyer { namespace CommandLine {
    /** Convert Sawyer::CommandLine::SortOrder enum constant to a string. */
    const char* SortOrder(int64_t);

    /** Convert Sawyer::CommandLine::SortOrder enum constant to a string. */
    std::string SortOrder(int64_t, const std::string &strip);

    /** Return all Sawyer::CommandLine::SortOrder member values as a vector. */
    const std::vector<int64_t>& SortOrder();
}}}

namespace Rose {
    std::string stringifySawyerCommandLineSortOrder(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerCommandLineSortOrder();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/CommandLine.h line 183
namespace stringify { namespace Sawyer { namespace CommandLine {
    /** Convert Sawyer::CommandLine::Canonical enum constant to a string. */
    const char* Canonical(int64_t);

    /** Convert Sawyer::CommandLine::Canonical enum constant to a string. */
    std::string Canonical(int64_t, const std::string &strip);

    /** Return all Sawyer::CommandLine::Canonical member values as a vector. */
    const std::vector<int64_t>& Canonical();
}}}

namespace Rose {
    std::string stringifySawyerCommandLineCanonical(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerCommandLineCanonical();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/CommandLine.h line 191
namespace stringify { namespace Sawyer { namespace CommandLine {
    /** Convert Sawyer::CommandLine::ShowGroupName enum constant to a string. */
    const char* ShowGroupName(int64_t);

    /** Convert Sawyer::CommandLine::ShowGroupName enum constant to a string. */
    std::string ShowGroupName(int64_t, const std::string &strip);

    /** Return all Sawyer::CommandLine::ShowGroupName member values as a vector. */
    const std::vector<int64_t>& ShowGroupName();
}}}

namespace Rose {
    std::string stringifySawyerCommandLineShowGroupName(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerCommandLineShowGroupName();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/CommandLine.h line 199
namespace stringify { namespace Sawyer { namespace CommandLine {
    /** Convert Sawyer::CommandLine::SwitchSkipping enum constant to a string. */
    const char* SwitchSkipping(int64_t);

    /** Convert Sawyer::CommandLine::SwitchSkipping enum constant to a string. */
    std::string SwitchSkipping(int64_t, const std::string &strip);

    /** Return all Sawyer::CommandLine::SwitchSkipping member values as a vector. */
    const std::vector<int64_t>& SwitchSkipping();
}}}

namespace Rose {
    std::string stringifySawyerCommandLineSwitchSkipping(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerCommandLineSwitchSkipping();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/CommandLine.h line 1970
namespace stringify { namespace Sawyer { namespace CommandLine {
    /** Convert Sawyer::CommandLine::WhichValue enum constant to a string. */
    const char* WhichValue(int64_t);

    /** Convert Sawyer::CommandLine::WhichValue enum constant to a string. */
    std::string WhichValue(int64_t, const std::string &strip);

    /** Return all Sawyer::CommandLine::WhichValue member values as a vector. */
    const std::vector<int64_t>& WhichValue();
}}}

namespace Rose {
    std::string stringifySawyerCommandLineWhichValue(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerCommandLineWhichValue();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/CommandLine.h line 3003
namespace stringify { namespace Sawyer { namespace CommandLine { namespace Parser {
    /** Convert Sawyer::CommandLine::Parser::GroupingFlags enum constant to a string. */
    const char* GroupingFlags(int64_t);

    /** Convert Sawyer::CommandLine::Parser::GroupingFlags enum constant to a string. */
    std::string GroupingFlags(int64_t, const std::string &strip);

    /** Return all Sawyer::CommandLine::Parser::GroupingFlags member values as a vector. */
    const std::vector<int64_t>& GroupingFlags();
}}}}

namespace Rose {
    std::string stringifySawyerCommandLineParserGroupingFlags(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerCommandLineParserGroupingFlags();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/Clexer.h line 25
namespace stringify { namespace Sawyer { namespace Language { namespace Clexer {
    /** Convert Sawyer::Language::Clexer::TokenType enum constant to a string. */
    const char* TokenType(int64_t);

    /** Convert Sawyer::Language::Clexer::TokenType enum constant to a string. */
    std::string TokenType(int64_t, const std::string &strip);

    /** Return all Sawyer::Language::Clexer::TokenType member values as a vector. */
    const std::vector<int64_t>& TokenType();
}}}}

namespace Rose {
    std::string stringifySawyerLanguageClexerTokenType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerLanguageClexerTokenType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/Message.h line 313
namespace stringify { namespace Sawyer { namespace Message {
    /** Convert Sawyer::Message::Importance enum constant to a string. */
    const char* Importance(int64_t);

    /** Convert Sawyer::Message::Importance enum constant to a string. */
    std::string Importance(int64_t, const std::string &strip);

    /** Return all Sawyer::Message::Importance member values as a vector. */
    const std::vector<int64_t>& Importance();
}}}

namespace Rose {
    std::string stringifySawyerMessageImportance(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerMessageImportance();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/Message.h line 343
namespace stringify { namespace Sawyer { namespace Message {
    /** Convert Sawyer::Message::AnsiColor enum constant to a string. */
    const char* AnsiColor(int64_t);

    /** Convert Sawyer::Message::AnsiColor enum constant to a string. */
    std::string AnsiColor(int64_t, const std::string &strip);

    /** Return all Sawyer::Message::AnsiColor member values as a vector. */
    const std::vector<int64_t>& AnsiColor();
}}}

namespace Rose {
    std::string stringifySawyerMessageAnsiColor(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerMessageAnsiColor();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/Message.h line 990
namespace stringify { namespace Sawyer { namespace Message { namespace Prefix {
    /** Convert Sawyer::Message::Prefix::When enum constant to a string. */
    const char* When(int64_t);

    /** Convert Sawyer::Message::Prefix::When enum constant to a string. */
    std::string When(int64_t, const std::string &strip);

    /** Return all Sawyer::Message::Prefix::When member values as a vector. */
    const std::vector<int64_t>& When();
}}}}

namespace Rose {
    std::string stringifySawyerMessagePrefixWhen(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerMessagePrefixWhen();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/GraphAlgorithm.h line 374
namespace stringify { namespace Sawyer { namespace Container { namespace Algorithm {
    /** Convert Sawyer::Container::Algorithm::CsiNextAction enum constant to a string. */
    const char* CsiNextAction(int64_t);

    /** Convert Sawyer::Container::Algorithm::CsiNextAction enum constant to a string. */
    std::string CsiNextAction(int64_t, const std::string &strip);

    /** Return all Sawyer::Container::Algorithm::CsiNextAction member values as a vector. */
    const std::vector<int64_t>& CsiNextAction();
}}}}

namespace Rose {
    std::string stringifySawyerContainerAlgorithmCsiNextAction(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerContainerAlgorithmCsiNextAction();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/Database.h line 285
namespace stringify { namespace Sawyer { namespace Database { namespace Statement {
    /** Convert Sawyer::Database::Statement::State enum constant to a string. */
    const char* State(int64_t);

    /** Convert Sawyer::Database::Statement::State enum constant to a string. */
    std::string State(int64_t, const std::string &strip);

    /** Return all Sawyer::Database::Statement::State member values as a vector. */
    const std::vector<int64_t>& State();
}}}}

namespace Rose {
    std::string stringifySawyerDatabaseStatementState(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerDatabaseStatementState();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/Access.h line 19
namespace stringify { namespace Sawyer { namespace Access {
    /** Convert Sawyer::Access::Access enum constant to a string. */
    const char* Access(int64_t);

    /** Convert Sawyer::Access::Access enum constant to a string. */
    std::string Access(int64_t, const std::string &strip);

    /** Return all Sawyer::Access::Access member values as a vector. */
    const std::vector<int64_t>& Access();
}}}

namespace Rose {
    std::string stringifySawyerAccessAccess(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerAccessAccess();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/GraphTraversal.h line 39
namespace stringify { namespace Sawyer { namespace Container { namespace Algorithm {
    /** Convert Sawyer::Container::Algorithm::TraversalEvent enum constant to a string. */
    const char* TraversalEvent(int64_t);

    /** Convert Sawyer::Container::Algorithm::TraversalEvent enum constant to a string. */
    std::string TraversalEvent(int64_t, const std::string &strip);

    /** Return all Sawyer::Container::Algorithm::TraversalEvent member values as a vector. */
    const std::vector<int64_t>& TraversalEvent();
}}}}

namespace Rose {
    std::string stringifySawyerContainerAlgorithmTraversalEvent(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerContainerAlgorithmTraversalEvent();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/Graph.h line 636
namespace stringify { namespace Sawyer { namespace Container { namespace Graph {
    /** Convert Sawyer::Container::Graph::EdgePhase enum constant to a string. */
    const char* EdgePhase(int64_t);

    /** Convert Sawyer::Container::Graph::EdgePhase enum constant to a string. */
    std::string EdgePhase(int64_t, const std::string &strip);

    /** Return all Sawyer::Container::Graph::EdgePhase member values as a vector. */
    const std::vector<int64_t>& EdgePhase();
}}}}

namespace Rose {
    std::string stringifySawyerContainerGraphEdgePhase(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerContainerGraphEdgePhase();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/DocumentMarkup.h line 42
namespace stringify { namespace Sawyer { namespace Document { namespace Markup {
    /** Convert Sawyer::Document::Markup::TokenType enum constant to a string. */
    const char* TokenType(int64_t);

    /** Convert Sawyer::Document::Markup::TokenType enum constant to a string. */
    std::string TokenType(int64_t, const std::string &strip);

    /** Return all Sawyer::Document::Markup::TokenType member values as a vector. */
    const std::vector<int64_t>& TokenType();
}}}}

namespace Rose {
    std::string stringifySawyerDocumentMarkupTokenType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerDocumentMarkupTokenType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/Tree.h line 119
namespace stringify { namespace Sawyer { namespace Tree {
    /** Convert Sawyer::Tree::TraversalEvent enum constant to a string. */
    const char* TraversalEvent(int64_t);

    /** Convert Sawyer::Tree::TraversalEvent enum constant to a string. */
    std::string TraversalEvent(int64_t, const std::string &strip);

    /** Return all Sawyer::Tree::TraversalEvent member values as a vector. */
    const std::vector<int64_t>& TraversalEvent();
}}}

namespace Rose {
    std::string stringifySawyerTreeTraversalEvent(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerTreeTraversalEvent();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/Tree.h line 125
namespace stringify { namespace Sawyer { namespace Tree {
    /** Convert Sawyer::Tree::TraversalAction enum constant to a string. */
    const char* TraversalAction(int64_t);

    /** Convert Sawyer::Tree::TraversalAction enum constant to a string. */
    std::string TraversalAction(int64_t, const std::string &strip);

    /** Return all Sawyer::Tree::TraversalAction member values as a vector. */
    const std::vector<int64_t>& TraversalAction();
}}}

namespace Rose {
    std::string stringifySawyerTreeTraversalAction(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerTreeTraversalAction();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Sawyer/Tree.h line 481
namespace stringify { namespace Sawyer { namespace Tree { namespace Node {
    /** Convert Sawyer::Tree::Node::TraversalDirection enum constant to a string. */
    const char* TraversalDirection(int64_t);

    /** Convert Sawyer::Tree::Node::TraversalDirection enum constant to a string. */
    std::string TraversalDirection(int64_t, const std::string &strip);

    /** Return all Sawyer::Tree::Node::TraversalDirection member values as a vector. */
    const std::vector<int64_t>& TraversalDirection();
}}}}

namespace Rose {
    std::string stringifySawyerTreeNodeTraversalDirection(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySawyerTreeNodeTraversalDirection();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/Color.h line 249
namespace stringify { namespace Rose { namespace Color {
    /** Convert Rose::Color::AnsiColor enum constant to a string. */
    const char* AnsiColor(int64_t);

    /** Convert Rose::Color::AnsiColor enum constant to a string. */
    std::string AnsiColor(int64_t, const std::string &strip);

    /** Return all Rose::Color::AnsiColor member values as a vector. */
    const std::vector<int64_t>& AnsiColor();
}}}

namespace Rose {
    std::string stringifyColorAnsiColor(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyColorAnsiColor();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/stringSupport/FileUtility.h line 25
namespace stringify { namespace Rose { namespace StringUtility {
    /** Convert Rose::StringUtility::OSType enum constant to a string. */
    const char* OSType(int64_t);

    /** Convert Rose::StringUtility::OSType enum constant to a string. */
    std::string OSType(int64_t, const std::string &strip);

    /** Return all Rose::StringUtility::OSType member values as a vector. */
    const std::vector<int64_t>& OSType();
}}}

namespace Rose {
    std::string stringifyStringUtilityOSType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyStringUtilityOSType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/util/stringSupport/FileUtility.h line 150
namespace stringify { namespace Rose { namespace StringUtility {
    /** Convert Rose::StringUtility::FileNameLocation enum constant to a string. */
    const char* FileNameLocation(int64_t);

    /** Convert Rose::StringUtility::FileNameLocation enum constant to a string. */
    std::string FileNameLocation(int64_t, const std::string &strip);

    /** Return all Rose::StringUtility::FileNameLocation member values as a vector. */
    const std::vector<int64_t>& FileNameLocation();
}}}

namespace Rose {
    std::string stringifyStringUtilityFileNameLocation(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyStringUtilityFileNameLocation();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Widgets/QREdit.h line 28
namespace stringify { namespace qrs { namespace QREdit {
    /** Convert qrs::QREdit::Type enum constant to a string. */
    const char* Type(int64_t);

    /** Convert qrs::QREdit::Type enum constant to a string. */
    std::string Type(int64_t, const std::string &strip);

    /** Return all qrs::QREdit::Type member values as a vector. */
    const std::vector<int64_t>& Type();
}}}

namespace Rose {
    std::string stringify_qrsQREditType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_qrsQREditType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Widgets/QRButtons.h line 29
namespace stringify { namespace qrs { namespace QRButtons {
    /** Convert qrs::QRButtons::Type enum constant to a string. */
    const char* Type(int64_t);

    /** Convert qrs::QRButtons::Type enum constant to a string. */
    std::string Type(int64_t, const std::string &strip);

    /** Return all qrs::QRButtons::Type member values as a vector. */
    const std::vector<int64_t>& Type();
}}}

namespace Rose {
    std::string stringify_qrsQRButtonsType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_qrsQRButtonsType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Widgets/QRSelect.h line 26
namespace stringify { namespace qrs { namespace QRSelect {
    /** Convert qrs::QRSelect::Type enum constant to a string. */
    const char* Type(int64_t);

    /** Convert qrs::QRSelect::Type enum constant to a string. */
    std::string Type(int64_t, const std::string &strip);

    /** Return all qrs::QRSelect::Type member values as a vector. */
    const std::vector<int64_t>& Type();
}}}

namespace Rose {
    std::string stringify_qrsQRSelectType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_qrsQRSelectType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Components/TreeBox/QRTreeBox.h line 40
namespace stringify { namespace qrs { namespace QRTreeBox {
    /** Convert qrs::QRTreeBox::ToolbarIdx enum constant to a string. */
    const char* ToolbarIdx(int64_t);

    /** Convert qrs::QRTreeBox::ToolbarIdx enum constant to a string. */
    std::string ToolbarIdx(int64_t, const std::string &strip);

    /** Return all qrs::QRTreeBox::ToolbarIdx member values as a vector. */
    const std::vector<int64_t>& ToolbarIdx();
}}}

namespace Rose {
    std::string stringify_qrsQRTreeBoxToolbarIdx(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_qrsQRTreeBoxToolbarIdx();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Components/TreeBox/QRTreeBox.h line 107
namespace stringify { namespace qrs { namespace QRTreeBox {
    /** Convert qrs::QRTreeBox::popmenu_nodes_id enum constant to a string. */
    const char* popmenu_nodes_id(int64_t);

    /** Convert qrs::QRTreeBox::popmenu_nodes_id enum constant to a string. */
    std::string popmenu_nodes_id(int64_t, const std::string &strip);

    /** Return all qrs::QRTreeBox::popmenu_nodes_id member values as a vector. */
    const std::vector<int64_t>& popmenu_nodes_id();
}}}

namespace Rose {
    std::string stringify_qrsQRTreeBox_popmenu_nodes_id(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_qrsQRTreeBox_popmenu_nodes_id();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Components/SourceBox/paragdata.h line 36
namespace stringify { namespace qrs { namespace Symbol {
    /** Convert qrs::Symbol::Type enum constant to a string. */
    const char* Type(int64_t);

    /** Convert qrs::Symbol::Type enum constant to a string. */
    std::string Type(int64_t, const std::string &strip);

    /** Return all qrs::Symbol::Type member values as a vector. */
    const std::vector<int64_t>& Type();
}}}

namespace Rose {
    std::string stringify_qrsSymbolType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_qrsSymbolType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Components/SourceBox/parenmatcher.h line 37
namespace stringify { namespace qrs { namespace Paren {
    /** Convert qrs::Paren::Type enum constant to a string. */
    const char* Type(int64_t);

    /** Convert qrs::Paren::Type enum constant to a string. */
    std::string Type(int64_t, const std::string &strip);

    /** Return all qrs::Paren::Type member values as a vector. */
    const std::vector<int64_t>& Type();
}}}

namespace Rose {
    std::string stringify_qrsParenType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_qrsParenType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Components/SourceBox/parenmatcher.h line 48
namespace stringify { namespace qrs { namespace ParenMatcher {
    /** Convert qrs::ParenMatcher::Selection enum constant to a string. */
    const char* Selection(int64_t);

    /** Convert qrs::ParenMatcher::Selection enum constant to a string. */
    std::string Selection(int64_t, const std::string &strip);

    /** Return all qrs::ParenMatcher::Selection member values as a vector. */
    const std::vector<int64_t>& Selection();
}}}

namespace Rose {
    std::string stringify_qrsParenMatcherSelection(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_qrsParenMatcherSelection();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Components/SourceBox/QRSourceBox.h line 39
namespace stringify { namespace qrs { namespace QRSourceBox {
    /** Convert qrs::QRSourceBox::ToolbarIdx enum constant to a string. */
    const char* ToolbarIdx(int64_t);

    /** Convert qrs::QRSourceBox::ToolbarIdx enum constant to a string. */
    std::string ToolbarIdx(int64_t, const std::string &strip);

    /** Return all qrs::QRSourceBox::ToolbarIdx member values as a vector. */
    const std::vector<int64_t>& ToolbarIdx();
}}}

namespace Rose {
    std::string stringify_qrsQRSourceBoxToolbarIdx(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_qrsQRSourceBoxToolbarIdx();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Components/SourceBox/qeditor.h line 65
namespace stringify { namespace qrs { namespace QEditor {
    /** Convert qrs::QEditor::TypeSel enum constant to a string. */
    const char* TypeSel(int64_t);

    /** Convert qrs::QEditor::TypeSel enum constant to a string. */
    std::string TypeSel(int64_t, const std::string &strip);

    /** Return all qrs::QEditor::TypeSel member values as a vector. */
    const std::vector<int64_t>& TypeSel();
}}}

namespace Rose {
    std::string stringify_qrsQEditorTypeSel(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_qrsQEditorTypeSel();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Components/SourceBox/q3richtext_px.h line 122
namespace stringify { namespace qrs { namespace Q3TextStringChar {
    /** Convert qrs::Q3TextStringChar::Type enum constant to a string. */
    const char* Type(int64_t);

    /** Convert qrs::Q3TextStringChar::Type enum constant to a string. */
    std::string Type(int64_t, const std::string &strip);

    /** Return all qrs::Q3TextStringChar::Type member values as a vector. */
    const std::vector<int64_t>& Type();
}}}

namespace Rose {
    std::string stringify_qrsQ3TextStringCharType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_qrsQ3TextStringCharType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Components/SourceBox/q3richtext_px.h line 366
namespace stringify { namespace qrs { namespace Q3TextCursor {
    /** Convert qrs::Q3TextCursor::Operation enum constant to a string. */
    const char* Operation(int64_t);

    /** Convert qrs::Q3TextCursor::Operation enum constant to a string. */
    std::string Operation(int64_t, const std::string &strip);

    /** Return all qrs::Q3TextCursor::Operation member values as a vector. */
    const std::vector<int64_t>& Operation();
}}}

namespace Rose {
    std::string stringify_qrsQ3TextCursorOperation(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_qrsQ3TextCursorOperation();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Components/SourceBox/q3richtext_px.h line 390
namespace stringify { namespace qrs { namespace Q3TextCommand {
    /** Convert qrs::Q3TextCommand::Commands enum constant to a string. */
    const char* Commands(int64_t);

    /** Convert qrs::Q3TextCommand::Commands enum constant to a string. */
    std::string Commands(int64_t, const std::string &strip);

    /** Return all qrs::Q3TextCommand::Commands member values as a vector. */
    const std::vector<int64_t>& Commands();
}}}

namespace Rose {
    std::string stringify_qrsQ3TextCommandCommands(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_qrsQ3TextCommandCommands();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Components/SourceBox/q3richtext_px.h line 451
namespace stringify { namespace qrs { namespace Q3TextCustomItem {
    /** Convert qrs::Q3TextCustomItem::Placement enum constant to a string. */
    const char* Placement(int64_t);

    /** Convert qrs::Q3TextCustomItem::Placement enum constant to a string. */
    std::string Placement(int64_t, const std::string &strip);

    /** Return all qrs::Q3TextCustomItem::Placement member values as a vector. */
    const std::vector<int64_t>& Placement();
}}}

namespace Rose {
    std::string stringify_qrsQ3TextCustomItemPlacement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_qrsQ3TextCustomItemPlacement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Components/SourceBox/q3richtext_px.h line 724
namespace stringify { namespace qrs { namespace Q3TextDocument {
    /** Convert qrs::Q3TextDocument::SelectionIds enum constant to a string. */
    const char* SelectionIds(int64_t);

    /** Convert qrs::Q3TextDocument::SelectionIds enum constant to a string. */
    std::string SelectionIds(int64_t, const std::string &strip);

    /** Return all qrs::Q3TextDocument::SelectionIds member values as a vector. */
    const std::vector<int64_t>& SelectionIds();
}}}

namespace Rose {
    std::string stringify_qrsQ3TextDocumentSelectionIds(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_qrsQ3TextDocumentSelectionIds();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Components/SourceBox/q3richtext_px.h line 1380
namespace stringify { namespace qrs { namespace Q3TextPreProcessor {
    /** Convert qrs::Q3TextPreProcessor::Ids enum constant to a string. */
    const char* Ids(int64_t);

    /** Convert qrs::Q3TextPreProcessor::Ids enum constant to a string. */
    std::string Ids(int64_t, const std::string &strip);

    /** Return all qrs::Q3TextPreProcessor::Ids member values as a vector. */
    const std::vector<int64_t>& Ids();
}}}

namespace Rose {
    std::string stringify_qrsQ3TextPreProcessorIds(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_qrsQ3TextPreProcessorIds();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Components/SourceBox/q3richtext_px.h line 1400
namespace stringify { namespace qrs { namespace Q3TextFormat {
    /** Convert qrs::Q3TextFormat::Flags enum constant to a string. */
    const char* Flags(int64_t);

    /** Convert qrs::Q3TextFormat::Flags enum constant to a string. */
    std::string Flags(int64_t, const std::string &strip);

    /** Return all qrs::Q3TextFormat::Flags member values as a vector. */
    const std::vector<int64_t>& Flags();
}}}

namespace Rose {
    std::string stringify_qrsQ3TextFormatFlags(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_qrsQ3TextFormatFlags();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Components/SourceBox/q3richtext_px.h line 1415
namespace stringify { namespace qrs { namespace Q3TextFormat {
    /** Convert qrs::Q3TextFormat::VerticalAlignment enum constant to a string. */
    const char* VerticalAlignment(int64_t);

    /** Convert qrs::Q3TextFormat::VerticalAlignment enum constant to a string. */
    std::string VerticalAlignment(int64_t, const std::string &strip);

    /** Return all qrs::Q3TextFormat::VerticalAlignment member values as a vector. */
    const std::vector<int64_t>& VerticalAlignment();
}}}

namespace Rose {
    std::string stringify_qrsQ3TextFormatVerticalAlignment(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_qrsQ3TextFormatVerticalAlignment();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/qrose/Components/SourceBox/qsourcecolorizer.h line 257
namespace stringify { namespace qrs { namespace QSourceColorizer {
    /** Convert qrs::QSourceColorizer::Type enum constant to a string. */
    const char* Type(int64_t);

    /** Convert qrs::QSourceColorizer::Type enum constant to a string. */
    std::string Type(int64_t, const std::string &strip);

    /** Return all qrs::QSourceColorizer::Type member values as a vector. */
    const std::vector<int64_t>& Type();
}}}

namespace Rose {
    std::string stringify_qrsQSourceColorizerType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_qrsQSourceColorizerType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/MSTL/DOTGeneration.h line 48
namespace stringify { namespace DOTGeneration {
    /** Convert DOTGeneration::traversalType enum constant to a string. */
    const char* traversalType(int64_t);

    /** Convert DOTGeneration::traversalType enum constant to a string. */
    std::string traversalType(int64_t, const std::string &strip);

    /** Return all DOTGeneration::traversalType member values as a vector. */
    const std::vector<int64_t>& traversalType();
}}

namespace Rose {
    std::string stringifyDOTGeneration_traversalType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyDOTGeneration_traversalType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_streams.h line 33
namespace stringify {
    /** Convert _HPDF_StreamType enum constant to a string. */
    const char* _HPDF_StreamType(int64_t);

    /** Convert _HPDF_StreamType enum constant to a string. */
    std::string _HPDF_StreamType(int64_t, const std::string &strip);

    /** Return all _HPDF_StreamType member values as a vector. */
    const std::vector<int64_t>& _HPDF_StreamType();
}

namespace Rose {
    std::string stringify_HPDF_StreamType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_StreamType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_streams.h line 46
namespace stringify {
    /** Convert _HPDF_WhenceMode enum constant to a string. */
    const char* _HPDF_WhenceMode(int64_t);

    /** Convert _HPDF_WhenceMode enum constant to a string. */
    std::string _HPDF_WhenceMode(int64_t, const std::string &strip);

    /** Return all _HPDF_WhenceMode member values as a vector. */
    const std::vector<int64_t>& _HPDF_WhenceMode();
}

namespace Rose {
    std::string stringify_HPDF_WhenceMode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_WhenceMode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 128
namespace stringify {
    /** Convert _HPDF_InfoType enum constant to a string. */
    const char* _HPDF_InfoType(int64_t);

    /** Convert _HPDF_InfoType enum constant to a string. */
    std::string _HPDF_InfoType(int64_t, const std::string &strip);

    /** Return all _HPDF_InfoType member values as a vector. */
    const std::vector<int64_t>& _HPDF_InfoType();
}

namespace Rose {
    std::string stringify_HPDF_InfoType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_InfoType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 144
namespace stringify {
    /** Convert _HPDF_PdfVer enum constant to a string. */
    const char* _HPDF_PdfVer(int64_t);

    /** Convert _HPDF_PdfVer enum constant to a string. */
    std::string _HPDF_PdfVer(int64_t, const std::string &strip);

    /** Return all _HPDF_PdfVer member values as a vector. */
    const std::vector<int64_t>& _HPDF_PdfVer();
}

namespace Rose {
    std::string stringify_HPDF_PdfVer(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_PdfVer();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 154
namespace stringify {
    /** Convert _HPDF_EncryptMode enum constant to a string. */
    const char* _HPDF_EncryptMode(int64_t);

    /** Convert _HPDF_EncryptMode enum constant to a string. */
    std::string _HPDF_EncryptMode(int64_t, const std::string &strip);

    /** Return all _HPDF_EncryptMode member values as a vector. */
    const std::vector<int64_t>& _HPDF_EncryptMode();
}

namespace Rose {
    std::string stringify_HPDF_EncryptMode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_EncryptMode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 213
namespace stringify {
    /** Convert _HPDF_ColorSpace enum constant to a string. */
    const char* _HPDF_ColorSpace(int64_t);

    /** Convert _HPDF_ColorSpace enum constant to a string. */
    std::string _HPDF_ColorSpace(int64_t, const std::string &strip);

    /** Return all _HPDF_ColorSpace member values as a vector. */
    const std::vector<int64_t>& _HPDF_ColorSpace();
}

namespace Rose {
    std::string stringify_HPDF_ColorSpace(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_ColorSpace();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 250
namespace stringify {
    /** Convert _HPDF_LineCap enum constant to a string. */
    const char* _HPDF_LineCap(int64_t);

    /** Convert _HPDF_LineCap enum constant to a string. */
    std::string _HPDF_LineCap(int64_t, const std::string &strip);

    /** Return all _HPDF_LineCap member values as a vector. */
    const std::vector<int64_t>& _HPDF_LineCap();
}

namespace Rose {
    std::string stringify_HPDF_LineCap(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_LineCap();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 260
namespace stringify {
    /** Convert _HPDF_LineJoin enum constant to a string. */
    const char* _HPDF_LineJoin(int64_t);

    /** Convert _HPDF_LineJoin enum constant to a string. */
    std::string _HPDF_LineJoin(int64_t, const std::string &strip);

    /** Return all _HPDF_LineJoin member values as a vector. */
    const std::vector<int64_t>& _HPDF_LineJoin();
}

namespace Rose {
    std::string stringify_HPDF_LineJoin(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_LineJoin();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 270
namespace stringify {
    /** Convert _HPDF_TextRenderingMode enum constant to a string. */
    const char* _HPDF_TextRenderingMode(int64_t);

    /** Convert _HPDF_TextRenderingMode enum constant to a string. */
    std::string _HPDF_TextRenderingMode(int64_t, const std::string &strip);

    /** Return all _HPDF_TextRenderingMode member values as a vector. */
    const std::vector<int64_t>& _HPDF_TextRenderingMode();
}

namespace Rose {
    std::string stringify_HPDF_TextRenderingMode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_TextRenderingMode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 283
namespace stringify {
    /** Convert _HPDF_WritingMode enum constant to a string. */
    const char* _HPDF_WritingMode(int64_t);

    /** Convert _HPDF_WritingMode enum constant to a string. */
    std::string _HPDF_WritingMode(int64_t, const std::string &strip);

    /** Return all _HPDF_WritingMode member values as a vector. */
    const std::vector<int64_t>& _HPDF_WritingMode();
}

namespace Rose {
    std::string stringify_HPDF_WritingMode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_WritingMode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 290
namespace stringify {
    /** Convert _HPDF_PageLayout enum constant to a string. */
    const char* _HPDF_PageLayout(int64_t);

    /** Convert _HPDF_PageLayout enum constant to a string. */
    std::string _HPDF_PageLayout(int64_t, const std::string &strip);

    /** Return all _HPDF_PageLayout member values as a vector. */
    const std::vector<int64_t>& _HPDF_PageLayout();
}

namespace Rose {
    std::string stringify_HPDF_PageLayout(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_PageLayout();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 299
namespace stringify {
    /** Convert _HPDF_PageMode enum constant to a string. */
    const char* _HPDF_PageMode(int64_t);

    /** Convert _HPDF_PageMode enum constant to a string. */
    std::string _HPDF_PageMode(int64_t, const std::string &strip);

    /** Return all _HPDF_PageMode member values as a vector. */
    const std::vector<int64_t>& _HPDF_PageMode();
}

namespace Rose {
    std::string stringify_HPDF_PageMode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_PageMode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 311
namespace stringify {
    /** Convert _HPDF_PageNumStyle enum constant to a string. */
    const char* _HPDF_PageNumStyle(int64_t);

    /** Convert _HPDF_PageNumStyle enum constant to a string. */
    std::string _HPDF_PageNumStyle(int64_t, const std::string &strip);

    /** Return all _HPDF_PageNumStyle member values as a vector. */
    const std::vector<int64_t>& _HPDF_PageNumStyle();
}

namespace Rose {
    std::string stringify_HPDF_PageNumStyle(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_PageNumStyle();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 321
namespace stringify {
    /** Convert _HPDF_DestinationType enum constant to a string. */
    const char* _HPDF_DestinationType(int64_t);

    /** Convert _HPDF_DestinationType enum constant to a string. */
    std::string _HPDF_DestinationType(int64_t, const std::string &strip);

    /** Return all _HPDF_DestinationType member values as a vector. */
    const std::vector<int64_t>& _HPDF_DestinationType();
}

namespace Rose {
    std::string stringify_HPDF_DestinationType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_DestinationType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 334
namespace stringify {
    /** Convert _HPDF_AnnotType enum constant to a string. */
    const char* _HPDF_AnnotType(int64_t);

    /** Convert _HPDF_AnnotType enum constant to a string. */
    std::string _HPDF_AnnotType(int64_t, const std::string &strip);

    /** Return all _HPDF_AnnotType member values as a vector. */
    const std::vector<int64_t>& _HPDF_AnnotType();
}

namespace Rose {
    std::string stringify_HPDF_AnnotType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_AnnotType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 352
namespace stringify {
    /** Convert _HPDF_AnnotFlgs enum constant to a string. */
    const char* _HPDF_AnnotFlgs(int64_t);

    /** Convert _HPDF_AnnotFlgs enum constant to a string. */
    std::string _HPDF_AnnotFlgs(int64_t, const std::string &strip);

    /** Return all _HPDF_AnnotFlgs member values as a vector. */
    const std::vector<int64_t>& _HPDF_AnnotFlgs();
}

namespace Rose {
    std::string stringify_HPDF_AnnotFlgs(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_AnnotFlgs();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 363
namespace stringify {
    /** Convert _HPDF_AnnotHighlightMode enum constant to a string. */
    const char* _HPDF_AnnotHighlightMode(int64_t);

    /** Convert _HPDF_AnnotHighlightMode enum constant to a string. */
    std::string _HPDF_AnnotHighlightMode(int64_t, const std::string &strip);

    /** Return all _HPDF_AnnotHighlightMode member values as a vector. */
    const std::vector<int64_t>& _HPDF_AnnotHighlightMode();
}

namespace Rose {
    std::string stringify_HPDF_AnnotHighlightMode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_AnnotHighlightMode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 372
namespace stringify {
    /** Convert _HPDF_AnnotIcon enum constant to a string. */
    const char* _HPDF_AnnotIcon(int64_t);

    /** Convert _HPDF_AnnotIcon enum constant to a string. */
    std::string _HPDF_AnnotIcon(int64_t, const std::string &strip);

    /** Return all _HPDF_AnnotIcon member values as a vector. */
    const std::vector<int64_t>& _HPDF_AnnotIcon();
}

namespace Rose {
    std::string stringify_HPDF_AnnotIcon(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_AnnotIcon();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 388
namespace stringify {
    /** Convert _HPDF_BSSubtype enum constant to a string. */
    const char* _HPDF_BSSubtype(int64_t);

    /** Convert _HPDF_BSSubtype enum constant to a string. */
    std::string _HPDF_BSSubtype(int64_t, const std::string &strip);

    /** Return all _HPDF_BSSubtype member values as a vector. */
    const std::vector<int64_t>& _HPDF_BSSubtype();
}

namespace Rose {
    std::string stringify_HPDF_BSSubtype(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_BSSubtype();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 399
namespace stringify {
    /** Convert _HPDF_BlendMode enum constant to a string. */
    const char* _HPDF_BlendMode(int64_t);

    /** Convert _HPDF_BlendMode enum constant to a string. */
    std::string _HPDF_BlendMode(int64_t, const std::string &strip);

    /** Return all _HPDF_BlendMode member values as a vector. */
    const std::vector<int64_t>& _HPDF_BlendMode();
}

namespace Rose {
    std::string stringify_HPDF_BlendMode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_BlendMode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 417
namespace stringify {
    /** Convert _HPDF_TransitionStyle enum constant to a string. */
    const char* _HPDF_TransitionStyle(int64_t);

    /** Convert _HPDF_TransitionStyle enum constant to a string. */
    std::string _HPDF_TransitionStyle(int64_t, const std::string &strip);

    /** Return all _HPDF_TransitionStyle member values as a vector. */
    const std::vector<int64_t>& _HPDF_TransitionStyle();
}

namespace Rose {
    std::string stringify_HPDF_TransitionStyle(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_TransitionStyle();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 440
namespace stringify {
    /** Convert _HPDF_PageSizes enum constant to a string. */
    const char* _HPDF_PageSizes(int64_t);

    /** Convert _HPDF_PageSizes enum constant to a string. */
    std::string _HPDF_PageSizes(int64_t, const std::string &strip);

    /** Return all _HPDF_PageSizes member values as a vector. */
    const std::vector<int64_t>& _HPDF_PageSizes();
}

namespace Rose {
    std::string stringify_HPDF_PageSizes(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_PageSizes();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 457
namespace stringify {
    /** Convert _HPDF_PageDirection enum constant to a string. */
    const char* _HPDF_PageDirection(int64_t);

    /** Convert _HPDF_PageDirection enum constant to a string. */
    std::string _HPDF_PageDirection(int64_t, const std::string &strip);

    /** Return all _HPDF_PageDirection member values as a vector. */
    const std::vector<int64_t>& _HPDF_PageDirection();
}

namespace Rose {
    std::string stringify_HPDF_PageDirection(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_PageDirection();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 463
namespace stringify {
    /** Convert _HPDF_EncoderType enum constant to a string. */
    const char* _HPDF_EncoderType(int64_t);

    /** Convert _HPDF_EncoderType enum constant to a string. */
    std::string _HPDF_EncoderType(int64_t, const std::string &strip);

    /** Return all _HPDF_EncoderType member values as a vector. */
    const std::vector<int64_t>& _HPDF_EncoderType();
}

namespace Rose {
    std::string stringify_HPDF_EncoderType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_EncoderType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 471
namespace stringify {
    /** Convert _HPDF_ByteType enum constant to a string. */
    const char* _HPDF_ByteType(int64_t);

    /** Convert _HPDF_ByteType enum constant to a string. */
    std::string _HPDF_ByteType(int64_t, const std::string &strip);

    /** Return all _HPDF_ByteType member values as a vector. */
    const std::vector<int64_t>& _HPDF_ByteType();
}

namespace Rose {
    std::string stringify_HPDF_ByteType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_ByteType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_types.h line 479
namespace stringify {
    /** Convert _HPDF_TextAlignment enum constant to a string. */
    const char* _HPDF_TextAlignment(int64_t);

    /** Convert _HPDF_TextAlignment enum constant to a string. */
    std::string _HPDF_TextAlignment(int64_t, const std::string &strip);

    /** Return all _HPDF_TextAlignment member values as a vector. */
    const std::vector<int64_t>& _HPDF_TextAlignment();
}

namespace Rose {
    std::string stringify_HPDF_TextAlignment(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_TextAlignment();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_fontdef.h line 63
namespace stringify {
    /** Convert _HPDF_FontDefType enum constant to a string. */
    const char* _HPDF_FontDefType(int64_t);

    /** Convert _HPDF_FontDefType enum constant to a string. */
    std::string _HPDF_FontDefType(int64_t, const std::string &strip);

    /** Return all _HPDF_FontDefType member values as a vector. */
    const std::vector<int64_t>& _HPDF_FontDefType();
}

namespace Rose {
    std::string stringify_HPDF_FontDefType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_FontDefType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_font.h line 31
namespace stringify {
    /** Convert _HPDF_FontType enum constant to a string. */
    const char* _HPDF_FontType(int64_t);

    /** Convert _HPDF_FontType enum constant to a string. */
    std::string _HPDF_FontType(int64_t, const std::string &strip);

    /** Return all _HPDF_FontType member values as a vector. */
    const std::vector<int64_t>& _HPDF_FontType();
}

namespace Rose {
    std::string stringify_HPDF_FontType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_FontType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_encoder.h line 69
namespace stringify {
    /** Convert _HPDF_EncodingType enum constant to a string. */
    const char* _HPDF_EncodingType(int64_t);

    /** Convert _HPDF_EncodingType enum constant to a string. */
    std::string _HPDF_EncodingType(int64_t, const std::string &strip);

    /** Return all _HPDF_EncodingType member values as a vector. */
    const std::vector<int64_t>& _HPDF_EncodingType();
}

namespace Rose {
    std::string stringify_HPDF_EncodingType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_EncodingType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/3rdPartyLibraries/libharu-2.1.0/include/hpdf_encoder.h line 130
namespace stringify {
    /** Convert _HPDF_BaseEncodings enum constant to a string. */
    const char* _HPDF_BaseEncodings(int64_t);

    /** Convert _HPDF_BaseEncodings enum constant to a string. */
    std::string _HPDF_BaseEncodings(int64_t, const std::string &strip);

    /** Return all _HPDF_BaseEncodings member values as a vector. */
    const std::vector<int64_t>& _HPDF_BaseEncodings();
}

namespace Rose {
    std::string stringify_HPDF_BaseEncodings(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringify_HPDF_BaseEncodings();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/AstNodeClass.h line 100
namespace stringify { namespace AstNodeClass {
    /** Convert AstNodeClass::locationInTree enum constant to a string. */
    const char* locationInTree(int64_t);

    /** Convert AstNodeClass::locationInTree enum constant to a string. */
    std::string locationInTree(int64_t, const std::string &strip);

    /** Return all AstNodeClass::locationInTree member values as a vector. */
    const std::vector<int64_t>& locationInTree();
}}

namespace Rose {
    std::string stringifyAstNodeClass_locationInTree(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyAstNodeClass_locationInTree();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/AstNodeClass.h line 106
namespace stringify { namespace AstNodeClass {
    /** Convert AstNodeClass::includeExcludeMechanism enum constant to a string. */
    const char* includeExcludeMechanism(int64_t);

    /** Convert AstNodeClass::includeExcludeMechanism enum constant to a string. */
    std::string includeExcludeMechanism(int64_t, const std::string &strip);

    /** Return all AstNodeClass::includeExcludeMechanism member values as a vector. */
    const std::vector<int64_t>& includeExcludeMechanism();
}}

namespace Rose {
    std::string stringifyAstNodeClass_includeExcludeMechanism(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyAstNodeClass_includeExcludeMechanism();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/AstNodeClass.h line 309
namespace stringify { namespace AstNodeClass {
    /** Convert AstNodeClass::TypeEvaluation enum constant to a string. */
    const char* TypeEvaluation(int64_t);

    /** Convert AstNodeClass::TypeEvaluation enum constant to a string. */
    std::string TypeEvaluation(int64_t, const std::string &strip);

    /** Return all AstNodeClass::TypeEvaluation member values as a vector. */
    const std::vector<int64_t>& TypeEvaluation();
}}

namespace Rose {
    std::string stringifyAstNodeClassTypeEvaluation(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyAstNodeClassTypeEvaluation();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 3020
namespace stringify { namespace SgAsmRiscOperation {
    /** Convert SgAsmRiscOperation::RiscOperator enum constant to a string. */
    const char* RiscOperator(int64_t);

    /** Convert SgAsmRiscOperation::RiscOperator enum constant to a string. */
    std::string RiscOperator(int64_t, const std::string &strip);

    /** Return all SgAsmRiscOperation::RiscOperator member values as a vector. */
    const std::vector<int64_t>& RiscOperator();
}}

namespace Rose {
    std::string stringifySgAsmRiscOperationRiscOperator(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmRiscOperationRiscOperator();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 3342
namespace stringify { namespace SgAsmFloatType {
    /** Convert SgAsmFloatType::Flag enum constant to a string. */
    const char* Flag(int64_t);

    /** Convert SgAsmFloatType::Flag enum constant to a string. */
    std::string Flag(int64_t, const std::string &strip);

    /** Return all SgAsmFloatType::Flag member values as a vector. */
    const std::vector<int64_t>& Flag();
}}

namespace Rose {
    std::string stringifySgAsmFloatTypeFlag(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmFloatTypeFlag();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 3860
namespace stringify { namespace SgAsmFunction {
    /** Convert SgAsmFunction::MayReturn enum constant to a string. */
    const char* MayReturn(int64_t);

    /** Convert SgAsmFunction::MayReturn enum constant to a string. */
    std::string MayReturn(int64_t, const std::string &strip);

    /** Return all SgAsmFunction::MayReturn member values as a vector. */
    const std::vector<int64_t>& MayReturn();
}}

namespace Rose {
    std::string stringifySgAsmFunctionMayReturn(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmFunctionMayReturn();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 3870
namespace stringify { namespace SgAsmFunction {
    /** Convert SgAsmFunction::FunctionReason enum constant to a string. */
    const char* FunctionReason(int64_t);

    /** Convert SgAsmFunction::FunctionReason enum constant to a string. */
    std::string FunctionReason(int64_t, const std::string &strip);

    /** Return all SgAsmFunction::FunctionReason member values as a vector. */
    const std::vector<int64_t>& FunctionReason();
}}

namespace Rose {
    std::string stringifySgAsmFunctionFunctionReason(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmFunctionFunctionReason();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 4026
namespace stringify { namespace SgAsmFunction {
    /** Convert SgAsmFunction::function_kind_enum enum constant to a string. */
    const char* function_kind_enum(int64_t);

    /** Convert SgAsmFunction::function_kind_enum enum constant to a string. */
    std::string function_kind_enum(int64_t, const std::string &strip);

    /** Return all SgAsmFunction::function_kind_enum member values as a vector. */
    const std::vector<int64_t>& function_kind_enum();
}}

namespace Rose {
    std::string stringifySgAsmFunction_function_kind_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmFunction_function_kind_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 4258
namespace stringify { namespace SgAsmBlock {
    /** Convert SgAsmBlock::Reason enum constant to a string. */
    const char* Reason(int64_t);

    /** Convert SgAsmBlock::Reason enum constant to a string. */
    std::string Reason(int64_t, const std::string &strip);

    /** Return all SgAsmBlock::Reason member values as a vector. */
    const std::vector<int64_t>& Reason();
}}

namespace Rose {
    std::string stringifySgAsmBlockReason(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmBlockReason();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 5109
namespace stringify { namespace SgAsmElfFileHeader {
    /** Convert SgAsmElfFileHeader::ObjectType enum constant to a string. */
    const char* ObjectType(int64_t);

    /** Convert SgAsmElfFileHeader::ObjectType enum constant to a string. */
    std::string ObjectType(int64_t, const std::string &strip);

    /** Return all SgAsmElfFileHeader::ObjectType member values as a vector. */
    const std::vector<int64_t>& ObjectType();
}}

namespace Rose {
    std::string stringifySgAsmElfFileHeaderObjectType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmElfFileHeaderObjectType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 5529
namespace stringify { namespace SgAsmElfSectionTableEntry {
    /** Convert SgAsmElfSectionTableEntry::SectionType enum constant to a string. */
    const char* SectionType(int64_t);

    /** Convert SgAsmElfSectionTableEntry::SectionType enum constant to a string. */
    std::string SectionType(int64_t, const std::string &strip);

    /** Return all SgAsmElfSectionTableEntry::SectionType member values as a vector. */
    const std::vector<int64_t>& SectionType();
}}

namespace Rose {
    std::string stringifySgAsmElfSectionTableEntrySectionType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmElfSectionTableEntrySectionType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 5556
namespace stringify { namespace SgAsmElfSectionTableEntry {
    /** Convert SgAsmElfSectionTableEntry::SectionFlags enum constant to a string. */
    const char* SectionFlags(int64_t);

    /** Convert SgAsmElfSectionTableEntry::SectionFlags enum constant to a string. */
    std::string SectionFlags(int64_t, const std::string &strip);

    /** Return all SgAsmElfSectionTableEntry::SectionFlags member values as a vector. */
    const std::vector<int64_t>& SectionFlags();
}}

namespace Rose {
    std::string stringifySgAsmElfSectionTableEntrySectionFlags(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmElfSectionTableEntrySectionFlags();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 5958
namespace stringify { namespace SgAsmElfSegmentTableEntry {
    /** Convert SgAsmElfSegmentTableEntry::SegmentType enum constant to a string. */
    const char* SegmentType(int64_t);

    /** Convert SgAsmElfSegmentTableEntry::SegmentType enum constant to a string. */
    std::string SegmentType(int64_t, const std::string &strip);

    /** Return all SgAsmElfSegmentTableEntry::SegmentType member values as a vector. */
    const std::vector<int64_t>& SegmentType();
}}

namespace Rose {
    std::string stringifySgAsmElfSegmentTableEntrySegmentType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmElfSegmentTableEntrySegmentType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 5986
namespace stringify { namespace SgAsmElfSegmentTableEntry {
    /** Convert SgAsmElfSegmentTableEntry::SegmentFlags enum constant to a string. */
    const char* SegmentFlags(int64_t);

    /** Convert SgAsmElfSegmentTableEntry::SegmentFlags enum constant to a string. */
    std::string SegmentFlags(int64_t, const std::string &strip);

    /** Return all SgAsmElfSegmentTableEntry::SegmentFlags member values as a vector. */
    const std::vector<int64_t>& SegmentFlags();
}}

namespace Rose {
    std::string stringifySgAsmElfSegmentTableEntrySegmentFlags(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmElfSegmentTableEntrySegmentFlags();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 6332
namespace stringify { namespace SgAsmElfSymbol {
    /** Convert SgAsmElfSymbol::ElfSymBinding enum constant to a string. */
    const char* ElfSymBinding(int64_t);

    /** Convert SgAsmElfSymbol::ElfSymBinding enum constant to a string. */
    std::string ElfSymBinding(int64_t, const std::string &strip);

    /** Return all SgAsmElfSymbol::ElfSymBinding member values as a vector. */
    const std::vector<int64_t>& ElfSymBinding();
}}

namespace Rose {
    std::string stringifySgAsmElfSymbolElfSymBinding(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmElfSymbolElfSymBinding();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 6338
namespace stringify { namespace SgAsmElfSymbol {
    /** Convert SgAsmElfSymbol::ElfSymType enum constant to a string. */
    const char* ElfSymType(int64_t);

    /** Convert SgAsmElfSymbol::ElfSymType enum constant to a string. */
    std::string ElfSymType(int64_t, const std::string &strip);

    /** Return all SgAsmElfSymbol::ElfSymType member values as a vector. */
    const std::vector<int64_t>& ElfSymType();
}}

namespace Rose {
    std::string stringifySgAsmElfSymbolElfSymType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmElfSymbolElfSymType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 7740
namespace stringify { namespace SgAsmElfRelocEntry {
    /** Convert SgAsmElfRelocEntry::RelocType enum constant to a string. */
    const char* RelocType(int64_t);

    /** Convert SgAsmElfRelocEntry::RelocType enum constant to a string. */
    std::string RelocType(int64_t, const std::string &strip);

    /** Return all SgAsmElfRelocEntry::RelocType member values as a vector. */
    const std::vector<int64_t>& RelocType();
}}

namespace Rose {
    std::string stringifySgAsmElfRelocEntryRelocType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmElfRelocEntryRelocType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 8097
namespace stringify { namespace SgAsmElfDynamicEntry {
    /** Convert SgAsmElfDynamicEntry::EntryType enum constant to a string. */
    const char* EntryType(int64_t);

    /** Convert SgAsmElfDynamicEntry::EntryType enum constant to a string. */
    std::string EntryType(int64_t, const std::string &strip);

    /** Return all SgAsmElfDynamicEntry::EntryType member values as a vector. */
    const std::vector<int64_t>& EntryType();
}}

namespace Rose {
    std::string stringifySgAsmElfDynamicEntryEntryType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmElfDynamicEntryEntryType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 10599
namespace stringify { namespace SgAsmPEFileHeader {
    /** Convert SgAsmPEFileHeader::HeaderFlags enum constant to a string. */
    const char* HeaderFlags(int64_t);

    /** Convert SgAsmPEFileHeader::HeaderFlags enum constant to a string. */
    std::string HeaderFlags(int64_t, const std::string &strip);

    /** Return all SgAsmPEFileHeader::HeaderFlags member values as a vector. */
    const std::vector<int64_t>& HeaderFlags();
}}

namespace Rose {
    std::string stringifySgAsmPEFileHeaderHeaderFlags(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmPEFileHeaderHeaderFlags();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 10608
namespace stringify { namespace SgAsmPEFileHeader {
    /** Convert SgAsmPEFileHeader::Subsystem enum constant to a string. */
    const char* Subsystem(int64_t);

    /** Convert SgAsmPEFileHeader::Subsystem enum constant to a string. */
    std::string Subsystem(int64_t, const std::string &strip);

    /** Return all SgAsmPEFileHeader::Subsystem member values as a vector. */
    const std::vector<int64_t>& Subsystem();
}}

namespace Rose {
    std::string stringifySgAsmPEFileHeaderSubsystem(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmPEFileHeaderSubsystem();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 10618
namespace stringify { namespace SgAsmPEFileHeader {
    /** Convert SgAsmPEFileHeader::DLLFlags enum constant to a string. */
    const char* DLLFlags(int64_t);

    /** Convert SgAsmPEFileHeader::DLLFlags enum constant to a string. */
    std::string DLLFlags(int64_t, const std::string &strip);

    /** Return all SgAsmPEFileHeader::DLLFlags member values as a vector. */
    const std::vector<int64_t>& DLLFlags();
}}

namespace Rose {
    std::string stringifySgAsmPEFileHeaderDLLFlags(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmPEFileHeaderDLLFlags();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 10627
namespace stringify { namespace SgAsmPEFileHeader {
    /** Convert SgAsmPEFileHeader::PairPurpose enum constant to a string. */
    const char* PairPurpose(int64_t);

    /** Convert SgAsmPEFileHeader::PairPurpose enum constant to a string. */
    std::string PairPurpose(int64_t, const std::string &strip);

    /** Return all SgAsmPEFileHeader::PairPurpose member values as a vector. */
    const std::vector<int64_t>& PairPurpose();
}}

namespace Rose {
    std::string stringifySgAsmPEFileHeaderPairPurpose(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmPEFileHeaderPairPurpose();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 12414
namespace stringify { namespace SgAsmPESectionTableEntry {
    /** Convert SgAsmPESectionTableEntry::PESectionFlags enum constant to a string. */
    const char* PESectionFlags(int64_t);

    /** Convert SgAsmPESectionTableEntry::PESectionFlags enum constant to a string. */
    std::string PESectionFlags(int64_t, const std::string &strip);

    /** Return all SgAsmPESectionTableEntry::PESectionFlags member values as a vector. */
    const std::vector<int64_t>& PESectionFlags();
}}

namespace Rose {
    std::string stringifySgAsmPESectionTableEntryPESectionFlags(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmPESectionTableEntryPESectionFlags();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 14442
namespace stringify { namespace SgAsmGenericSymbol {
    /** Convert SgAsmGenericSymbol::SymbolDefState enum constant to a string. */
    const char* SymbolDefState(int64_t);

    /** Convert SgAsmGenericSymbol::SymbolDefState enum constant to a string. */
    std::string SymbolDefState(int64_t, const std::string &strip);

    /** Return all SgAsmGenericSymbol::SymbolDefState member values as a vector. */
    const std::vector<int64_t>& SymbolDefState();
}}

namespace Rose {
    std::string stringifySgAsmGenericSymbolSymbolDefState(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmGenericSymbolSymbolDefState();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 14449
namespace stringify { namespace SgAsmGenericSymbol {
    /** Convert SgAsmGenericSymbol::SymbolType enum constant to a string. */
    const char* SymbolType(int64_t);

    /** Convert SgAsmGenericSymbol::SymbolType enum constant to a string. */
    std::string SymbolType(int64_t, const std::string &strip);

    /** Return all SgAsmGenericSymbol::SymbolType member values as a vector. */
    const std::vector<int64_t>& SymbolType();
}}

namespace Rose {
    std::string stringifySgAsmGenericSymbolSymbolType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmGenericSymbolSymbolType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 14463
namespace stringify { namespace SgAsmGenericSymbol {
    /** Convert SgAsmGenericSymbol::SymbolBinding enum constant to a string. */
    const char* SymbolBinding(int64_t);

    /** Convert SgAsmGenericSymbol::SymbolBinding enum constant to a string. */
    std::string SymbolBinding(int64_t, const std::string &strip);

    /** Return all SgAsmGenericSymbol::SymbolBinding member values as a vector. */
    const std::vector<int64_t>& SymbolBinding();
}}

namespace Rose {
    std::string stringifySgAsmGenericSymbolSymbolBinding(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmGenericSymbolSymbolBinding();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 14996
namespace stringify { namespace SgAsmGenericSection {
    /** Convert SgAsmGenericSection::SectionPurpose enum constant to a string. */
    const char* SectionPurpose(int64_t);

    /** Convert SgAsmGenericSection::SectionPurpose enum constant to a string. */
    std::string SectionPurpose(int64_t, const std::string &strip);

    /** Return all SgAsmGenericSection::SectionPurpose member values as a vector. */
    const std::vector<int64_t>& SectionPurpose();
}}

namespace Rose {
    std::string stringifySgAsmGenericSectionSectionPurpose(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmGenericSectionSectionPurpose();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 15833
namespace stringify { namespace SgAsmGenericFile {
    /** Convert SgAsmGenericFile::AddressSpace enum constant to a string. */
    const char* AddressSpace(int64_t);

    /** Convert SgAsmGenericFile::AddressSpace enum constant to a string. */
    std::string AddressSpace(int64_t, const std::string &strip);

    /** Return all SgAsmGenericFile::AddressSpace member values as a vector. */
    const std::vector<int64_t>& AddressSpace();
}}

namespace Rose {
    std::string stringifySgAsmGenericFileAddressSpace(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmGenericFileAddressSpace();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 15840
namespace stringify { namespace SgAsmGenericFile {
    /** Convert SgAsmGenericFile::Elasticity enum constant to a string. */
    const char* Elasticity(int64_t);

    /** Convert SgAsmGenericFile::Elasticity enum constant to a string. */
    std::string Elasticity(int64_t, const std::string &strip);

    /** Return all SgAsmGenericFile::Elasticity member values as a vector. */
    const std::vector<int64_t>& Elasticity();
}}

namespace Rose {
    std::string stringifySgAsmGenericFileElasticity(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmGenericFileElasticity();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 16240
namespace stringify { namespace SgAsmExecutableFileFormat {
    /** Convert SgAsmExecutableFileFormat::ExecFamily enum constant to a string. */
    const char* ExecFamily(int64_t);

    /** Convert SgAsmExecutableFileFormat::ExecFamily enum constant to a string. */
    std::string ExecFamily(int64_t, const std::string &strip);

    /** Return all SgAsmExecutableFileFormat::ExecFamily member values as a vector. */
    const std::vector<int64_t>& ExecFamily();
}}

namespace Rose {
    std::string stringifySgAsmExecutableFileFormatExecFamily(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmExecutableFileFormatExecFamily();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 16251
namespace stringify { namespace SgAsmExecutableFileFormat {
    /** Convert SgAsmExecutableFileFormat::ExecABI enum constant to a string. */
    const char* ExecABI(int64_t);

    /** Convert SgAsmExecutableFileFormat::ExecABI enum constant to a string. */
    std::string ExecABI(int64_t, const std::string &strip);

    /** Return all SgAsmExecutableFileFormat::ExecABI member values as a vector. */
    const std::vector<int64_t>& ExecABI();
}}

namespace Rose {
    std::string stringifySgAsmExecutableFileFormatExecABI(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmExecutableFileFormatExecABI();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 16275
namespace stringify { namespace SgAsmExecutableFileFormat {
    /** Convert SgAsmExecutableFileFormat::InsSetArchitecture enum constant to a string. */
    const char* InsSetArchitecture(int64_t);

    /** Convert SgAsmExecutableFileFormat::InsSetArchitecture enum constant to a string. */
    std::string InsSetArchitecture(int64_t, const std::string &strip);

    /** Return all SgAsmExecutableFileFormat::InsSetArchitecture member values as a vector. */
    const std::vector<int64_t>& InsSetArchitecture();
}}

namespace Rose {
    std::string stringifySgAsmExecutableFileFormatInsSetArchitecture(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmExecutableFileFormatInsSetArchitecture();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/binaryInstruction.C line 16455
namespace stringify { namespace SgAsmExecutableFileFormat {
    /** Convert SgAsmExecutableFileFormat::ExecPurpose enum constant to a string. */
    const char* ExecPurpose(int64_t);

    /** Convert SgAsmExecutableFileFormat::ExecPurpose enum constant to a string. */
    std::string ExecPurpose(int64_t, const std::string &strip);

    /** Return all SgAsmExecutableFileFormat::ExecPurpose member values as a vector. */
    const std::vector<int64_t>& ExecPurpose();
}}

namespace Rose {
    std::string stringifySgAsmExecutableFileFormatExecPurpose(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmExecutableFileFormatExecPurpose();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/grammar.h line 88
namespace stringify {
    /** Convert ConstructParamEnum enum constant to a string. */
    const char* ConstructParamEnum(int64_t);

    /** Convert ConstructParamEnum enum constant to a string. */
    std::string ConstructParamEnum(int64_t, const std::string &strip);

    /** Return all ConstructParamEnum member values as a vector. */
    const std::vector<int64_t>& ConstructParamEnum();
}

namespace Rose {
    std::string stringifyConstructParamEnum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyConstructParamEnum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/grammar.h line 93
namespace stringify {
    /** Convert BuildAccessEnum enum constant to a string. */
    const char* BuildAccessEnum(int64_t);

    /** Convert BuildAccessEnum enum constant to a string. */
    std::string BuildAccessEnum(int64_t, const std::string &strip);

    /** Return all BuildAccessEnum member values as a vector. */
    const std::vector<int64_t>& BuildAccessEnum();
}

namespace Rose {
    std::string stringifyBuildAccessEnum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyBuildAccessEnum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/grammar.h line 101
namespace stringify {
    /** Convert CopyConfigEnum enum constant to a string. */
    const char* CopyConfigEnum(int64_t);

    /** Convert CopyConfigEnum enum constant to a string. */
    std::string CopyConfigEnum(int64_t, const std::string &strip);

    /** Return all CopyConfigEnum member values as a vector. */
    const std::vector<int64_t>& CopyConfigEnum();
}

namespace Rose {
    std::string stringifyCopyConfigEnum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyCopyConfigEnum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/grammar.h line 122
namespace stringify {
    /** Convert TraversalEnum enum constant to a string. */
    const char* TraversalEnum(int64_t);

    /** Convert TraversalEnum enum constant to a string. */
    std::string TraversalEnum(int64_t, const std::string &strip);

    /** Return all TraversalEnum member values as a vector. */
    const std::vector<int64_t>& TraversalEnum();
}

namespace Rose {
    std::string stringifyTraversalEnum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyTraversalEnum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /src/ROSETTA/src/grammar.h line 127
namespace stringify {
    /** Convert DeleteEnum enum constant to a string. */
    const char* DeleteEnum(int64_t);

    /** Convert DeleteEnum enum constant to a string. */
    std::string DeleteEnum(int64_t, const std::string &strip);

    /** Return all DeleteEnum member values as a vector. */
    const std::vector<int64_t>& DeleteEnum();
}

namespace Rose {
    std::string stringifyDeleteEnum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyDeleteEnum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 3
namespace stringify {
    /** Convert E_SgSourceFile enum constant to a string. */
    const char* E_SgSourceFile(int64_t);

    /** Convert E_SgSourceFile enum constant to a string. */
    std::string E_SgSourceFile(int64_t, const std::string &strip);

    /** Return all E_SgSourceFile member values as a vector. */
    const std::vector<int64_t>& E_SgSourceFile();
}

namespace Rose {
    std::string stringifyE_SgSourceFile(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSourceFile();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 6
namespace stringify {
    /** Convert E_SgBinaryComposite enum constant to a string. */
    const char* E_SgBinaryComposite(int64_t);

    /** Convert E_SgBinaryComposite enum constant to a string. */
    std::string E_SgBinaryComposite(int64_t, const std::string &strip);

    /** Return all E_SgBinaryComposite member values as a vector. */
    const std::vector<int64_t>& E_SgBinaryComposite();
}

namespace Rose {
    std::string stringifyE_SgBinaryComposite(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgBinaryComposite();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 9
namespace stringify {
    /** Convert E_SgUnknownFile enum constant to a string. */
    const char* E_SgUnknownFile(int64_t);

    /** Convert E_SgUnknownFile enum constant to a string. */
    std::string E_SgUnknownFile(int64_t, const std::string &strip);

    /** Return all E_SgUnknownFile member values as a vector. */
    const std::vector<int64_t>& E_SgUnknownFile();
}

namespace Rose {
    std::string stringifyE_SgUnknownFile(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUnknownFile();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 12
namespace stringify {
    /** Convert E_SgProject enum constant to a string. */
    const char* E_SgProject(int64_t);

    /** Convert E_SgProject enum constant to a string. */
    std::string E_SgProject(int64_t, const std::string &strip);

    /** Return all E_SgProject member values as a vector. */
    const std::vector<int64_t>& E_SgProject();
}

namespace Rose {
    std::string stringifyE_SgProject(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgProject();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 15
namespace stringify {
    /** Convert E_SgExpBaseClass enum constant to a string. */
    const char* E_SgExpBaseClass(int64_t);

    /** Convert E_SgExpBaseClass enum constant to a string. */
    std::string E_SgExpBaseClass(int64_t, const std::string &strip);

    /** Return all E_SgExpBaseClass member values as a vector. */
    const std::vector<int64_t>& E_SgExpBaseClass();
}

namespace Rose {
    std::string stringifyE_SgExpBaseClass(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgExpBaseClass();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 18
namespace stringify {
    /** Convert E_SgNonrealBaseClass enum constant to a string. */
    const char* E_SgNonrealBaseClass(int64_t);

    /** Convert E_SgNonrealBaseClass enum constant to a string. */
    std::string E_SgNonrealBaseClass(int64_t, const std::string &strip);

    /** Return all E_SgNonrealBaseClass member values as a vector. */
    const std::vector<int64_t>& E_SgNonrealBaseClass();
}

namespace Rose {
    std::string stringifyE_SgNonrealBaseClass(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgNonrealBaseClass();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 21
namespace stringify {
    /** Convert E_SgBaseClass enum constant to a string. */
    const char* E_SgBaseClass(int64_t);

    /** Convert E_SgBaseClass enum constant to a string. */
    std::string E_SgBaseClass(int64_t, const std::string &strip);

    /** Return all E_SgBaseClass member values as a vector. */
    const std::vector<int64_t>& E_SgBaseClass();
}

namespace Rose {
    std::string stringifyE_SgBaseClass(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgBaseClass();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 24
namespace stringify {
    /** Convert E_SgTemplateParameter enum constant to a string. */
    const char* E_SgTemplateParameter(int64_t);

    /** Convert E_SgTemplateParameter enum constant to a string. */
    std::string E_SgTemplateParameter(int64_t, const std::string &strip);

    /** Return all E_SgTemplateParameter member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateParameter();
}

namespace Rose {
    std::string stringifyE_SgTemplateParameter(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateParameter();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 27
namespace stringify {
    /** Convert E_SgTemplateArgument enum constant to a string. */
    const char* E_SgTemplateArgument(int64_t);

    /** Convert E_SgTemplateArgument enum constant to a string. */
    std::string E_SgTemplateArgument(int64_t, const std::string &strip);

    /** Return all E_SgTemplateArgument member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateArgument();
}

namespace Rose {
    std::string stringifyE_SgTemplateArgument(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateArgument();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 30
namespace stringify {
    /** Convert E_SgDirectory enum constant to a string. */
    const char* E_SgDirectory(int64_t);

    /** Convert E_SgDirectory enum constant to a string. */
    std::string E_SgDirectory(int64_t, const std::string &strip);

    /** Return all E_SgDirectory member values as a vector. */
    const std::vector<int64_t>& E_SgDirectory();
}

namespace Rose {
    std::string stringifyE_SgDirectory(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgDirectory();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 33
namespace stringify {
    /** Convert E_SgFileList enum constant to a string. */
    const char* E_SgFileList(int64_t);

    /** Convert E_SgFileList enum constant to a string. */
    std::string E_SgFileList(int64_t, const std::string &strip);

    /** Return all E_SgFileList member values as a vector. */
    const std::vector<int64_t>& E_SgFileList();
}

namespace Rose {
    std::string stringifyE_SgFileList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgFileList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 36
namespace stringify {
    /** Convert E_SgDirectoryList enum constant to a string. */
    const char* E_SgDirectoryList(int64_t);

    /** Convert E_SgDirectoryList enum constant to a string. */
    std::string E_SgDirectoryList(int64_t, const std::string &strip);

    /** Return all E_SgDirectoryList member values as a vector. */
    const std::vector<int64_t>& E_SgDirectoryList();
}

namespace Rose {
    std::string stringifyE_SgDirectoryList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgDirectoryList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 39
namespace stringify {
    /** Convert E_SgTemplateArgumentList enum constant to a string. */
    const char* E_SgTemplateArgumentList(int64_t);

    /** Convert E_SgTemplateArgumentList enum constant to a string. */
    std::string E_SgTemplateArgumentList(int64_t, const std::string &strip);

    /** Return all E_SgTemplateArgumentList member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateArgumentList();
}

namespace Rose {
    std::string stringifyE_SgTemplateArgumentList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateArgumentList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 42
namespace stringify {
    /** Convert E_SgTemplateParameterList enum constant to a string. */
    const char* E_SgTemplateParameterList(int64_t);

    /** Convert E_SgTemplateParameterList enum constant to a string. */
    std::string E_SgTemplateParameterList(int64_t, const std::string &strip);

    /** Return all E_SgTemplateParameterList member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateParameterList();
}

namespace Rose {
    std::string stringifyE_SgTemplateParameterList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateParameterList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 45
namespace stringify {
    /** Convert E_SgIncludeFile enum constant to a string. */
    const char* E_SgIncludeFile(int64_t);

    /** Convert E_SgIncludeFile enum constant to a string. */
    std::string E_SgIncludeFile(int64_t, const std::string &strip);

    /** Return all E_SgIncludeFile member values as a vector. */
    const std::vector<int64_t>& E_SgIncludeFile();
}

namespace Rose {
    std::string stringifyE_SgIncludeFile(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgIncludeFile();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 48
namespace stringify {
    /** Convert E_SgJavaImportStatementList enum constant to a string. */
    const char* E_SgJavaImportStatementList(int64_t);

    /** Convert E_SgJavaImportStatementList enum constant to a string. */
    std::string E_SgJavaImportStatementList(int64_t, const std::string &strip);

    /** Return all E_SgJavaImportStatementList member values as a vector. */
    const std::vector<int64_t>& E_SgJavaImportStatementList();
}

namespace Rose {
    std::string stringifyE_SgJavaImportStatementList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgJavaImportStatementList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 51
namespace stringify {
    /** Convert E_SgJavaClassDeclarationList enum constant to a string. */
    const char* E_SgJavaClassDeclarationList(int64_t);

    /** Convert E_SgJavaClassDeclarationList enum constant to a string. */
    std::string E_SgJavaClassDeclarationList(int64_t, const std::string &strip);

    /** Return all E_SgJavaClassDeclarationList member values as a vector. */
    const std::vector<int64_t>& E_SgJavaClassDeclarationList();
}

namespace Rose {
    std::string stringifyE_SgJavaClassDeclarationList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgJavaClassDeclarationList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 54
namespace stringify {
    /** Convert E_SgTypeUnknown enum constant to a string. */
    const char* E_SgTypeUnknown(int64_t);

    /** Convert E_SgTypeUnknown enum constant to a string. */
    std::string E_SgTypeUnknown(int64_t, const std::string &strip);

    /** Return all E_SgTypeUnknown member values as a vector. */
    const std::vector<int64_t>& E_SgTypeUnknown();
}

namespace Rose {
    std::string stringifyE_SgTypeUnknown(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeUnknown();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 57
namespace stringify {
    /** Convert E_SgTypeChar enum constant to a string. */
    const char* E_SgTypeChar(int64_t);

    /** Convert E_SgTypeChar enum constant to a string. */
    std::string E_SgTypeChar(int64_t, const std::string &strip);

    /** Return all E_SgTypeChar member values as a vector. */
    const std::vector<int64_t>& E_SgTypeChar();
}

namespace Rose {
    std::string stringifyE_SgTypeChar(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeChar();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 60
namespace stringify {
    /** Convert E_SgTypeSignedChar enum constant to a string. */
    const char* E_SgTypeSignedChar(int64_t);

    /** Convert E_SgTypeSignedChar enum constant to a string. */
    std::string E_SgTypeSignedChar(int64_t, const std::string &strip);

    /** Return all E_SgTypeSignedChar member values as a vector. */
    const std::vector<int64_t>& E_SgTypeSignedChar();
}

namespace Rose {
    std::string stringifyE_SgTypeSignedChar(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeSignedChar();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 63
namespace stringify {
    /** Convert E_SgTypeUnsignedChar enum constant to a string. */
    const char* E_SgTypeUnsignedChar(int64_t);

    /** Convert E_SgTypeUnsignedChar enum constant to a string. */
    std::string E_SgTypeUnsignedChar(int64_t, const std::string &strip);

    /** Return all E_SgTypeUnsignedChar member values as a vector. */
    const std::vector<int64_t>& E_SgTypeUnsignedChar();
}

namespace Rose {
    std::string stringifyE_SgTypeUnsignedChar(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeUnsignedChar();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 66
namespace stringify {
    /** Convert E_SgTypeShort enum constant to a string. */
    const char* E_SgTypeShort(int64_t);

    /** Convert E_SgTypeShort enum constant to a string. */
    std::string E_SgTypeShort(int64_t, const std::string &strip);

    /** Return all E_SgTypeShort member values as a vector. */
    const std::vector<int64_t>& E_SgTypeShort();
}

namespace Rose {
    std::string stringifyE_SgTypeShort(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeShort();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 69
namespace stringify {
    /** Convert E_SgTypeSignedShort enum constant to a string. */
    const char* E_SgTypeSignedShort(int64_t);

    /** Convert E_SgTypeSignedShort enum constant to a string. */
    std::string E_SgTypeSignedShort(int64_t, const std::string &strip);

    /** Return all E_SgTypeSignedShort member values as a vector. */
    const std::vector<int64_t>& E_SgTypeSignedShort();
}

namespace Rose {
    std::string stringifyE_SgTypeSignedShort(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeSignedShort();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 72
namespace stringify {
    /** Convert E_SgTypeUnsignedShort enum constant to a string. */
    const char* E_SgTypeUnsignedShort(int64_t);

    /** Convert E_SgTypeUnsignedShort enum constant to a string. */
    std::string E_SgTypeUnsignedShort(int64_t, const std::string &strip);

    /** Return all E_SgTypeUnsignedShort member values as a vector. */
    const std::vector<int64_t>& E_SgTypeUnsignedShort();
}

namespace Rose {
    std::string stringifyE_SgTypeUnsignedShort(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeUnsignedShort();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 75
namespace stringify {
    /** Convert E_SgTypeInt enum constant to a string. */
    const char* E_SgTypeInt(int64_t);

    /** Convert E_SgTypeInt enum constant to a string. */
    std::string E_SgTypeInt(int64_t, const std::string &strip);

    /** Return all E_SgTypeInt member values as a vector. */
    const std::vector<int64_t>& E_SgTypeInt();
}

namespace Rose {
    std::string stringifyE_SgTypeInt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeInt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 78
namespace stringify {
    /** Convert E_SgTypeSignedInt enum constant to a string. */
    const char* E_SgTypeSignedInt(int64_t);

    /** Convert E_SgTypeSignedInt enum constant to a string. */
    std::string E_SgTypeSignedInt(int64_t, const std::string &strip);

    /** Return all E_SgTypeSignedInt member values as a vector. */
    const std::vector<int64_t>& E_SgTypeSignedInt();
}

namespace Rose {
    std::string stringifyE_SgTypeSignedInt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeSignedInt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 81
namespace stringify {
    /** Convert E_SgTypeUnsignedInt enum constant to a string. */
    const char* E_SgTypeUnsignedInt(int64_t);

    /** Convert E_SgTypeUnsignedInt enum constant to a string. */
    std::string E_SgTypeUnsignedInt(int64_t, const std::string &strip);

    /** Return all E_SgTypeUnsignedInt member values as a vector. */
    const std::vector<int64_t>& E_SgTypeUnsignedInt();
}

namespace Rose {
    std::string stringifyE_SgTypeUnsignedInt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeUnsignedInt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 84
namespace stringify {
    /** Convert E_SgTypeLong enum constant to a string. */
    const char* E_SgTypeLong(int64_t);

    /** Convert E_SgTypeLong enum constant to a string. */
    std::string E_SgTypeLong(int64_t, const std::string &strip);

    /** Return all E_SgTypeLong member values as a vector. */
    const std::vector<int64_t>& E_SgTypeLong();
}

namespace Rose {
    std::string stringifyE_SgTypeLong(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeLong();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 87
namespace stringify {
    /** Convert E_SgTypeSignedLong enum constant to a string. */
    const char* E_SgTypeSignedLong(int64_t);

    /** Convert E_SgTypeSignedLong enum constant to a string. */
    std::string E_SgTypeSignedLong(int64_t, const std::string &strip);

    /** Return all E_SgTypeSignedLong member values as a vector. */
    const std::vector<int64_t>& E_SgTypeSignedLong();
}

namespace Rose {
    std::string stringifyE_SgTypeSignedLong(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeSignedLong();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 90
namespace stringify {
    /** Convert E_SgTypeUnsignedLong enum constant to a string. */
    const char* E_SgTypeUnsignedLong(int64_t);

    /** Convert E_SgTypeUnsignedLong enum constant to a string. */
    std::string E_SgTypeUnsignedLong(int64_t, const std::string &strip);

    /** Return all E_SgTypeUnsignedLong member values as a vector. */
    const std::vector<int64_t>& E_SgTypeUnsignedLong();
}

namespace Rose {
    std::string stringifyE_SgTypeUnsignedLong(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeUnsignedLong();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 93
namespace stringify {
    /** Convert E_SgTypeVoid enum constant to a string. */
    const char* E_SgTypeVoid(int64_t);

    /** Convert E_SgTypeVoid enum constant to a string. */
    std::string E_SgTypeVoid(int64_t, const std::string &strip);

    /** Return all E_SgTypeVoid member values as a vector. */
    const std::vector<int64_t>& E_SgTypeVoid();
}

namespace Rose {
    std::string stringifyE_SgTypeVoid(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeVoid();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 96
namespace stringify {
    /** Convert E_SgTypeGlobalVoid enum constant to a string. */
    const char* E_SgTypeGlobalVoid(int64_t);

    /** Convert E_SgTypeGlobalVoid enum constant to a string. */
    std::string E_SgTypeGlobalVoid(int64_t, const std::string &strip);

    /** Return all E_SgTypeGlobalVoid member values as a vector. */
    const std::vector<int64_t>& E_SgTypeGlobalVoid();
}

namespace Rose {
    std::string stringifyE_SgTypeGlobalVoid(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeGlobalVoid();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 99
namespace stringify {
    /** Convert E_SgTypeWchar enum constant to a string. */
    const char* E_SgTypeWchar(int64_t);

    /** Convert E_SgTypeWchar enum constant to a string. */
    std::string E_SgTypeWchar(int64_t, const std::string &strip);

    /** Return all E_SgTypeWchar member values as a vector. */
    const std::vector<int64_t>& E_SgTypeWchar();
}

namespace Rose {
    std::string stringifyE_SgTypeWchar(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeWchar();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 102
namespace stringify {
    /** Convert E_SgTypeFloat enum constant to a string. */
    const char* E_SgTypeFloat(int64_t);

    /** Convert E_SgTypeFloat enum constant to a string. */
    std::string E_SgTypeFloat(int64_t, const std::string &strip);

    /** Return all E_SgTypeFloat member values as a vector. */
    const std::vector<int64_t>& E_SgTypeFloat();
}

namespace Rose {
    std::string stringifyE_SgTypeFloat(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeFloat();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 105
namespace stringify {
    /** Convert E_SgTypeDouble enum constant to a string. */
    const char* E_SgTypeDouble(int64_t);

    /** Convert E_SgTypeDouble enum constant to a string. */
    std::string E_SgTypeDouble(int64_t, const std::string &strip);

    /** Return all E_SgTypeDouble member values as a vector. */
    const std::vector<int64_t>& E_SgTypeDouble();
}

namespace Rose {
    std::string stringifyE_SgTypeDouble(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeDouble();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 108
namespace stringify {
    /** Convert E_SgTypeLongLong enum constant to a string. */
    const char* E_SgTypeLongLong(int64_t);

    /** Convert E_SgTypeLongLong enum constant to a string. */
    std::string E_SgTypeLongLong(int64_t, const std::string &strip);

    /** Return all E_SgTypeLongLong member values as a vector. */
    const std::vector<int64_t>& E_SgTypeLongLong();
}

namespace Rose {
    std::string stringifyE_SgTypeLongLong(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeLongLong();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 111
namespace stringify {
    /** Convert E_SgTypeSignedLongLong enum constant to a string. */
    const char* E_SgTypeSignedLongLong(int64_t);

    /** Convert E_SgTypeSignedLongLong enum constant to a string. */
    std::string E_SgTypeSignedLongLong(int64_t, const std::string &strip);

    /** Return all E_SgTypeSignedLongLong member values as a vector. */
    const std::vector<int64_t>& E_SgTypeSignedLongLong();
}

namespace Rose {
    std::string stringifyE_SgTypeSignedLongLong(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeSignedLongLong();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 114
namespace stringify {
    /** Convert E_SgTypeUnsignedLongLong enum constant to a string. */
    const char* E_SgTypeUnsignedLongLong(int64_t);

    /** Convert E_SgTypeUnsignedLongLong enum constant to a string. */
    std::string E_SgTypeUnsignedLongLong(int64_t, const std::string &strip);

    /** Return all E_SgTypeUnsignedLongLong member values as a vector. */
    const std::vector<int64_t>& E_SgTypeUnsignedLongLong();
}

namespace Rose {
    std::string stringifyE_SgTypeUnsignedLongLong(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeUnsignedLongLong();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 117
namespace stringify {
    /** Convert E_SgTypeSigned128bitInteger enum constant to a string. */
    const char* E_SgTypeSigned128bitInteger(int64_t);

    /** Convert E_SgTypeSigned128bitInteger enum constant to a string. */
    std::string E_SgTypeSigned128bitInteger(int64_t, const std::string &strip);

    /** Return all E_SgTypeSigned128bitInteger member values as a vector. */
    const std::vector<int64_t>& E_SgTypeSigned128bitInteger();
}

namespace Rose {
    std::string stringifyE_SgTypeSigned128bitInteger(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeSigned128bitInteger();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 120
namespace stringify {
    /** Convert E_SgTypeUnsigned128bitInteger enum constant to a string. */
    const char* E_SgTypeUnsigned128bitInteger(int64_t);

    /** Convert E_SgTypeUnsigned128bitInteger enum constant to a string. */
    std::string E_SgTypeUnsigned128bitInteger(int64_t, const std::string &strip);

    /** Return all E_SgTypeUnsigned128bitInteger member values as a vector. */
    const std::vector<int64_t>& E_SgTypeUnsigned128bitInteger();
}

namespace Rose {
    std::string stringifyE_SgTypeUnsigned128bitInteger(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeUnsigned128bitInteger();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 123
namespace stringify {
    /** Convert E_SgTypeFloat80 enum constant to a string. */
    const char* E_SgTypeFloat80(int64_t);

    /** Convert E_SgTypeFloat80 enum constant to a string. */
    std::string E_SgTypeFloat80(int64_t, const std::string &strip);

    /** Return all E_SgTypeFloat80 member values as a vector. */
    const std::vector<int64_t>& E_SgTypeFloat80();
}

namespace Rose {
    std::string stringifyE_SgTypeFloat80(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeFloat80();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 126
namespace stringify {
    /** Convert E_SgTypeLongDouble enum constant to a string. */
    const char* E_SgTypeLongDouble(int64_t);

    /** Convert E_SgTypeLongDouble enum constant to a string. */
    std::string E_SgTypeLongDouble(int64_t, const std::string &strip);

    /** Return all E_SgTypeLongDouble member values as a vector. */
    const std::vector<int64_t>& E_SgTypeLongDouble();
}

namespace Rose {
    std::string stringifyE_SgTypeLongDouble(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeLongDouble();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 129
namespace stringify {
    /** Convert E_SgTypeString enum constant to a string. */
    const char* E_SgTypeString(int64_t);

    /** Convert E_SgTypeString enum constant to a string. */
    std::string E_SgTypeString(int64_t, const std::string &strip);

    /** Return all E_SgTypeString member values as a vector. */
    const std::vector<int64_t>& E_SgTypeString();
}

namespace Rose {
    std::string stringifyE_SgTypeString(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeString();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 132
namespace stringify {
    /** Convert E_SgTypeBool enum constant to a string. */
    const char* E_SgTypeBool(int64_t);

    /** Convert E_SgTypeBool enum constant to a string. */
    std::string E_SgTypeBool(int64_t, const std::string &strip);

    /** Return all E_SgTypeBool member values as a vector. */
    const std::vector<int64_t>& E_SgTypeBool();
}

namespace Rose {
    std::string stringifyE_SgTypeBool(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeBool();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 135
namespace stringify {
    /** Convert E_SgPointerMemberType enum constant to a string. */
    const char* E_SgPointerMemberType(int64_t);

    /** Convert E_SgPointerMemberType enum constant to a string. */
    std::string E_SgPointerMemberType(int64_t, const std::string &strip);

    /** Return all E_SgPointerMemberType member values as a vector. */
    const std::vector<int64_t>& E_SgPointerMemberType();
}

namespace Rose {
    std::string stringifyE_SgPointerMemberType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgPointerMemberType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 138
namespace stringify {
    /** Convert E_SgPointerType enum constant to a string. */
    const char* E_SgPointerType(int64_t);

    /** Convert E_SgPointerType enum constant to a string. */
    std::string E_SgPointerType(int64_t, const std::string &strip);

    /** Return all E_SgPointerType member values as a vector. */
    const std::vector<int64_t>& E_SgPointerType();
}

namespace Rose {
    std::string stringifyE_SgPointerType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgPointerType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 141
namespace stringify {
    /** Convert E_SgReferenceType enum constant to a string. */
    const char* E_SgReferenceType(int64_t);

    /** Convert E_SgReferenceType enum constant to a string. */
    std::string E_SgReferenceType(int64_t, const std::string &strip);

    /** Return all E_SgReferenceType member values as a vector. */
    const std::vector<int64_t>& E_SgReferenceType();
}

namespace Rose {
    std::string stringifyE_SgReferenceType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgReferenceType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 144
namespace stringify {
    /** Convert E_SgJavaParameterType enum constant to a string. */
    const char* E_SgJavaParameterType(int64_t);

    /** Convert E_SgJavaParameterType enum constant to a string. */
    std::string E_SgJavaParameterType(int64_t, const std::string &strip);

    /** Return all E_SgJavaParameterType member values as a vector. */
    const std::vector<int64_t>& E_SgJavaParameterType();
}

namespace Rose {
    std::string stringifyE_SgJavaParameterType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgJavaParameterType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 147
namespace stringify {
    /** Convert E_SgJovialTableType enum constant to a string. */
    const char* E_SgJovialTableType(int64_t);

    /** Convert E_SgJovialTableType enum constant to a string. */
    std::string E_SgJovialTableType(int64_t, const std::string &strip);

    /** Return all E_SgJovialTableType member values as a vector. */
    const std::vector<int64_t>& E_SgJovialTableType();
}

namespace Rose {
    std::string stringifyE_SgJovialTableType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgJovialTableType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 150
namespace stringify {
    /** Convert E_SgClassType enum constant to a string. */
    const char* E_SgClassType(int64_t);

    /** Convert E_SgClassType enum constant to a string. */
    std::string E_SgClassType(int64_t, const std::string &strip);

    /** Return all E_SgClassType member values as a vector. */
    const std::vector<int64_t>& E_SgClassType();
}

namespace Rose {
    std::string stringifyE_SgClassType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgClassType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 153
namespace stringify {
    /** Convert E_SgEnumType enum constant to a string. */
    const char* E_SgEnumType(int64_t);

    /** Convert E_SgEnumType enum constant to a string. */
    std::string E_SgEnumType(int64_t, const std::string &strip);

    /** Return all E_SgEnumType member values as a vector. */
    const std::vector<int64_t>& E_SgEnumType();
}

namespace Rose {
    std::string stringifyE_SgEnumType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgEnumType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 156
namespace stringify {
    /** Convert E_SgTypedefType enum constant to a string. */
    const char* E_SgTypedefType(int64_t);

    /** Convert E_SgTypedefType enum constant to a string. */
    std::string E_SgTypedefType(int64_t, const std::string &strip);

    /** Return all E_SgTypedefType member values as a vector. */
    const std::vector<int64_t>& E_SgTypedefType();
}

namespace Rose {
    std::string stringifyE_SgTypedefType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypedefType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 159
namespace stringify {
    /** Convert E_SgNonrealType enum constant to a string. */
    const char* E_SgNonrealType(int64_t);

    /** Convert E_SgNonrealType enum constant to a string. */
    std::string E_SgNonrealType(int64_t, const std::string &strip);

    /** Return all E_SgNonrealType member values as a vector. */
    const std::vector<int64_t>& E_SgNonrealType();
}

namespace Rose {
    std::string stringifyE_SgNonrealType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgNonrealType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 162
namespace stringify {
    /** Convert E_SgJavaParameterizedType enum constant to a string. */
    const char* E_SgJavaParameterizedType(int64_t);

    /** Convert E_SgJavaParameterizedType enum constant to a string. */
    std::string E_SgJavaParameterizedType(int64_t, const std::string &strip);

    /** Return all E_SgJavaParameterizedType member values as a vector. */
    const std::vector<int64_t>& E_SgJavaParameterizedType();
}

namespace Rose {
    std::string stringifyE_SgJavaParameterizedType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgJavaParameterizedType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 165
namespace stringify {
    /** Convert E_SgJavaQualifiedType enum constant to a string. */
    const char* E_SgJavaQualifiedType(int64_t);

    /** Convert E_SgJavaQualifiedType enum constant to a string. */
    std::string E_SgJavaQualifiedType(int64_t, const std::string &strip);

    /** Return all E_SgJavaQualifiedType member values as a vector. */
    const std::vector<int64_t>& E_SgJavaQualifiedType();
}

namespace Rose {
    std::string stringifyE_SgJavaQualifiedType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgJavaQualifiedType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 168
namespace stringify {
    /** Convert E_SgJavaWildcardType enum constant to a string. */
    const char* E_SgJavaWildcardType(int64_t);

    /** Convert E_SgJavaWildcardType enum constant to a string. */
    std::string E_SgJavaWildcardType(int64_t, const std::string &strip);

    /** Return all E_SgJavaWildcardType member values as a vector. */
    const std::vector<int64_t>& E_SgJavaWildcardType();
}

namespace Rose {
    std::string stringifyE_SgJavaWildcardType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgJavaWildcardType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 171
namespace stringify {
    /** Convert E_SgAdaTaskType enum constant to a string. */
    const char* E_SgAdaTaskType(int64_t);

    /** Convert E_SgAdaTaskType enum constant to a string. */
    std::string E_SgAdaTaskType(int64_t, const std::string &strip);

    /** Return all E_SgAdaTaskType member values as a vector. */
    const std::vector<int64_t>& E_SgAdaTaskType();
}

namespace Rose {
    std::string stringifyE_SgAdaTaskType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAdaTaskType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 174
namespace stringify {
    /** Convert E_SgNamedType enum constant to a string. */
    const char* E_SgNamedType(int64_t);

    /** Convert E_SgNamedType enum constant to a string. */
    std::string E_SgNamedType(int64_t, const std::string &strip);

    /** Return all E_SgNamedType member values as a vector. */
    const std::vector<int64_t>& E_SgNamedType();
}

namespace Rose {
    std::string stringifyE_SgNamedType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgNamedType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 177
namespace stringify {
    /** Convert E_SgModifierType enum constant to a string. */
    const char* E_SgModifierType(int64_t);

    /** Convert E_SgModifierType enum constant to a string. */
    std::string E_SgModifierType(int64_t, const std::string &strip);

    /** Return all E_SgModifierType member values as a vector. */
    const std::vector<int64_t>& E_SgModifierType();
}

namespace Rose {
    std::string stringifyE_SgModifierType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgModifierType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 180
namespace stringify {
    /** Convert E_SgPartialFunctionModifierType enum constant to a string. */
    const char* E_SgPartialFunctionModifierType(int64_t);

    /** Convert E_SgPartialFunctionModifierType enum constant to a string. */
    std::string E_SgPartialFunctionModifierType(int64_t, const std::string &strip);

    /** Return all E_SgPartialFunctionModifierType member values as a vector. */
    const std::vector<int64_t>& E_SgPartialFunctionModifierType();
}

namespace Rose {
    std::string stringifyE_SgPartialFunctionModifierType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgPartialFunctionModifierType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 183
namespace stringify {
    /** Convert E_SgPartialFunctionType enum constant to a string. */
    const char* E_SgPartialFunctionType(int64_t);

    /** Convert E_SgPartialFunctionType enum constant to a string. */
    std::string E_SgPartialFunctionType(int64_t, const std::string &strip);

    /** Return all E_SgPartialFunctionType member values as a vector. */
    const std::vector<int64_t>& E_SgPartialFunctionType();
}

namespace Rose {
    std::string stringifyE_SgPartialFunctionType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgPartialFunctionType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 186
namespace stringify {
    /** Convert E_SgMemberFunctionType enum constant to a string. */
    const char* E_SgMemberFunctionType(int64_t);

    /** Convert E_SgMemberFunctionType enum constant to a string. */
    std::string E_SgMemberFunctionType(int64_t, const std::string &strip);

    /** Return all E_SgMemberFunctionType member values as a vector. */
    const std::vector<int64_t>& E_SgMemberFunctionType();
}

namespace Rose {
    std::string stringifyE_SgMemberFunctionType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgMemberFunctionType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 189
namespace stringify {
    /** Convert E_SgFunctionType enum constant to a string. */
    const char* E_SgFunctionType(int64_t);

    /** Convert E_SgFunctionType enum constant to a string. */
    std::string E_SgFunctionType(int64_t, const std::string &strip);

    /** Return all E_SgFunctionType member values as a vector. */
    const std::vector<int64_t>& E_SgFunctionType();
}

namespace Rose {
    std::string stringifyE_SgFunctionType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgFunctionType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 192
namespace stringify {
    /** Convert E_SgArrayType enum constant to a string. */
    const char* E_SgArrayType(int64_t);

    /** Convert E_SgArrayType enum constant to a string. */
    std::string E_SgArrayType(int64_t, const std::string &strip);

    /** Return all E_SgArrayType member values as a vector. */
    const std::vector<int64_t>& E_SgArrayType();
}

namespace Rose {
    std::string stringifyE_SgArrayType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgArrayType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 195
namespace stringify {
    /** Convert E_SgTypeEllipse enum constant to a string. */
    const char* E_SgTypeEllipse(int64_t);

    /** Convert E_SgTypeEllipse enum constant to a string. */
    std::string E_SgTypeEllipse(int64_t, const std::string &strip);

    /** Return all E_SgTypeEllipse member values as a vector. */
    const std::vector<int64_t>& E_SgTypeEllipse();
}

namespace Rose {
    std::string stringifyE_SgTypeEllipse(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeEllipse();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 198
namespace stringify {
    /** Convert E_SgTemplateType enum constant to a string. */
    const char* E_SgTemplateType(int64_t);

    /** Convert E_SgTemplateType enum constant to a string. */
    std::string E_SgTemplateType(int64_t, const std::string &strip);

    /** Return all E_SgTemplateType member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateType();
}

namespace Rose {
    std::string stringifyE_SgTemplateType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 201
namespace stringify {
    /** Convert E_SgQualifiedNameType enum constant to a string. */
    const char* E_SgQualifiedNameType(int64_t);

    /** Convert E_SgQualifiedNameType enum constant to a string. */
    std::string E_SgQualifiedNameType(int64_t, const std::string &strip);

    /** Return all E_SgQualifiedNameType member values as a vector. */
    const std::vector<int64_t>& E_SgQualifiedNameType();
}

namespace Rose {
    std::string stringifyE_SgQualifiedNameType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgQualifiedNameType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 204
namespace stringify {
    /** Convert E_SgTypeComplex enum constant to a string. */
    const char* E_SgTypeComplex(int64_t);

    /** Convert E_SgTypeComplex enum constant to a string. */
    std::string E_SgTypeComplex(int64_t, const std::string &strip);

    /** Return all E_SgTypeComplex member values as a vector. */
    const std::vector<int64_t>& E_SgTypeComplex();
}

namespace Rose {
    std::string stringifyE_SgTypeComplex(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeComplex();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 207
namespace stringify {
    /** Convert E_SgTypeImaginary enum constant to a string. */
    const char* E_SgTypeImaginary(int64_t);

    /** Convert E_SgTypeImaginary enum constant to a string. */
    std::string E_SgTypeImaginary(int64_t, const std::string &strip);

    /** Return all E_SgTypeImaginary member values as a vector. */
    const std::vector<int64_t>& E_SgTypeImaginary();
}

namespace Rose {
    std::string stringifyE_SgTypeImaginary(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeImaginary();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 210
namespace stringify {
    /** Convert E_SgTypeDefault enum constant to a string. */
    const char* E_SgTypeDefault(int64_t);

    /** Convert E_SgTypeDefault enum constant to a string. */
    std::string E_SgTypeDefault(int64_t, const std::string &strip);

    /** Return all E_SgTypeDefault member values as a vector. */
    const std::vector<int64_t>& E_SgTypeDefault();
}

namespace Rose {
    std::string stringifyE_SgTypeDefault(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeDefault();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 213
namespace stringify {
    /** Convert E_SgTypeCAFTeam enum constant to a string. */
    const char* E_SgTypeCAFTeam(int64_t);

    /** Convert E_SgTypeCAFTeam enum constant to a string. */
    std::string E_SgTypeCAFTeam(int64_t, const std::string &strip);

    /** Return all E_SgTypeCAFTeam member values as a vector. */
    const std::vector<int64_t>& E_SgTypeCAFTeam();
}

namespace Rose {
    std::string stringifyE_SgTypeCAFTeam(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeCAFTeam();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 216
namespace stringify {
    /** Convert E_SgTypeCrayPointer enum constant to a string. */
    const char* E_SgTypeCrayPointer(int64_t);

    /** Convert E_SgTypeCrayPointer enum constant to a string. */
    std::string E_SgTypeCrayPointer(int64_t, const std::string &strip);

    /** Return all E_SgTypeCrayPointer member values as a vector. */
    const std::vector<int64_t>& E_SgTypeCrayPointer();
}

namespace Rose {
    std::string stringifyE_SgTypeCrayPointer(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeCrayPointer();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 219
namespace stringify {
    /** Convert E_SgTypeLabel enum constant to a string. */
    const char* E_SgTypeLabel(int64_t);

    /** Convert E_SgTypeLabel enum constant to a string. */
    std::string E_SgTypeLabel(int64_t, const std::string &strip);

    /** Return all E_SgTypeLabel member values as a vector. */
    const std::vector<int64_t>& E_SgTypeLabel();
}

namespace Rose {
    std::string stringifyE_SgTypeLabel(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeLabel();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 222
namespace stringify {
    /** Convert E_SgJavaUnionType enum constant to a string. */
    const char* E_SgJavaUnionType(int64_t);

    /** Convert E_SgJavaUnionType enum constant to a string. */
    std::string E_SgJavaUnionType(int64_t, const std::string &strip);

    /** Return all E_SgJavaUnionType member values as a vector. */
    const std::vector<int64_t>& E_SgJavaUnionType();
}

namespace Rose {
    std::string stringifyE_SgJavaUnionType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgJavaUnionType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 225
namespace stringify {
    /** Convert E_SgRvalueReferenceType enum constant to a string. */
    const char* E_SgRvalueReferenceType(int64_t);

    /** Convert E_SgRvalueReferenceType enum constant to a string. */
    std::string E_SgRvalueReferenceType(int64_t, const std::string &strip);

    /** Return all E_SgRvalueReferenceType member values as a vector. */
    const std::vector<int64_t>& E_SgRvalueReferenceType();
}

namespace Rose {
    std::string stringifyE_SgRvalueReferenceType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgRvalueReferenceType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 228
namespace stringify {
    /** Convert E_SgTypeNullptr enum constant to a string. */
    const char* E_SgTypeNullptr(int64_t);

    /** Convert E_SgTypeNullptr enum constant to a string. */
    std::string E_SgTypeNullptr(int64_t, const std::string &strip);

    /** Return all E_SgTypeNullptr member values as a vector. */
    const std::vector<int64_t>& E_SgTypeNullptr();
}

namespace Rose {
    std::string stringifyE_SgTypeNullptr(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeNullptr();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 231
namespace stringify {
    /** Convert E_SgDeclType enum constant to a string. */
    const char* E_SgDeclType(int64_t);

    /** Convert E_SgDeclType enum constant to a string. */
    std::string E_SgDeclType(int64_t, const std::string &strip);

    /** Return all E_SgDeclType member values as a vector. */
    const std::vector<int64_t>& E_SgDeclType();
}

namespace Rose {
    std::string stringifyE_SgDeclType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgDeclType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 234
namespace stringify {
    /** Convert E_SgTypeOfType enum constant to a string. */
    const char* E_SgTypeOfType(int64_t);

    /** Convert E_SgTypeOfType enum constant to a string. */
    std::string E_SgTypeOfType(int64_t, const std::string &strip);

    /** Return all E_SgTypeOfType member values as a vector. */
    const std::vector<int64_t>& E_SgTypeOfType();
}

namespace Rose {
    std::string stringifyE_SgTypeOfType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeOfType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 237
namespace stringify {
    /** Convert E_SgTypeMatrix enum constant to a string. */
    const char* E_SgTypeMatrix(int64_t);

    /** Convert E_SgTypeMatrix enum constant to a string. */
    std::string E_SgTypeMatrix(int64_t, const std::string &strip);

    /** Return all E_SgTypeMatrix member values as a vector. */
    const std::vector<int64_t>& E_SgTypeMatrix();
}

namespace Rose {
    std::string stringifyE_SgTypeMatrix(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeMatrix();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 240
namespace stringify {
    /** Convert E_SgTypeTuple enum constant to a string. */
    const char* E_SgTypeTuple(int64_t);

    /** Convert E_SgTypeTuple enum constant to a string. */
    std::string E_SgTypeTuple(int64_t, const std::string &strip);

    /** Return all E_SgTypeTuple member values as a vector. */
    const std::vector<int64_t>& E_SgTypeTuple();
}

namespace Rose {
    std::string stringifyE_SgTypeTuple(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeTuple();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 243
namespace stringify {
    /** Convert E_SgTypeChar16 enum constant to a string. */
    const char* E_SgTypeChar16(int64_t);

    /** Convert E_SgTypeChar16 enum constant to a string. */
    std::string E_SgTypeChar16(int64_t, const std::string &strip);

    /** Return all E_SgTypeChar16 member values as a vector. */
    const std::vector<int64_t>& E_SgTypeChar16();
}

namespace Rose {
    std::string stringifyE_SgTypeChar16(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeChar16();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 246
namespace stringify {
    /** Convert E_SgTypeChar32 enum constant to a string. */
    const char* E_SgTypeChar32(int64_t);

    /** Convert E_SgTypeChar32 enum constant to a string. */
    std::string E_SgTypeChar32(int64_t, const std::string &strip);

    /** Return all E_SgTypeChar32 member values as a vector. */
    const std::vector<int64_t>& E_SgTypeChar32();
}

namespace Rose {
    std::string stringifyE_SgTypeChar32(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeChar32();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 249
namespace stringify {
    /** Convert E_SgTypeFloat128 enum constant to a string. */
    const char* E_SgTypeFloat128(int64_t);

    /** Convert E_SgTypeFloat128 enum constant to a string. */
    std::string E_SgTypeFloat128(int64_t, const std::string &strip);

    /** Return all E_SgTypeFloat128 member values as a vector. */
    const std::vector<int64_t>& E_SgTypeFloat128();
}

namespace Rose {
    std::string stringifyE_SgTypeFloat128(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeFloat128();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 252
namespace stringify {
    /** Convert E_SgTypeFixed enum constant to a string. */
    const char* E_SgTypeFixed(int64_t);

    /** Convert E_SgTypeFixed enum constant to a string. */
    std::string E_SgTypeFixed(int64_t, const std::string &strip);

    /** Return all E_SgTypeFixed member values as a vector. */
    const std::vector<int64_t>& E_SgTypeFixed();
}

namespace Rose {
    std::string stringifyE_SgTypeFixed(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeFixed();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 255
namespace stringify {
    /** Convert E_SgAutoType enum constant to a string. */
    const char* E_SgAutoType(int64_t);

    /** Convert E_SgAutoType enum constant to a string. */
    std::string E_SgAutoType(int64_t, const std::string &strip);

    /** Return all E_SgAutoType member values as a vector. */
    const std::vector<int64_t>& E_SgAutoType();
}

namespace Rose {
    std::string stringifyE_SgAutoType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAutoType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 258
namespace stringify {
    /** Convert E_SgAdaAccessType enum constant to a string. */
    const char* E_SgAdaAccessType(int64_t);

    /** Convert E_SgAdaAccessType enum constant to a string. */
    std::string E_SgAdaAccessType(int64_t, const std::string &strip);

    /** Return all E_SgAdaAccessType member values as a vector. */
    const std::vector<int64_t>& E_SgAdaAccessType();
}

namespace Rose {
    std::string stringifyE_SgAdaAccessType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAdaAccessType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 261
namespace stringify {
    /** Convert E_SgAdaSubtype enum constant to a string. */
    const char* E_SgAdaSubtype(int64_t);

    /** Convert E_SgAdaSubtype enum constant to a string. */
    std::string E_SgAdaSubtype(int64_t, const std::string &strip);

    /** Return all E_SgAdaSubtype member values as a vector. */
    const std::vector<int64_t>& E_SgAdaSubtype();
}

namespace Rose {
    std::string stringifyE_SgAdaSubtype(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAdaSubtype();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 264
namespace stringify {
    /** Convert E_SgAdaFloatType enum constant to a string. */
    const char* E_SgAdaFloatType(int64_t);

    /** Convert E_SgAdaFloatType enum constant to a string. */
    std::string E_SgAdaFloatType(int64_t, const std::string &strip);

    /** Return all E_SgAdaFloatType member values as a vector. */
    const std::vector<int64_t>& E_SgAdaFloatType();
}

namespace Rose {
    std::string stringifyE_SgAdaFloatType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAdaFloatType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 267
namespace stringify {
    /** Convert E_SgJovialBitType enum constant to a string. */
    const char* E_SgJovialBitType(int64_t);

    /** Convert E_SgJovialBitType enum constant to a string. */
    std::string E_SgJovialBitType(int64_t, const std::string &strip);

    /** Return all E_SgJovialBitType member values as a vector. */
    const std::vector<int64_t>& E_SgJovialBitType();
}

namespace Rose {
    std::string stringifyE_SgJovialBitType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgJovialBitType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 270
namespace stringify {
    /** Convert E_SgType enum constant to a string. */
    const char* E_SgType(int64_t);

    /** Convert E_SgType enum constant to a string. */
    std::string E_SgType(int64_t, const std::string &strip);

    /** Return all E_SgType member values as a vector. */
    const std::vector<int64_t>& E_SgType();
}

namespace Rose {
    std::string stringifyE_SgType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 273
namespace stringify {
    /** Convert E_SgCommonBlockObject enum constant to a string. */
    const char* E_SgCommonBlockObject(int64_t);

    /** Convert E_SgCommonBlockObject enum constant to a string. */
    std::string E_SgCommonBlockObject(int64_t, const std::string &strip);

    /** Return all E_SgCommonBlockObject member values as a vector. */
    const std::vector<int64_t>& E_SgCommonBlockObject();
}

namespace Rose {
    std::string stringifyE_SgCommonBlockObject(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgCommonBlockObject();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 276
namespace stringify {
    /** Convert E_SgInitializedName enum constant to a string. */
    const char* E_SgInitializedName(int64_t);

    /** Convert E_SgInitializedName enum constant to a string. */
    std::string E_SgInitializedName(int64_t, const std::string &strip);

    /** Return all E_SgInitializedName member values as a vector. */
    const std::vector<int64_t>& E_SgInitializedName();
}

namespace Rose {
    std::string stringifyE_SgInitializedName(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgInitializedName();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 279
namespace stringify {
    /** Convert E_SgJavaMemberValuePair enum constant to a string. */
    const char* E_SgJavaMemberValuePair(int64_t);

    /** Convert E_SgJavaMemberValuePair enum constant to a string. */
    std::string E_SgJavaMemberValuePair(int64_t, const std::string &strip);

    /** Return all E_SgJavaMemberValuePair member values as a vector. */
    const std::vector<int64_t>& E_SgJavaMemberValuePair();
}

namespace Rose {
    std::string stringifyE_SgJavaMemberValuePair(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgJavaMemberValuePair();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 282
namespace stringify {
    /** Convert E_SgOmpOrderedClause enum constant to a string. */
    const char* E_SgOmpOrderedClause(int64_t);

    /** Convert E_SgOmpOrderedClause enum constant to a string. */
    std::string E_SgOmpOrderedClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpOrderedClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpOrderedClause();
}

namespace Rose {
    std::string stringifyE_SgOmpOrderedClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpOrderedClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 285
namespace stringify {
    /** Convert E_SgOmpCollapseClause enum constant to a string. */
    const char* E_SgOmpCollapseClause(int64_t);

    /** Convert E_SgOmpCollapseClause enum constant to a string. */
    std::string E_SgOmpCollapseClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpCollapseClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpCollapseClause();
}

namespace Rose {
    std::string stringifyE_SgOmpCollapseClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpCollapseClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 288
namespace stringify {
    /** Convert E_SgOmpIfClause enum constant to a string. */
    const char* E_SgOmpIfClause(int64_t);

    /** Convert E_SgOmpIfClause enum constant to a string. */
    std::string E_SgOmpIfClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpIfClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpIfClause();
}

namespace Rose {
    std::string stringifyE_SgOmpIfClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpIfClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 291
namespace stringify {
    /** Convert E_SgOmpNumThreadsClause enum constant to a string. */
    const char* E_SgOmpNumThreadsClause(int64_t);

    /** Convert E_SgOmpNumThreadsClause enum constant to a string. */
    std::string E_SgOmpNumThreadsClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpNumThreadsClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpNumThreadsClause();
}

namespace Rose {
    std::string stringifyE_SgOmpNumThreadsClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpNumThreadsClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 294
namespace stringify {
    /** Convert E_SgOmpDeviceClause enum constant to a string. */
    const char* E_SgOmpDeviceClause(int64_t);

    /** Convert E_SgOmpDeviceClause enum constant to a string. */
    std::string E_SgOmpDeviceClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpDeviceClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpDeviceClause();
}

namespace Rose {
    std::string stringifyE_SgOmpDeviceClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpDeviceClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 297
namespace stringify {
    /** Convert E_SgOmpSafelenClause enum constant to a string. */
    const char* E_SgOmpSafelenClause(int64_t);

    /** Convert E_SgOmpSafelenClause enum constant to a string. */
    std::string E_SgOmpSafelenClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpSafelenClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpSafelenClause();
}

namespace Rose {
    std::string stringifyE_SgOmpSafelenClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpSafelenClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 300
namespace stringify {
    /** Convert E_SgOmpSimdlenClause enum constant to a string. */
    const char* E_SgOmpSimdlenClause(int64_t);

    /** Convert E_SgOmpSimdlenClause enum constant to a string. */
    std::string E_SgOmpSimdlenClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpSimdlenClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpSimdlenClause();
}

namespace Rose {
    std::string stringifyE_SgOmpSimdlenClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpSimdlenClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 303
namespace stringify {
    /** Convert E_SgOmpFinalClause enum constant to a string. */
    const char* E_SgOmpFinalClause(int64_t);

    /** Convert E_SgOmpFinalClause enum constant to a string. */
    std::string E_SgOmpFinalClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpFinalClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpFinalClause();
}

namespace Rose {
    std::string stringifyE_SgOmpFinalClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpFinalClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 306
namespace stringify {
    /** Convert E_SgOmpPriorityClause enum constant to a string. */
    const char* E_SgOmpPriorityClause(int64_t);

    /** Convert E_SgOmpPriorityClause enum constant to a string. */
    std::string E_SgOmpPriorityClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpPriorityClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpPriorityClause();
}

namespace Rose {
    std::string stringifyE_SgOmpPriorityClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpPriorityClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 309
namespace stringify {
    /** Convert E_SgOmpExpressionClause enum constant to a string. */
    const char* E_SgOmpExpressionClause(int64_t);

    /** Convert E_SgOmpExpressionClause enum constant to a string. */
    std::string E_SgOmpExpressionClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpExpressionClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpExpressionClause();
}

namespace Rose {
    std::string stringifyE_SgOmpExpressionClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpExpressionClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 312
namespace stringify {
    /** Convert E_SgOmpCopyprivateClause enum constant to a string. */
    const char* E_SgOmpCopyprivateClause(int64_t);

    /** Convert E_SgOmpCopyprivateClause enum constant to a string. */
    std::string E_SgOmpCopyprivateClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpCopyprivateClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpCopyprivateClause();
}

namespace Rose {
    std::string stringifyE_SgOmpCopyprivateClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpCopyprivateClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 315
namespace stringify {
    /** Convert E_SgOmpPrivateClause enum constant to a string. */
    const char* E_SgOmpPrivateClause(int64_t);

    /** Convert E_SgOmpPrivateClause enum constant to a string. */
    std::string E_SgOmpPrivateClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpPrivateClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpPrivateClause();
}

namespace Rose {
    std::string stringifyE_SgOmpPrivateClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpPrivateClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 318
namespace stringify {
    /** Convert E_SgOmpFirstprivateClause enum constant to a string. */
    const char* E_SgOmpFirstprivateClause(int64_t);

    /** Convert E_SgOmpFirstprivateClause enum constant to a string. */
    std::string E_SgOmpFirstprivateClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpFirstprivateClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpFirstprivateClause();
}

namespace Rose {
    std::string stringifyE_SgOmpFirstprivateClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpFirstprivateClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 321
namespace stringify {
    /** Convert E_SgOmpSharedClause enum constant to a string. */
    const char* E_SgOmpSharedClause(int64_t);

    /** Convert E_SgOmpSharedClause enum constant to a string. */
    std::string E_SgOmpSharedClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpSharedClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpSharedClause();
}

namespace Rose {
    std::string stringifyE_SgOmpSharedClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpSharedClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 324
namespace stringify {
    /** Convert E_SgOmpCopyinClause enum constant to a string. */
    const char* E_SgOmpCopyinClause(int64_t);

    /** Convert E_SgOmpCopyinClause enum constant to a string. */
    std::string E_SgOmpCopyinClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpCopyinClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpCopyinClause();
}

namespace Rose {
    std::string stringifyE_SgOmpCopyinClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpCopyinClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 327
namespace stringify {
    /** Convert E_SgOmpLastprivateClause enum constant to a string. */
    const char* E_SgOmpLastprivateClause(int64_t);

    /** Convert E_SgOmpLastprivateClause enum constant to a string. */
    std::string E_SgOmpLastprivateClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpLastprivateClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpLastprivateClause();
}

namespace Rose {
    std::string stringifyE_SgOmpLastprivateClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpLastprivateClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 330
namespace stringify {
    /** Convert E_SgOmpReductionClause enum constant to a string. */
    const char* E_SgOmpReductionClause(int64_t);

    /** Convert E_SgOmpReductionClause enum constant to a string. */
    std::string E_SgOmpReductionClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpReductionClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpReductionClause();
}

namespace Rose {
    std::string stringifyE_SgOmpReductionClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpReductionClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 333
namespace stringify {
    /** Convert E_SgOmpMapClause enum constant to a string. */
    const char* E_SgOmpMapClause(int64_t);

    /** Convert E_SgOmpMapClause enum constant to a string. */
    std::string E_SgOmpMapClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpMapClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpMapClause();
}

namespace Rose {
    std::string stringifyE_SgOmpMapClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpMapClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 336
namespace stringify {
    /** Convert E_SgOmpUniformClause enum constant to a string. */
    const char* E_SgOmpUniformClause(int64_t);

    /** Convert E_SgOmpUniformClause enum constant to a string. */
    std::string E_SgOmpUniformClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpUniformClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpUniformClause();
}

namespace Rose {
    std::string stringifyE_SgOmpUniformClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpUniformClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 339
namespace stringify {
    /** Convert E_SgOmpAlignedClause enum constant to a string. */
    const char* E_SgOmpAlignedClause(int64_t);

    /** Convert E_SgOmpAlignedClause enum constant to a string. */
    std::string E_SgOmpAlignedClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpAlignedClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpAlignedClause();
}

namespace Rose {
    std::string stringifyE_SgOmpAlignedClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpAlignedClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 342
namespace stringify {
    /** Convert E_SgOmpLinearClause enum constant to a string. */
    const char* E_SgOmpLinearClause(int64_t);

    /** Convert E_SgOmpLinearClause enum constant to a string. */
    std::string E_SgOmpLinearClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpLinearClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpLinearClause();
}

namespace Rose {
    std::string stringifyE_SgOmpLinearClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpLinearClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 345
namespace stringify {
    /** Convert E_SgOmpDependClause enum constant to a string. */
    const char* E_SgOmpDependClause(int64_t);

    /** Convert E_SgOmpDependClause enum constant to a string. */
    std::string E_SgOmpDependClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpDependClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpDependClause();
}

namespace Rose {
    std::string stringifyE_SgOmpDependClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpDependClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 348
namespace stringify {
    /** Convert E_SgOmpVariablesClause enum constant to a string. */
    const char* E_SgOmpVariablesClause(int64_t);

    /** Convert E_SgOmpVariablesClause enum constant to a string. */
    std::string E_SgOmpVariablesClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpVariablesClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpVariablesClause();
}

namespace Rose {
    std::string stringifyE_SgOmpVariablesClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpVariablesClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 351
namespace stringify {
    /** Convert E_SgOmpScheduleClause enum constant to a string. */
    const char* E_SgOmpScheduleClause(int64_t);

    /** Convert E_SgOmpScheduleClause enum constant to a string. */
    std::string E_SgOmpScheduleClause(int64_t, const std::string &strip);

    /** Return all E_SgOmpScheduleClause member values as a vector. */
    const std::vector<int64_t>& E_SgOmpScheduleClause();
}

namespace Rose {
    std::string stringifyE_SgOmpScheduleClause(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpScheduleClause();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 354
namespace stringify {
    /** Convert E_SgUntypedUnaryOperator enum constant to a string. */
    const char* E_SgUntypedUnaryOperator(int64_t);

    /** Convert E_SgUntypedUnaryOperator enum constant to a string. */
    std::string E_SgUntypedUnaryOperator(int64_t, const std::string &strip);

    /** Return all E_SgUntypedUnaryOperator member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedUnaryOperator();
}

namespace Rose {
    std::string stringifyE_SgUntypedUnaryOperator(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedUnaryOperator();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 357
namespace stringify {
    /** Convert E_SgUntypedBinaryOperator enum constant to a string. */
    const char* E_SgUntypedBinaryOperator(int64_t);

    /** Convert E_SgUntypedBinaryOperator enum constant to a string. */
    std::string E_SgUntypedBinaryOperator(int64_t, const std::string &strip);

    /** Return all E_SgUntypedBinaryOperator member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedBinaryOperator();
}

namespace Rose {
    std::string stringifyE_SgUntypedBinaryOperator(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedBinaryOperator();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 360
namespace stringify {
    /** Convert E_SgUntypedExprListExpression enum constant to a string. */
    const char* E_SgUntypedExprListExpression(int64_t);

    /** Convert E_SgUntypedExprListExpression enum constant to a string. */
    std::string E_SgUntypedExprListExpression(int64_t, const std::string &strip);

    /** Return all E_SgUntypedExprListExpression member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedExprListExpression();
}

namespace Rose {
    std::string stringifyE_SgUntypedExprListExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedExprListExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 363
namespace stringify {
    /** Convert E_SgUntypedArrayReferenceExpression enum constant to a string. */
    const char* E_SgUntypedArrayReferenceExpression(int64_t);

    /** Convert E_SgUntypedArrayReferenceExpression enum constant to a string. */
    std::string E_SgUntypedArrayReferenceExpression(int64_t, const std::string &strip);

    /** Return all E_SgUntypedArrayReferenceExpression member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedArrayReferenceExpression();
}

namespace Rose {
    std::string stringifyE_SgUntypedArrayReferenceExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedArrayReferenceExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 366
namespace stringify {
    /** Convert E_SgUntypedSubscriptExpression enum constant to a string. */
    const char* E_SgUntypedSubscriptExpression(int64_t);

    /** Convert E_SgUntypedSubscriptExpression enum constant to a string. */
    std::string E_SgUntypedSubscriptExpression(int64_t, const std::string &strip);

    /** Return all E_SgUntypedSubscriptExpression member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedSubscriptExpression();
}

namespace Rose {
    std::string stringifyE_SgUntypedSubscriptExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedSubscriptExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 369
namespace stringify {
    /** Convert E_SgUntypedNamedExpression enum constant to a string. */
    const char* E_SgUntypedNamedExpression(int64_t);

    /** Convert E_SgUntypedNamedExpression enum constant to a string. */
    std::string E_SgUntypedNamedExpression(int64_t, const std::string &strip);

    /** Return all E_SgUntypedNamedExpression member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedNamedExpression();
}

namespace Rose {
    std::string stringifyE_SgUntypedNamedExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedNamedExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 372
namespace stringify {
    /** Convert E_SgUntypedNameListDeclaration enum constant to a string. */
    const char* E_SgUntypedNameListDeclaration(int64_t);

    /** Convert E_SgUntypedNameListDeclaration enum constant to a string. */
    std::string E_SgUntypedNameListDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgUntypedNameListDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedNameListDeclaration();
}

namespace Rose {
    std::string stringifyE_SgUntypedNameListDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedNameListDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 375
namespace stringify {
    /** Convert E_SgUntypedUseStatement enum constant to a string. */
    const char* E_SgUntypedUseStatement(int64_t);

    /** Convert E_SgUntypedUseStatement enum constant to a string. */
    std::string E_SgUntypedUseStatement(int64_t, const std::string &strip);

    /** Return all E_SgUntypedUseStatement member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedUseStatement();
}

namespace Rose {
    std::string stringifyE_SgUntypedUseStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedUseStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 378
namespace stringify {
    /** Convert E_SgUntypedVariableDeclaration enum constant to a string. */
    const char* E_SgUntypedVariableDeclaration(int64_t);

    /** Convert E_SgUntypedVariableDeclaration enum constant to a string. */
    std::string E_SgUntypedVariableDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgUntypedVariableDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedVariableDeclaration();
}

namespace Rose {
    std::string stringifyE_SgUntypedVariableDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedVariableDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 381
namespace stringify {
    /** Convert E_SgUntypedProgramHeaderDeclaration enum constant to a string. */
    const char* E_SgUntypedProgramHeaderDeclaration(int64_t);

    /** Convert E_SgUntypedProgramHeaderDeclaration enum constant to a string. */
    std::string E_SgUntypedProgramHeaderDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgUntypedProgramHeaderDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedProgramHeaderDeclaration();
}

namespace Rose {
    std::string stringifyE_SgUntypedProgramHeaderDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedProgramHeaderDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 384
namespace stringify {
    /** Convert E_SgUntypedSubroutineDeclaration enum constant to a string. */
    const char* E_SgUntypedSubroutineDeclaration(int64_t);

    /** Convert E_SgUntypedSubroutineDeclaration enum constant to a string. */
    std::string E_SgUntypedSubroutineDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgUntypedSubroutineDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedSubroutineDeclaration();
}

namespace Rose {
    std::string stringifyE_SgUntypedSubroutineDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedSubroutineDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 387
namespace stringify {
    /** Convert E_SgUntypedInterfaceDeclaration enum constant to a string. */
    const char* E_SgUntypedInterfaceDeclaration(int64_t);

    /** Convert E_SgUntypedInterfaceDeclaration enum constant to a string. */
    std::string E_SgUntypedInterfaceDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgUntypedInterfaceDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedInterfaceDeclaration();
}

namespace Rose {
    std::string stringifyE_SgUntypedInterfaceDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedInterfaceDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 390
namespace stringify {
    /** Convert E_SgUntypedFunctionDeclaration enum constant to a string. */
    const char* E_SgUntypedFunctionDeclaration(int64_t);

    /** Convert E_SgUntypedFunctionDeclaration enum constant to a string. */
    std::string E_SgUntypedFunctionDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgUntypedFunctionDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedFunctionDeclaration();
}

namespace Rose {
    std::string stringifyE_SgUntypedFunctionDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedFunctionDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 393
namespace stringify {
    /** Convert E_SgUntypedModuleDeclaration enum constant to a string. */
    const char* E_SgUntypedModuleDeclaration(int64_t);

    /** Convert E_SgUntypedModuleDeclaration enum constant to a string. */
    std::string E_SgUntypedModuleDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgUntypedModuleDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedModuleDeclaration();
}

namespace Rose {
    std::string stringifyE_SgUntypedModuleDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedModuleDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 396
namespace stringify {
    /** Convert E_SgUntypedSubmoduleDeclaration enum constant to a string. */
    const char* E_SgUntypedSubmoduleDeclaration(int64_t);

    /** Convert E_SgUntypedSubmoduleDeclaration enum constant to a string. */
    std::string E_SgUntypedSubmoduleDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgUntypedSubmoduleDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedSubmoduleDeclaration();
}

namespace Rose {
    std::string stringifyE_SgUntypedSubmoduleDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedSubmoduleDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 399
namespace stringify {
    /** Convert E_SgUntypedBlockDataDeclaration enum constant to a string. */
    const char* E_SgUntypedBlockDataDeclaration(int64_t);

    /** Convert E_SgUntypedBlockDataDeclaration enum constant to a string. */
    std::string E_SgUntypedBlockDataDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgUntypedBlockDataDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedBlockDataDeclaration();
}

namespace Rose {
    std::string stringifyE_SgUntypedBlockDataDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedBlockDataDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 402
namespace stringify {
    /** Convert E_SgUntypedPackageDeclaration enum constant to a string. */
    const char* E_SgUntypedPackageDeclaration(int64_t);

    /** Convert E_SgUntypedPackageDeclaration enum constant to a string. */
    std::string E_SgUntypedPackageDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgUntypedPackageDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedPackageDeclaration();
}

namespace Rose {
    std::string stringifyE_SgUntypedPackageDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedPackageDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 405
namespace stringify {
    /** Convert E_SgUntypedStructureDeclaration enum constant to a string. */
    const char* E_SgUntypedStructureDeclaration(int64_t);

    /** Convert E_SgUntypedStructureDeclaration enum constant to a string. */
    std::string E_SgUntypedStructureDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgUntypedStructureDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedStructureDeclaration();
}

namespace Rose {
    std::string stringifyE_SgUntypedStructureDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedStructureDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 408
namespace stringify {
    /** Convert E_SgUntypedExceptionHandlerDeclaration enum constant to a string. */
    const char* E_SgUntypedExceptionHandlerDeclaration(int64_t);

    /** Convert E_SgUntypedExceptionHandlerDeclaration enum constant to a string. */
    std::string E_SgUntypedExceptionHandlerDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgUntypedExceptionHandlerDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedExceptionHandlerDeclaration();
}

namespace Rose {
    std::string stringifyE_SgUntypedExceptionHandlerDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedExceptionHandlerDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 411
namespace stringify {
    /** Convert E_SgUntypedExceptionDeclaration enum constant to a string. */
    const char* E_SgUntypedExceptionDeclaration(int64_t);

    /** Convert E_SgUntypedExceptionDeclaration enum constant to a string. */
    std::string E_SgUntypedExceptionDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgUntypedExceptionDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedExceptionDeclaration();
}

namespace Rose {
    std::string stringifyE_SgUntypedExceptionDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedExceptionDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 414
namespace stringify {
    /** Convert E_SgUntypedTaskDeclaration enum constant to a string. */
    const char* E_SgUntypedTaskDeclaration(int64_t);

    /** Convert E_SgUntypedTaskDeclaration enum constant to a string. */
    std::string E_SgUntypedTaskDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgUntypedTaskDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedTaskDeclaration();
}

namespace Rose {
    std::string stringifyE_SgUntypedTaskDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedTaskDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 417
namespace stringify {
    /** Convert E_SgUntypedUnitDeclaration enum constant to a string. */
    const char* E_SgUntypedUnitDeclaration(int64_t);

    /** Convert E_SgUntypedUnitDeclaration enum constant to a string. */
    std::string E_SgUntypedUnitDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgUntypedUnitDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedUnitDeclaration();
}

namespace Rose {
    std::string stringifyE_SgUntypedUnitDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedUnitDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 420
namespace stringify {
    /** Convert E_SgUntypedEnumDeclaration enum constant to a string. */
    const char* E_SgUntypedEnumDeclaration(int64_t);

    /** Convert E_SgUntypedEnumDeclaration enum constant to a string. */
    std::string E_SgUntypedEnumDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgUntypedEnumDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedEnumDeclaration();
}

namespace Rose {
    std::string stringifyE_SgUntypedEnumDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedEnumDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 423
namespace stringify {
    /** Convert E_SgUntypedInitializedNameListDeclaration enum constant to a string. */
    const char* E_SgUntypedInitializedNameListDeclaration(int64_t);

    /** Convert E_SgUntypedInitializedNameListDeclaration enum constant to a string. */
    std::string E_SgUntypedInitializedNameListDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgUntypedInitializedNameListDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedInitializedNameListDeclaration();
}

namespace Rose {
    std::string stringifyE_SgUntypedInitializedNameListDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedInitializedNameListDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 426
namespace stringify {
    /** Convert E_SgUntypedAssignmentStatement enum constant to a string. */
    const char* E_SgUntypedAssignmentStatement(int64_t);

    /** Convert E_SgUntypedAssignmentStatement enum constant to a string. */
    std::string E_SgUntypedAssignmentStatement(int64_t, const std::string &strip);

    /** Return all E_SgUntypedAssignmentStatement member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedAssignmentStatement();
}

namespace Rose {
    std::string stringifyE_SgUntypedAssignmentStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedAssignmentStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 429
namespace stringify {
    /** Convert E_SgUntypedBlockStatement enum constant to a string. */
    const char* E_SgUntypedBlockStatement(int64_t);

    /** Convert E_SgUntypedBlockStatement enum constant to a string. */
    std::string E_SgUntypedBlockStatement(int64_t, const std::string &strip);

    /** Return all E_SgUntypedBlockStatement member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedBlockStatement();
}

namespace Rose {
    std::string stringifyE_SgUntypedBlockStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedBlockStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 432
namespace stringify {
    /** Convert E_SgUntypedExpressionStatement enum constant to a string. */
    const char* E_SgUntypedExpressionStatement(int64_t);

    /** Convert E_SgUntypedExpressionStatement enum constant to a string. */
    std::string E_SgUntypedExpressionStatement(int64_t, const std::string &strip);

    /** Return all E_SgUntypedExpressionStatement member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedExpressionStatement();
}

namespace Rose {
    std::string stringifyE_SgUntypedExpressionStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedExpressionStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 435
namespace stringify {
    /** Convert E_SgUntypedFunctionCallStatement enum constant to a string. */
    const char* E_SgUntypedFunctionCallStatement(int64_t);

    /** Convert E_SgUntypedFunctionCallStatement enum constant to a string. */
    std::string E_SgUntypedFunctionCallStatement(int64_t, const std::string &strip);

    /** Return all E_SgUntypedFunctionCallStatement member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedFunctionCallStatement();
}

namespace Rose {
    std::string stringifyE_SgUntypedFunctionCallStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedFunctionCallStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 438
namespace stringify {
    /** Convert E_SgUntypedImageControlStatement enum constant to a string. */
    const char* E_SgUntypedImageControlStatement(int64_t);

    /** Convert E_SgUntypedImageControlStatement enum constant to a string. */
    std::string E_SgUntypedImageControlStatement(int64_t, const std::string &strip);

    /** Return all E_SgUntypedImageControlStatement member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedImageControlStatement();
}

namespace Rose {
    std::string stringifyE_SgUntypedImageControlStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedImageControlStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 441
namespace stringify {
    /** Convert E_SgUntypedFunctionScope enum constant to a string. */
    const char* E_SgUntypedFunctionScope(int64_t);

    /** Convert E_SgUntypedFunctionScope enum constant to a string. */
    std::string E_SgUntypedFunctionScope(int64_t, const std::string &strip);

    /** Return all E_SgUntypedFunctionScope member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedFunctionScope();
}

namespace Rose {
    std::string stringifyE_SgUntypedFunctionScope(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedFunctionScope();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 444
namespace stringify {
    /** Convert E_SgUntypedModuleScope enum constant to a string. */
    const char* E_SgUntypedModuleScope(int64_t);

    /** Convert E_SgUntypedModuleScope enum constant to a string. */
    std::string E_SgUntypedModuleScope(int64_t, const std::string &strip);

    /** Return all E_SgUntypedModuleScope member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedModuleScope();
}

namespace Rose {
    std::string stringifyE_SgUntypedModuleScope(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedModuleScope();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 447
namespace stringify {
    /** Convert E_SgUntypedGlobalScope enum constant to a string. */
    const char* E_SgUntypedGlobalScope(int64_t);

    /** Convert E_SgUntypedGlobalScope enum constant to a string. */
    std::string E_SgUntypedGlobalScope(int64_t, const std::string &strip);

    /** Return all E_SgUntypedGlobalScope member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedGlobalScope();
}

namespace Rose {
    std::string stringifyE_SgUntypedGlobalScope(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedGlobalScope();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 450
namespace stringify {
    /** Convert E_SgUntypedStructureDefinition enum constant to a string. */
    const char* E_SgUntypedStructureDefinition(int64_t);

    /** Convert E_SgUntypedStructureDefinition enum constant to a string. */
    std::string E_SgUntypedStructureDefinition(int64_t, const std::string &strip);

    /** Return all E_SgUntypedStructureDefinition member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedStructureDefinition();
}

namespace Rose {
    std::string stringifyE_SgUntypedStructureDefinition(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedStructureDefinition();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 453
namespace stringify {
    /** Convert E_SgUntypedScope enum constant to a string. */
    const char* E_SgUntypedScope(int64_t);

    /** Convert E_SgUntypedScope enum constant to a string. */
    std::string E_SgUntypedScope(int64_t, const std::string &strip);

    /** Return all E_SgUntypedScope member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedScope();
}

namespace Rose {
    std::string stringifyE_SgUntypedScope(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedScope();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 456
namespace stringify {
    /** Convert E_SgUntypedIfStatement enum constant to a string. */
    const char* E_SgUntypedIfStatement(int64_t);

    /** Convert E_SgUntypedIfStatement enum constant to a string. */
    std::string E_SgUntypedIfStatement(int64_t, const std::string &strip);

    /** Return all E_SgUntypedIfStatement member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedIfStatement();
}

namespace Rose {
    std::string stringifyE_SgUntypedIfStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedIfStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 459
namespace stringify {
    /** Convert E_SgUntypedCaseStatement enum constant to a string. */
    const char* E_SgUntypedCaseStatement(int64_t);

    /** Convert E_SgUntypedCaseStatement enum constant to a string. */
    std::string E_SgUntypedCaseStatement(int64_t, const std::string &strip);

    /** Return all E_SgUntypedCaseStatement member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedCaseStatement();
}

namespace Rose {
    std::string stringifyE_SgUntypedCaseStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedCaseStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 462
namespace stringify {
    /** Convert E_SgUntypedLabelStatement enum constant to a string. */
    const char* E_SgUntypedLabelStatement(int64_t);

    /** Convert E_SgUntypedLabelStatement enum constant to a string. */
    std::string E_SgUntypedLabelStatement(int64_t, const std::string &strip);

    /** Return all E_SgUntypedLabelStatement member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedLabelStatement();
}

namespace Rose {
    std::string stringifyE_SgUntypedLabelStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedLabelStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 465
namespace stringify {
    /** Convert E_SgUntypedWhileStatement enum constant to a string. */
    const char* E_SgUntypedWhileStatement(int64_t);

    /** Convert E_SgUntypedWhileStatement enum constant to a string. */
    std::string E_SgUntypedWhileStatement(int64_t, const std::string &strip);

    /** Return all E_SgUntypedWhileStatement member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedWhileStatement();
}

namespace Rose {
    std::string stringifyE_SgUntypedWhileStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedWhileStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 468
namespace stringify {
    /** Convert E_SgUntypedForStatement enum constant to a string. */
    const char* E_SgUntypedForStatement(int64_t);

    /** Convert E_SgUntypedForStatement enum constant to a string. */
    std::string E_SgUntypedForStatement(int64_t, const std::string &strip);

    /** Return all E_SgUntypedForStatement member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedForStatement();
}

namespace Rose {
    std::string stringifyE_SgUntypedForStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedForStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 471
namespace stringify {
    /** Convert E_SgUntypedReturnStatement enum constant to a string. */
    const char* E_SgUntypedReturnStatement(int64_t);

    /** Convert E_SgUntypedReturnStatement enum constant to a string. */
    std::string E_SgUntypedReturnStatement(int64_t, const std::string &strip);

    /** Return all E_SgUntypedReturnStatement member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedReturnStatement();
}

namespace Rose {
    std::string stringifyE_SgUntypedReturnStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedReturnStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 474
namespace stringify {
    /** Convert E_SgUntypedStopStatement enum constant to a string. */
    const char* E_SgUntypedStopStatement(int64_t);

    /** Convert E_SgUntypedStopStatement enum constant to a string. */
    std::string E_SgUntypedStopStatement(int64_t, const std::string &strip);

    /** Return all E_SgUntypedStopStatement member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedStopStatement();
}

namespace Rose {
    std::string stringifyE_SgUntypedStopStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedStopStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 477
namespace stringify {
    /** Convert E_SgUntypedForAllStatement enum constant to a string. */
    const char* E_SgUntypedForAllStatement(int64_t);

    /** Convert E_SgUntypedForAllStatement enum constant to a string. */
    std::string E_SgUntypedForAllStatement(int64_t, const std::string &strip);

    /** Return all E_SgUntypedForAllStatement member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedForAllStatement();
}

namespace Rose {
    std::string stringifyE_SgUntypedForAllStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedForAllStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 480
namespace stringify {
    /** Convert E_SgUntypedArrayType enum constant to a string. */
    const char* E_SgUntypedArrayType(int64_t);

    /** Convert E_SgUntypedArrayType enum constant to a string. */
    std::string E_SgUntypedArrayType(int64_t, const std::string &strip);

    /** Return all E_SgUntypedArrayType member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedArrayType();
}

namespace Rose {
    std::string stringifyE_SgUntypedArrayType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedArrayType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 483
namespace stringify {
    /** Convert E_SgUntypedTableType enum constant to a string. */
    const char* E_SgUntypedTableType(int64_t);

    /** Convert E_SgUntypedTableType enum constant to a string. */
    std::string E_SgUntypedTableType(int64_t, const std::string &strip);

    /** Return all E_SgUntypedTableType member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedTableType();
}

namespace Rose {
    std::string stringifyE_SgUntypedTableType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedTableType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 486
namespace stringify {
    /** Convert E_SgUntypedType enum constant to a string. */
    const char* E_SgUntypedType(int64_t);

    /** Convert E_SgUntypedType enum constant to a string. */
    std::string E_SgUntypedType(int64_t, const std::string &strip);

    /** Return all E_SgUntypedType member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedType();
}

namespace Rose {
    std::string stringifyE_SgUntypedType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 489
namespace stringify {
    /** Convert E_SgUntypedFile enum constant to a string. */
    const char* E_SgUntypedFile(int64_t);

    /** Convert E_SgUntypedFile enum constant to a string. */
    std::string E_SgUntypedFile(int64_t, const std::string &strip);

    /** Return all E_SgUntypedFile member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedFile();
}

namespace Rose {
    std::string stringifyE_SgUntypedFile(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedFile();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 492
namespace stringify {
    /** Convert E_SgUntypedStatementList enum constant to a string. */
    const char* E_SgUntypedStatementList(int64_t);

    /** Convert E_SgUntypedStatementList enum constant to a string. */
    std::string E_SgUntypedStatementList(int64_t, const std::string &strip);

    /** Return all E_SgUntypedStatementList member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedStatementList();
}

namespace Rose {
    std::string stringifyE_SgUntypedStatementList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedStatementList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 495
namespace stringify {
    /** Convert E_SgUntypedDeclarationStatementList enum constant to a string. */
    const char* E_SgUntypedDeclarationStatementList(int64_t);

    /** Convert E_SgUntypedDeclarationStatementList enum constant to a string. */
    std::string E_SgUntypedDeclarationStatementList(int64_t, const std::string &strip);

    /** Return all E_SgUntypedDeclarationStatementList member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedDeclarationStatementList();
}

namespace Rose {
    std::string stringifyE_SgUntypedDeclarationStatementList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedDeclarationStatementList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 498
namespace stringify {
    /** Convert E_SgUntypedFunctionDeclarationList enum constant to a string. */
    const char* E_SgUntypedFunctionDeclarationList(int64_t);

    /** Convert E_SgUntypedFunctionDeclarationList enum constant to a string. */
    std::string E_SgUntypedFunctionDeclarationList(int64_t, const std::string &strip);

    /** Return all E_SgUntypedFunctionDeclarationList member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedFunctionDeclarationList();
}

namespace Rose {
    std::string stringifyE_SgUntypedFunctionDeclarationList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedFunctionDeclarationList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 501
namespace stringify {
    /** Convert E_SgUntypedInitializedNameList enum constant to a string. */
    const char* E_SgUntypedInitializedNameList(int64_t);

    /** Convert E_SgUntypedInitializedNameList enum constant to a string. */
    std::string E_SgUntypedInitializedNameList(int64_t, const std::string &strip);

    /** Return all E_SgUntypedInitializedNameList member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedInitializedNameList();
}

namespace Rose {
    std::string stringifyE_SgUntypedInitializedNameList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedInitializedNameList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 504
namespace stringify {
    /** Convert E_SgUntypedNameList enum constant to a string. */
    const char* E_SgUntypedNameList(int64_t);

    /** Convert E_SgUntypedNameList enum constant to a string. */
    std::string E_SgUntypedNameList(int64_t, const std::string &strip);

    /** Return all E_SgUntypedNameList member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedNameList();
}

namespace Rose {
    std::string stringifyE_SgUntypedNameList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedNameList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 507
namespace stringify {
    /** Convert E_SgUntypedTokenList enum constant to a string. */
    const char* E_SgUntypedTokenList(int64_t);

    /** Convert E_SgUntypedTokenList enum constant to a string. */
    std::string E_SgUntypedTokenList(int64_t, const std::string &strip);

    /** Return all E_SgUntypedTokenList member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedTokenList();
}

namespace Rose {
    std::string stringifyE_SgUntypedTokenList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedTokenList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 510
namespace stringify {
    /** Convert E_SgUntypedTokenPairList enum constant to a string. */
    const char* E_SgUntypedTokenPairList(int64_t);

    /** Convert E_SgUntypedTokenPairList enum constant to a string. */
    std::string E_SgUntypedTokenPairList(int64_t, const std::string &strip);

    /** Return all E_SgUntypedTokenPairList member values as a vector. */
    const std::vector<int64_t>& E_SgUntypedTokenPairList();
}

namespace Rose {
    std::string stringifyE_SgUntypedTokenPairList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUntypedTokenPairList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 513
namespace stringify {
    /** Convert E_SgLambdaCapture enum constant to a string. */
    const char* E_SgLambdaCapture(int64_t);

    /** Convert E_SgLambdaCapture enum constant to a string. */
    std::string E_SgLambdaCapture(int64_t, const std::string &strip);

    /** Return all E_SgLambdaCapture member values as a vector. */
    const std::vector<int64_t>& E_SgLambdaCapture();
}

namespace Rose {
    std::string stringifyE_SgLambdaCapture(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgLambdaCapture();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 516
namespace stringify {
    /** Convert E_SgLambdaCaptureList enum constant to a string. */
    const char* E_SgLambdaCaptureList(int64_t);

    /** Convert E_SgLambdaCaptureList enum constant to a string. */
    std::string E_SgLambdaCaptureList(int64_t, const std::string &strip);

    /** Return all E_SgLambdaCaptureList member values as a vector. */
    const std::vector<int64_t>& E_SgLambdaCaptureList();
}

namespace Rose {
    std::string stringifyE_SgLambdaCaptureList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgLambdaCaptureList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 519
namespace stringify {
    /** Convert E_SgGlobal enum constant to a string. */
    const char* E_SgGlobal(int64_t);

    /** Convert E_SgGlobal enum constant to a string. */
    std::string E_SgGlobal(int64_t, const std::string &strip);

    /** Return all E_SgGlobal member values as a vector. */
    const std::vector<int64_t>& E_SgGlobal();
}

namespace Rose {
    std::string stringifyE_SgGlobal(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgGlobal();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 522
namespace stringify {
    /** Convert E_SgBasicBlock enum constant to a string. */
    const char* E_SgBasicBlock(int64_t);

    /** Convert E_SgBasicBlock enum constant to a string. */
    std::string E_SgBasicBlock(int64_t, const std::string &strip);

    /** Return all E_SgBasicBlock member values as a vector. */
    const std::vector<int64_t>& E_SgBasicBlock();
}

namespace Rose {
    std::string stringifyE_SgBasicBlock(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgBasicBlock();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 525
namespace stringify {
    /** Convert E_SgIfStmt enum constant to a string. */
    const char* E_SgIfStmt(int64_t);

    /** Convert E_SgIfStmt enum constant to a string. */
    std::string E_SgIfStmt(int64_t, const std::string &strip);

    /** Return all E_SgIfStmt member values as a vector. */
    const std::vector<int64_t>& E_SgIfStmt();
}

namespace Rose {
    std::string stringifyE_SgIfStmt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgIfStmt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 528
namespace stringify {
    /** Convert E_SgForStatement enum constant to a string. */
    const char* E_SgForStatement(int64_t);

    /** Convert E_SgForStatement enum constant to a string. */
    std::string E_SgForStatement(int64_t, const std::string &strip);

    /** Return all E_SgForStatement member values as a vector. */
    const std::vector<int64_t>& E_SgForStatement();
}

namespace Rose {
    std::string stringifyE_SgForStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgForStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 531
namespace stringify {
    /** Convert E_SgTemplateFunctionDefinition enum constant to a string. */
    const char* E_SgTemplateFunctionDefinition(int64_t);

    /** Convert E_SgTemplateFunctionDefinition enum constant to a string. */
    std::string E_SgTemplateFunctionDefinition(int64_t, const std::string &strip);

    /** Return all E_SgTemplateFunctionDefinition member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateFunctionDefinition();
}

namespace Rose {
    std::string stringifyE_SgTemplateFunctionDefinition(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateFunctionDefinition();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 534
namespace stringify {
    /** Convert E_SgFunctionDefinition enum constant to a string. */
    const char* E_SgFunctionDefinition(int64_t);

    /** Convert E_SgFunctionDefinition enum constant to a string. */
    std::string E_SgFunctionDefinition(int64_t, const std::string &strip);

    /** Return all E_SgFunctionDefinition member values as a vector. */
    const std::vector<int64_t>& E_SgFunctionDefinition();
}

namespace Rose {
    std::string stringifyE_SgFunctionDefinition(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgFunctionDefinition();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 537
namespace stringify {
    /** Convert E_SgTemplateInstantiationDefn enum constant to a string. */
    const char* E_SgTemplateInstantiationDefn(int64_t);

    /** Convert E_SgTemplateInstantiationDefn enum constant to a string. */
    std::string E_SgTemplateInstantiationDefn(int64_t, const std::string &strip);

    /** Return all E_SgTemplateInstantiationDefn member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateInstantiationDefn();
}

namespace Rose {
    std::string stringifyE_SgTemplateInstantiationDefn(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateInstantiationDefn();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 540
namespace stringify {
    /** Convert E_SgTemplateClassDefinition enum constant to a string. */
    const char* E_SgTemplateClassDefinition(int64_t);

    /** Convert E_SgTemplateClassDefinition enum constant to a string. */
    std::string E_SgTemplateClassDefinition(int64_t, const std::string &strip);

    /** Return all E_SgTemplateClassDefinition member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateClassDefinition();
}

namespace Rose {
    std::string stringifyE_SgTemplateClassDefinition(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateClassDefinition();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 543
namespace stringify {
    /** Convert E_SgClassDefinition enum constant to a string. */
    const char* E_SgClassDefinition(int64_t);

    /** Convert E_SgClassDefinition enum constant to a string. */
    std::string E_SgClassDefinition(int64_t, const std::string &strip);

    /** Return all E_SgClassDefinition member values as a vector. */
    const std::vector<int64_t>& E_SgClassDefinition();
}

namespace Rose {
    std::string stringifyE_SgClassDefinition(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgClassDefinition();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 546
namespace stringify {
    /** Convert E_SgWhileStmt enum constant to a string. */
    const char* E_SgWhileStmt(int64_t);

    /** Convert E_SgWhileStmt enum constant to a string. */
    std::string E_SgWhileStmt(int64_t, const std::string &strip);

    /** Return all E_SgWhileStmt member values as a vector. */
    const std::vector<int64_t>& E_SgWhileStmt();
}

namespace Rose {
    std::string stringifyE_SgWhileStmt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgWhileStmt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 549
namespace stringify {
    /** Convert E_SgDoWhileStmt enum constant to a string. */
    const char* E_SgDoWhileStmt(int64_t);

    /** Convert E_SgDoWhileStmt enum constant to a string. */
    std::string E_SgDoWhileStmt(int64_t, const std::string &strip);

    /** Return all E_SgDoWhileStmt member values as a vector. */
    const std::vector<int64_t>& E_SgDoWhileStmt();
}

namespace Rose {
    std::string stringifyE_SgDoWhileStmt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgDoWhileStmt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 552
namespace stringify {
    /** Convert E_SgSwitchStatement enum constant to a string. */
    const char* E_SgSwitchStatement(int64_t);

    /** Convert E_SgSwitchStatement enum constant to a string. */
    std::string E_SgSwitchStatement(int64_t, const std::string &strip);

    /** Return all E_SgSwitchStatement member values as a vector. */
    const std::vector<int64_t>& E_SgSwitchStatement();
}

namespace Rose {
    std::string stringifyE_SgSwitchStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSwitchStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 555
namespace stringify {
    /** Convert E_SgCatchOptionStmt enum constant to a string. */
    const char* E_SgCatchOptionStmt(int64_t);

    /** Convert E_SgCatchOptionStmt enum constant to a string. */
    std::string E_SgCatchOptionStmt(int64_t, const std::string &strip);

    /** Return all E_SgCatchOptionStmt member values as a vector. */
    const std::vector<int64_t>& E_SgCatchOptionStmt();
}

namespace Rose {
    std::string stringifyE_SgCatchOptionStmt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgCatchOptionStmt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 558
namespace stringify {
    /** Convert E_SgNamespaceDefinitionStatement enum constant to a string. */
    const char* E_SgNamespaceDefinitionStatement(int64_t);

    /** Convert E_SgNamespaceDefinitionStatement enum constant to a string. */
    std::string E_SgNamespaceDefinitionStatement(int64_t, const std::string &strip);

    /** Return all E_SgNamespaceDefinitionStatement member values as a vector. */
    const std::vector<int64_t>& E_SgNamespaceDefinitionStatement();
}

namespace Rose {
    std::string stringifyE_SgNamespaceDefinitionStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgNamespaceDefinitionStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 561
namespace stringify {
    /** Convert E_SgAssociateStatement enum constant to a string. */
    const char* E_SgAssociateStatement(int64_t);

    /** Convert E_SgAssociateStatement enum constant to a string. */
    std::string E_SgAssociateStatement(int64_t, const std::string &strip);

    /** Return all E_SgAssociateStatement member values as a vector. */
    const std::vector<int64_t>& E_SgAssociateStatement();
}

namespace Rose {
    std::string stringifyE_SgAssociateStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAssociateStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 564
namespace stringify {
    /** Convert E_SgFortranNonblockedDo enum constant to a string. */
    const char* E_SgFortranNonblockedDo(int64_t);

    /** Convert E_SgFortranNonblockedDo enum constant to a string. */
    std::string E_SgFortranNonblockedDo(int64_t, const std::string &strip);

    /** Return all E_SgFortranNonblockedDo member values as a vector. */
    const std::vector<int64_t>& E_SgFortranNonblockedDo();
}

namespace Rose {
    std::string stringifyE_SgFortranNonblockedDo(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgFortranNonblockedDo();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 567
namespace stringify {
    /** Convert E_SgFortranDo enum constant to a string. */
    const char* E_SgFortranDo(int64_t);

    /** Convert E_SgFortranDo enum constant to a string. */
    std::string E_SgFortranDo(int64_t, const std::string &strip);

    /** Return all E_SgFortranDo member values as a vector. */
    const std::vector<int64_t>& E_SgFortranDo();
}

namespace Rose {
    std::string stringifyE_SgFortranDo(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgFortranDo();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 570
namespace stringify {
    /** Convert E_SgForAllStatement enum constant to a string. */
    const char* E_SgForAllStatement(int64_t);

    /** Convert E_SgForAllStatement enum constant to a string. */
    std::string E_SgForAllStatement(int64_t, const std::string &strip);

    /** Return all E_SgForAllStatement member values as a vector. */
    const std::vector<int64_t>& E_SgForAllStatement();
}

namespace Rose {
    std::string stringifyE_SgForAllStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgForAllStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 573
namespace stringify {
    /** Convert E_SgUpcForAllStatement enum constant to a string. */
    const char* E_SgUpcForAllStatement(int64_t);

    /** Convert E_SgUpcForAllStatement enum constant to a string. */
    std::string E_SgUpcForAllStatement(int64_t, const std::string &strip);

    /** Return all E_SgUpcForAllStatement member values as a vector. */
    const std::vector<int64_t>& E_SgUpcForAllStatement();
}

namespace Rose {
    std::string stringifyE_SgUpcForAllStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUpcForAllStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 576
namespace stringify {
    /** Convert E_SgCAFWithTeamStatement enum constant to a string. */
    const char* E_SgCAFWithTeamStatement(int64_t);

    /** Convert E_SgCAFWithTeamStatement enum constant to a string. */
    std::string E_SgCAFWithTeamStatement(int64_t, const std::string &strip);

    /** Return all E_SgCAFWithTeamStatement member values as a vector. */
    const std::vector<int64_t>& E_SgCAFWithTeamStatement();
}

namespace Rose {
    std::string stringifyE_SgCAFWithTeamStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgCAFWithTeamStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 579
namespace stringify {
    /** Convert E_SgJavaForEachStatement enum constant to a string. */
    const char* E_SgJavaForEachStatement(int64_t);

    /** Convert E_SgJavaForEachStatement enum constant to a string. */
    std::string E_SgJavaForEachStatement(int64_t, const std::string &strip);

    /** Return all E_SgJavaForEachStatement member values as a vector. */
    const std::vector<int64_t>& E_SgJavaForEachStatement();
}

namespace Rose {
    std::string stringifyE_SgJavaForEachStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgJavaForEachStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 582
namespace stringify {
    /** Convert E_SgJavaLabelStatement enum constant to a string. */
    const char* E_SgJavaLabelStatement(int64_t);

    /** Convert E_SgJavaLabelStatement enum constant to a string. */
    std::string E_SgJavaLabelStatement(int64_t, const std::string &strip);

    /** Return all E_SgJavaLabelStatement member values as a vector. */
    const std::vector<int64_t>& E_SgJavaLabelStatement();
}

namespace Rose {
    std::string stringifyE_SgJavaLabelStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgJavaLabelStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 585
namespace stringify {
    /** Convert E_SgMatlabForStatement enum constant to a string. */
    const char* E_SgMatlabForStatement(int64_t);

    /** Convert E_SgMatlabForStatement enum constant to a string. */
    std::string E_SgMatlabForStatement(int64_t, const std::string &strip);

    /** Return all E_SgMatlabForStatement member values as a vector. */
    const std::vector<int64_t>& E_SgMatlabForStatement();
}

namespace Rose {
    std::string stringifyE_SgMatlabForStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgMatlabForStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 588
namespace stringify {
    /** Convert E_SgRangeBasedForStatement enum constant to a string. */
    const char* E_SgRangeBasedForStatement(int64_t);

    /** Convert E_SgRangeBasedForStatement enum constant to a string. */
    std::string E_SgRangeBasedForStatement(int64_t, const std::string &strip);

    /** Return all E_SgRangeBasedForStatement member values as a vector. */
    const std::vector<int64_t>& E_SgRangeBasedForStatement();
}

namespace Rose {
    std::string stringifyE_SgRangeBasedForStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgRangeBasedForStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 591
namespace stringify {
    /** Convert E_SgJovialForThenStatement enum constant to a string. */
    const char* E_SgJovialForThenStatement(int64_t);

    /** Convert E_SgJovialForThenStatement enum constant to a string. */
    std::string E_SgJovialForThenStatement(int64_t, const std::string &strip);

    /** Return all E_SgJovialForThenStatement member values as a vector. */
    const std::vector<int64_t>& E_SgJovialForThenStatement();
}

namespace Rose {
    std::string stringifyE_SgJovialForThenStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgJovialForThenStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 594
namespace stringify {
    /** Convert E_SgAdaAcceptStmt enum constant to a string. */
    const char* E_SgAdaAcceptStmt(int64_t);

    /** Convert E_SgAdaAcceptStmt enum constant to a string. */
    std::string E_SgAdaAcceptStmt(int64_t, const std::string &strip);

    /** Return all E_SgAdaAcceptStmt member values as a vector. */
    const std::vector<int64_t>& E_SgAdaAcceptStmt();
}

namespace Rose {
    std::string stringifyE_SgAdaAcceptStmt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAdaAcceptStmt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 597
namespace stringify {
    /** Convert E_SgAdaPackageSpec enum constant to a string. */
    const char* E_SgAdaPackageSpec(int64_t);

    /** Convert E_SgAdaPackageSpec enum constant to a string. */
    std::string E_SgAdaPackageSpec(int64_t, const std::string &strip);

    /** Return all E_SgAdaPackageSpec member values as a vector. */
    const std::vector<int64_t>& E_SgAdaPackageSpec();
}

namespace Rose {
    std::string stringifyE_SgAdaPackageSpec(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAdaPackageSpec();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 600
namespace stringify {
    /** Convert E_SgAdaPackageBody enum constant to a string. */
    const char* E_SgAdaPackageBody(int64_t);

    /** Convert E_SgAdaPackageBody enum constant to a string. */
    std::string E_SgAdaPackageBody(int64_t, const std::string &strip);

    /** Return all E_SgAdaPackageBody member values as a vector. */
    const std::vector<int64_t>& E_SgAdaPackageBody();
}

namespace Rose {
    std::string stringifyE_SgAdaPackageBody(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAdaPackageBody();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 603
namespace stringify {
    /** Convert E_SgAdaTaskSpec enum constant to a string. */
    const char* E_SgAdaTaskSpec(int64_t);

    /** Convert E_SgAdaTaskSpec enum constant to a string. */
    std::string E_SgAdaTaskSpec(int64_t, const std::string &strip);

    /** Return all E_SgAdaTaskSpec member values as a vector. */
    const std::vector<int64_t>& E_SgAdaTaskSpec();
}

namespace Rose {
    std::string stringifyE_SgAdaTaskSpec(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAdaTaskSpec();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 606
namespace stringify {
    /** Convert E_SgAdaTaskBody enum constant to a string. */
    const char* E_SgAdaTaskBody(int64_t);

    /** Convert E_SgAdaTaskBody enum constant to a string. */
    std::string E_SgAdaTaskBody(int64_t, const std::string &strip);

    /** Return all E_SgAdaTaskBody member values as a vector. */
    const std::vector<int64_t>& E_SgAdaTaskBody();
}

namespace Rose {
    std::string stringifyE_SgAdaTaskBody(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAdaTaskBody();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 609
namespace stringify {
    /** Convert E_SgFunctionParameterList enum constant to a string. */
    const char* E_SgFunctionParameterList(int64_t);

    /** Convert E_SgFunctionParameterList enum constant to a string. */
    std::string E_SgFunctionParameterList(int64_t, const std::string &strip);

    /** Return all E_SgFunctionParameterList member values as a vector. */
    const std::vector<int64_t>& E_SgFunctionParameterList();
}

namespace Rose {
    std::string stringifyE_SgFunctionParameterList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgFunctionParameterList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 612
namespace stringify {
    /** Convert E_SgTemplateVariableDeclaration enum constant to a string. */
    const char* E_SgTemplateVariableDeclaration(int64_t);

    /** Convert E_SgTemplateVariableDeclaration enum constant to a string. */
    std::string E_SgTemplateVariableDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgTemplateVariableDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateVariableDeclaration();
}

namespace Rose {
    std::string stringifyE_SgTemplateVariableDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateVariableDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 615
namespace stringify {
    /** Convert E_SgVariableDeclaration enum constant to a string. */
    const char* E_SgVariableDeclaration(int64_t);

    /** Convert E_SgVariableDeclaration enum constant to a string. */
    std::string E_SgVariableDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgVariableDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgVariableDeclaration();
}

namespace Rose {
    std::string stringifyE_SgVariableDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgVariableDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 618
namespace stringify {
    /** Convert E_SgVariableDefinition enum constant to a string. */
    const char* E_SgVariableDefinition(int64_t);

    /** Convert E_SgVariableDefinition enum constant to a string. */
    std::string E_SgVariableDefinition(int64_t, const std::string &strip);

    /** Return all E_SgVariableDefinition member values as a vector. */
    const std::vector<int64_t>& E_SgVariableDefinition();
}

namespace Rose {
    std::string stringifyE_SgVariableDefinition(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgVariableDefinition();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 621
namespace stringify {
    /** Convert E_SgEnumDeclaration enum constant to a string. */
    const char* E_SgEnumDeclaration(int64_t);

    /** Convert E_SgEnumDeclaration enum constant to a string. */
    std::string E_SgEnumDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgEnumDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgEnumDeclaration();
}

namespace Rose {
    std::string stringifyE_SgEnumDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgEnumDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 624
namespace stringify {
    /** Convert E_SgAsmStmt enum constant to a string. */
    const char* E_SgAsmStmt(int64_t);

    /** Convert E_SgAsmStmt enum constant to a string. */
    std::string E_SgAsmStmt(int64_t, const std::string &strip);

    /** Return all E_SgAsmStmt member values as a vector. */
    const std::vector<int64_t>& E_SgAsmStmt();
}

namespace Rose {
    std::string stringifyE_SgAsmStmt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmStmt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 627
namespace stringify {
    /** Convert E_SgTemplateInstantiationDirectiveStatement enum constant to a string. */
    const char* E_SgTemplateInstantiationDirectiveStatement(int64_t);

    /** Convert E_SgTemplateInstantiationDirectiveStatement enum constant to a string. */
    std::string E_SgTemplateInstantiationDirectiveStatement(int64_t, const std::string &strip);

    /** Return all E_SgTemplateInstantiationDirectiveStatement member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateInstantiationDirectiveStatement();
}

namespace Rose {
    std::string stringifyE_SgTemplateInstantiationDirectiveStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateInstantiationDirectiveStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 630
namespace stringify {
    /** Convert E_SgUseStatement enum constant to a string. */
    const char* E_SgUseStatement(int64_t);

    /** Convert E_SgUseStatement enum constant to a string. */
    std::string E_SgUseStatement(int64_t, const std::string &strip);

    /** Return all E_SgUseStatement member values as a vector. */
    const std::vector<int64_t>& E_SgUseStatement();
}

namespace Rose {
    std::string stringifyE_SgUseStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUseStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 633
namespace stringify {
    /** Convert E_SgNamespaceDeclarationStatement enum constant to a string. */
    const char* E_SgNamespaceDeclarationStatement(int64_t);

    /** Convert E_SgNamespaceDeclarationStatement enum constant to a string. */
    std::string E_SgNamespaceDeclarationStatement(int64_t, const std::string &strip);

    /** Return all E_SgNamespaceDeclarationStatement member values as a vector. */
    const std::vector<int64_t>& E_SgNamespaceDeclarationStatement();
}

namespace Rose {
    std::string stringifyE_SgNamespaceDeclarationStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgNamespaceDeclarationStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 636
namespace stringify {
    /** Convert E_SgInterfaceStatement enum constant to a string. */
    const char* E_SgInterfaceStatement(int64_t);

    /** Convert E_SgInterfaceStatement enum constant to a string. */
    std::string E_SgInterfaceStatement(int64_t, const std::string &strip);

    /** Return all E_SgInterfaceStatement member values as a vector. */
    const std::vector<int64_t>& E_SgInterfaceStatement();
}

namespace Rose {
    std::string stringifyE_SgInterfaceStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgInterfaceStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 639
namespace stringify {
    /** Convert E_SgCommonBlock enum constant to a string. */
    const char* E_SgCommonBlock(int64_t);

    /** Convert E_SgCommonBlock enum constant to a string. */
    std::string E_SgCommonBlock(int64_t, const std::string &strip);

    /** Return all E_SgCommonBlock member values as a vector. */
    const std::vector<int64_t>& E_SgCommonBlock();
}

namespace Rose {
    std::string stringifyE_SgCommonBlock(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgCommonBlock();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 642
namespace stringify {
    /** Convert E_SgTemplateTypedefDeclaration enum constant to a string. */
    const char* E_SgTemplateTypedefDeclaration(int64_t);

    /** Convert E_SgTemplateTypedefDeclaration enum constant to a string. */
    std::string E_SgTemplateTypedefDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgTemplateTypedefDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateTypedefDeclaration();
}

namespace Rose {
    std::string stringifyE_SgTemplateTypedefDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateTypedefDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 645
namespace stringify {
    /** Convert E_SgTemplateInstantiationTypedefDeclaration enum constant to a string. */
    const char* E_SgTemplateInstantiationTypedefDeclaration(int64_t);

    /** Convert E_SgTemplateInstantiationTypedefDeclaration enum constant to a string. */
    std::string E_SgTemplateInstantiationTypedefDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgTemplateInstantiationTypedefDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateInstantiationTypedefDeclaration();
}

namespace Rose {
    std::string stringifyE_SgTemplateInstantiationTypedefDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateInstantiationTypedefDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 648
namespace stringify {
    /** Convert E_SgTypedefDeclaration enum constant to a string. */
    const char* E_SgTypedefDeclaration(int64_t);

    /** Convert E_SgTypedefDeclaration enum constant to a string. */
    std::string E_SgTypedefDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgTypedefDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgTypedefDeclaration();
}

namespace Rose {
    std::string stringifyE_SgTypedefDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypedefDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 651
namespace stringify {
    /** Convert E_SgStatementFunctionStatement enum constant to a string. */
    const char* E_SgStatementFunctionStatement(int64_t);

    /** Convert E_SgStatementFunctionStatement enum constant to a string. */
    std::string E_SgStatementFunctionStatement(int64_t, const std::string &strip);

    /** Return all E_SgStatementFunctionStatement member values as a vector. */
    const std::vector<int64_t>& E_SgStatementFunctionStatement();
}

namespace Rose {
    std::string stringifyE_SgStatementFunctionStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgStatementFunctionStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 654
namespace stringify {
    /** Convert E_SgCtorInitializerList enum constant to a string. */
    const char* E_SgCtorInitializerList(int64_t);

    /** Convert E_SgCtorInitializerList enum constant to a string. */
    std::string E_SgCtorInitializerList(int64_t, const std::string &strip);

    /** Return all E_SgCtorInitializerList member values as a vector. */
    const std::vector<int64_t>& E_SgCtorInitializerList();
}

namespace Rose {
    std::string stringifyE_SgCtorInitializerList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgCtorInitializerList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 657
namespace stringify {
    /** Convert E_SgPragmaDeclaration enum constant to a string. */
    const char* E_SgPragmaDeclaration(int64_t);

    /** Convert E_SgPragmaDeclaration enum constant to a string. */
    std::string E_SgPragmaDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgPragmaDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgPragmaDeclaration();
}

namespace Rose {
    std::string stringifyE_SgPragmaDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgPragmaDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 660
namespace stringify {
    /** Convert E_SgTemplateClassDeclaration enum constant to a string. */
    const char* E_SgTemplateClassDeclaration(int64_t);

    /** Convert E_SgTemplateClassDeclaration enum constant to a string. */
    std::string E_SgTemplateClassDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgTemplateClassDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateClassDeclaration();
}

namespace Rose {
    std::string stringifyE_SgTemplateClassDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateClassDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 663
namespace stringify {
    /** Convert E_SgTemplateInstantiationDecl enum constant to a string. */
    const char* E_SgTemplateInstantiationDecl(int64_t);

    /** Convert E_SgTemplateInstantiationDecl enum constant to a string. */
    std::string E_SgTemplateInstantiationDecl(int64_t, const std::string &strip);

    /** Return all E_SgTemplateInstantiationDecl member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateInstantiationDecl();
}

namespace Rose {
    std::string stringifyE_SgTemplateInstantiationDecl(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateInstantiationDecl();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 666
namespace stringify {
    /** Convert E_SgDerivedTypeStatement enum constant to a string. */
    const char* E_SgDerivedTypeStatement(int64_t);

    /** Convert E_SgDerivedTypeStatement enum constant to a string. */
    std::string E_SgDerivedTypeStatement(int64_t, const std::string &strip);

    /** Return all E_SgDerivedTypeStatement member values as a vector. */
    const std::vector<int64_t>& E_SgDerivedTypeStatement();
}

namespace Rose {
    std::string stringifyE_SgDerivedTypeStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgDerivedTypeStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 669
namespace stringify {
    /** Convert E_SgModuleStatement enum constant to a string. */
    const char* E_SgModuleStatement(int64_t);

    /** Convert E_SgModuleStatement enum constant to a string. */
    std::string E_SgModuleStatement(int64_t, const std::string &strip);

    /** Return all E_SgModuleStatement member values as a vector. */
    const std::vector<int64_t>& E_SgModuleStatement();
}

namespace Rose {
    std::string stringifyE_SgModuleStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgModuleStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 672
namespace stringify {
    /** Convert E_SgJavaPackageDeclaration enum constant to a string. */
    const char* E_SgJavaPackageDeclaration(int64_t);

    /** Convert E_SgJavaPackageDeclaration enum constant to a string. */
    std::string E_SgJavaPackageDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgJavaPackageDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgJavaPackageDeclaration();
}

namespace Rose {
    std::string stringifyE_SgJavaPackageDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgJavaPackageDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 675
namespace stringify {
    /** Convert E_SgJovialTableStatement enum constant to a string. */
    const char* E_SgJovialTableStatement(int64_t);

    /** Convert E_SgJovialTableStatement enum constant to a string. */
    std::string E_SgJovialTableStatement(int64_t, const std::string &strip);

    /** Return all E_SgJovialTableStatement member values as a vector. */
    const std::vector<int64_t>& E_SgJovialTableStatement();
}

namespace Rose {
    std::string stringifyE_SgJovialTableStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgJovialTableStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 678
namespace stringify {
    /** Convert E_SgClassDeclaration enum constant to a string. */
    const char* E_SgClassDeclaration(int64_t);

    /** Convert E_SgClassDeclaration enum constant to a string. */
    std::string E_SgClassDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgClassDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgClassDeclaration();
}

namespace Rose {
    std::string stringifyE_SgClassDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgClassDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 681
namespace stringify {
    /** Convert E_SgImplicitStatement enum constant to a string. */
    const char* E_SgImplicitStatement(int64_t);

    /** Convert E_SgImplicitStatement enum constant to a string. */
    std::string E_SgImplicitStatement(int64_t, const std::string &strip);

    /** Return all E_SgImplicitStatement member values as a vector. */
    const std::vector<int64_t>& E_SgImplicitStatement();
}

namespace Rose {
    std::string stringifyE_SgImplicitStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgImplicitStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 684
namespace stringify {
    /** Convert E_SgTemplateFunctionDeclaration enum constant to a string. */
    const char* E_SgTemplateFunctionDeclaration(int64_t);

    /** Convert E_SgTemplateFunctionDeclaration enum constant to a string. */
    std::string E_SgTemplateFunctionDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgTemplateFunctionDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateFunctionDeclaration();
}

namespace Rose {
    std::string stringifyE_SgTemplateFunctionDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateFunctionDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 687
namespace stringify {
    /** Convert E_SgTemplateMemberFunctionDeclaration enum constant to a string. */
    const char* E_SgTemplateMemberFunctionDeclaration(int64_t);

    /** Convert E_SgTemplateMemberFunctionDeclaration enum constant to a string. */
    std::string E_SgTemplateMemberFunctionDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgTemplateMemberFunctionDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateMemberFunctionDeclaration();
}

namespace Rose {
    std::string stringifyE_SgTemplateMemberFunctionDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateMemberFunctionDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 690
namespace stringify {
    /** Convert E_SgTemplateInstantiationMemberFunctionDecl enum constant to a string. */
    const char* E_SgTemplateInstantiationMemberFunctionDecl(int64_t);

    /** Convert E_SgTemplateInstantiationMemberFunctionDecl enum constant to a string. */
    std::string E_SgTemplateInstantiationMemberFunctionDecl(int64_t, const std::string &strip);

    /** Return all E_SgTemplateInstantiationMemberFunctionDecl member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateInstantiationMemberFunctionDecl();
}

namespace Rose {
    std::string stringifyE_SgTemplateInstantiationMemberFunctionDecl(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateInstantiationMemberFunctionDecl();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 693
namespace stringify {
    /** Convert E_SgMemberFunctionDeclaration enum constant to a string. */
    const char* E_SgMemberFunctionDeclaration(int64_t);

    /** Convert E_SgMemberFunctionDeclaration enum constant to a string. */
    std::string E_SgMemberFunctionDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgMemberFunctionDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgMemberFunctionDeclaration();
}

namespace Rose {
    std::string stringifyE_SgMemberFunctionDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgMemberFunctionDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 696
namespace stringify {
    /** Convert E_SgTemplateInstantiationFunctionDecl enum constant to a string. */
    const char* E_SgTemplateInstantiationFunctionDecl(int64_t);

    /** Convert E_SgTemplateInstantiationFunctionDecl enum constant to a string. */
    std::string E_SgTemplateInstantiationFunctionDecl(int64_t, const std::string &strip);

    /** Return all E_SgTemplateInstantiationFunctionDecl member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateInstantiationFunctionDecl();
}

namespace Rose {
    std::string stringifyE_SgTemplateInstantiationFunctionDecl(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateInstantiationFunctionDecl();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 699
namespace stringify {
    /** Convert E_SgProgramHeaderStatement enum constant to a string. */
    const char* E_SgProgramHeaderStatement(int64_t);

    /** Convert E_SgProgramHeaderStatement enum constant to a string. */
    std::string E_SgProgramHeaderStatement(int64_t, const std::string &strip);

    /** Return all E_SgProgramHeaderStatement member values as a vector. */
    const std::vector<int64_t>& E_SgProgramHeaderStatement();
}

namespace Rose {
    std::string stringifyE_SgProgramHeaderStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgProgramHeaderStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 702
namespace stringify {
    /** Convert E_SgProcedureHeaderStatement enum constant to a string. */
    const char* E_SgProcedureHeaderStatement(int64_t);

    /** Convert E_SgProcedureHeaderStatement enum constant to a string. */
    std::string E_SgProcedureHeaderStatement(int64_t, const std::string &strip);

    /** Return all E_SgProcedureHeaderStatement member values as a vector. */
    const std::vector<int64_t>& E_SgProcedureHeaderStatement();
}

namespace Rose {
    std::string stringifyE_SgProcedureHeaderStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgProcedureHeaderStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 705
namespace stringify {
    /** Convert E_SgEntryStatement enum constant to a string. */
    const char* E_SgEntryStatement(int64_t);

    /** Convert E_SgEntryStatement enum constant to a string. */
    std::string E_SgEntryStatement(int64_t, const std::string &strip);

    /** Return all E_SgEntryStatement member values as a vector. */
    const std::vector<int64_t>& E_SgEntryStatement();
}

namespace Rose {
    std::string stringifyE_SgEntryStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgEntryStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 708
namespace stringify {
    /** Convert E_SgAdaEntryDecl enum constant to a string. */
    const char* E_SgAdaEntryDecl(int64_t);

    /** Convert E_SgAdaEntryDecl enum constant to a string. */
    std::string E_SgAdaEntryDecl(int64_t, const std::string &strip);

    /** Return all E_SgAdaEntryDecl member values as a vector. */
    const std::vector<int64_t>& E_SgAdaEntryDecl();
}

namespace Rose {
    std::string stringifyE_SgAdaEntryDecl(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAdaEntryDecl();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 711
namespace stringify {
    /** Convert E_SgFunctionDeclaration enum constant to a string. */
    const char* E_SgFunctionDeclaration(int64_t);

    /** Convert E_SgFunctionDeclaration enum constant to a string. */
    std::string E_SgFunctionDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgFunctionDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgFunctionDeclaration();
}

namespace Rose {
    std::string stringifyE_SgFunctionDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgFunctionDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 714
namespace stringify {
    /** Convert E_SgIncludeDirectiveStatement enum constant to a string. */
    const char* E_SgIncludeDirectiveStatement(int64_t);

    /** Convert E_SgIncludeDirectiveStatement enum constant to a string. */
    std::string E_SgIncludeDirectiveStatement(int64_t, const std::string &strip);

    /** Return all E_SgIncludeDirectiveStatement member values as a vector. */
    const std::vector<int64_t>& E_SgIncludeDirectiveStatement();
}

namespace Rose {
    std::string stringifyE_SgIncludeDirectiveStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgIncludeDirectiveStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 717
namespace stringify {
    /** Convert E_SgOmpThreadprivateStatement enum constant to a string. */
    const char* E_SgOmpThreadprivateStatement(int64_t);

    /** Convert E_SgOmpThreadprivateStatement enum constant to a string. */
    std::string E_SgOmpThreadprivateStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpThreadprivateStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpThreadprivateStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpThreadprivateStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpThreadprivateStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 720
namespace stringify {
    /** Convert E_SgStmtDeclarationStatement enum constant to a string. */
    const char* E_SgStmtDeclarationStatement(int64_t);

    /** Convert E_SgStmtDeclarationStatement enum constant to a string. */
    std::string E_SgStmtDeclarationStatement(int64_t, const std::string &strip);

    /** Return all E_SgStmtDeclarationStatement member values as a vector. */
    const std::vector<int64_t>& E_SgStmtDeclarationStatement();
}

namespace Rose {
    std::string stringifyE_SgStmtDeclarationStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgStmtDeclarationStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 723
namespace stringify {
    /** Convert E_SgStaticAssertionDeclaration enum constant to a string. */
    const char* E_SgStaticAssertionDeclaration(int64_t);

    /** Convert E_SgStaticAssertionDeclaration enum constant to a string. */
    std::string E_SgStaticAssertionDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgStaticAssertionDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgStaticAssertionDeclaration();
}

namespace Rose {
    std::string stringifyE_SgStaticAssertionDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgStaticAssertionDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 726
namespace stringify {
    /** Convert E_SgOmpDeclareSimdStatement enum constant to a string. */
    const char* E_SgOmpDeclareSimdStatement(int64_t);

    /** Convert E_SgOmpDeclareSimdStatement enum constant to a string. */
    std::string E_SgOmpDeclareSimdStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpDeclareSimdStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpDeclareSimdStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpDeclareSimdStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpDeclareSimdStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 729
namespace stringify {
    /** Convert E_SgJovialOverlayDeclaration enum constant to a string. */
    const char* E_SgJovialOverlayDeclaration(int64_t);

    /** Convert E_SgJovialOverlayDeclaration enum constant to a string. */
    std::string E_SgJovialOverlayDeclaration(int64_t, const std::string &strip);

    /** Return all E_SgJovialOverlayDeclaration member values as a vector. */
    const std::vector<int64_t>& E_SgJovialOverlayDeclaration();
}

namespace Rose {
    std::string stringifyE_SgJovialOverlayDeclaration(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgJovialOverlayDeclaration();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 732
namespace stringify {
    /** Convert E_SgAdaPackageBodyDecl enum constant to a string. */
    const char* E_SgAdaPackageBodyDecl(int64_t);

    /** Convert E_SgAdaPackageBodyDecl enum constant to a string. */
    std::string E_SgAdaPackageBodyDecl(int64_t, const std::string &strip);

    /** Return all E_SgAdaPackageBodyDecl member values as a vector. */
    const std::vector<int64_t>& E_SgAdaPackageBodyDecl();
}

namespace Rose {
    std::string stringifyE_SgAdaPackageBodyDecl(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAdaPackageBodyDecl();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 735
namespace stringify {
    /** Convert E_SgAdaPackageSpecDecl enum constant to a string. */
    const char* E_SgAdaPackageSpecDecl(int64_t);

    /** Convert E_SgAdaPackageSpecDecl enum constant to a string. */
    std::string E_SgAdaPackageSpecDecl(int64_t, const std::string &strip);

    /** Return all E_SgAdaPackageSpecDecl member values as a vector. */
    const std::vector<int64_t>& E_SgAdaPackageSpecDecl();
}

namespace Rose {
    std::string stringifyE_SgAdaPackageSpecDecl(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAdaPackageSpecDecl();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 738
namespace stringify {
    /** Convert E_SgAdaTaskSpecDecl enum constant to a string. */
    const char* E_SgAdaTaskSpecDecl(int64_t);

    /** Convert E_SgAdaTaskSpecDecl enum constant to a string. */
    std::string E_SgAdaTaskSpecDecl(int64_t, const std::string &strip);

    /** Return all E_SgAdaTaskSpecDecl member values as a vector. */
    const std::vector<int64_t>& E_SgAdaTaskSpecDecl();
}

namespace Rose {
    std::string stringifyE_SgAdaTaskSpecDecl(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAdaTaskSpecDecl();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 741
namespace stringify {
    /** Convert E_SgAdaTaskBodyDecl enum constant to a string. */
    const char* E_SgAdaTaskBodyDecl(int64_t);

    /** Convert E_SgAdaTaskBodyDecl enum constant to a string. */
    std::string E_SgAdaTaskBodyDecl(int64_t, const std::string &strip);

    /** Return all E_SgAdaTaskBodyDecl member values as a vector. */
    const std::vector<int64_t>& E_SgAdaTaskBodyDecl();
}

namespace Rose {
    std::string stringifyE_SgAdaTaskBodyDecl(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAdaTaskBodyDecl();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 744
namespace stringify {
    /** Convert E_SgAdaTaskTypeDecl enum constant to a string. */
    const char* E_SgAdaTaskTypeDecl(int64_t);

    /** Convert E_SgAdaTaskTypeDecl enum constant to a string. */
    std::string E_SgAdaTaskTypeDecl(int64_t, const std::string &strip);

    /** Return all E_SgAdaTaskTypeDecl member values as a vector. */
    const std::vector<int64_t>& E_SgAdaTaskTypeDecl();
}

namespace Rose {
    std::string stringifyE_SgAdaTaskTypeDecl(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAdaTaskTypeDecl();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 747
namespace stringify {
    /** Convert E_SgExprStatement enum constant to a string. */
    const char* E_SgExprStatement(int64_t);

    /** Convert E_SgExprStatement enum constant to a string. */
    std::string E_SgExprStatement(int64_t, const std::string &strip);

    /** Return all E_SgExprStatement member values as a vector. */
    const std::vector<int64_t>& E_SgExprStatement();
}

namespace Rose {
    std::string stringifyE_SgExprStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgExprStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 750
namespace stringify {
    /** Convert E_SgLabelStatement enum constant to a string. */
    const char* E_SgLabelStatement(int64_t);

    /** Convert E_SgLabelStatement enum constant to a string. */
    std::string E_SgLabelStatement(int64_t, const std::string &strip);

    /** Return all E_SgLabelStatement member values as a vector. */
    const std::vector<int64_t>& E_SgLabelStatement();
}

namespace Rose {
    std::string stringifyE_SgLabelStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgLabelStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 753
namespace stringify {
    /** Convert E_SgCaseOptionStmt enum constant to a string. */
    const char* E_SgCaseOptionStmt(int64_t);

    /** Convert E_SgCaseOptionStmt enum constant to a string. */
    std::string E_SgCaseOptionStmt(int64_t, const std::string &strip);

    /** Return all E_SgCaseOptionStmt member values as a vector. */
    const std::vector<int64_t>& E_SgCaseOptionStmt();
}

namespace Rose {
    std::string stringifyE_SgCaseOptionStmt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgCaseOptionStmt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 756
namespace stringify {
    /** Convert E_SgTryStmt enum constant to a string. */
    const char* E_SgTryStmt(int64_t);

    /** Convert E_SgTryStmt enum constant to a string. */
    std::string E_SgTryStmt(int64_t, const std::string &strip);

    /** Return all E_SgTryStmt member values as a vector. */
    const std::vector<int64_t>& E_SgTryStmt();
}

namespace Rose {
    std::string stringifyE_SgTryStmt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTryStmt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 759
namespace stringify {
    /** Convert E_SgDefaultOptionStmt enum constant to a string. */
    const char* E_SgDefaultOptionStmt(int64_t);

    /** Convert E_SgDefaultOptionStmt enum constant to a string. */
    std::string E_SgDefaultOptionStmt(int64_t, const std::string &strip);

    /** Return all E_SgDefaultOptionStmt member values as a vector. */
    const std::vector<int64_t>& E_SgDefaultOptionStmt();
}

namespace Rose {
    std::string stringifyE_SgDefaultOptionStmt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgDefaultOptionStmt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 762
namespace stringify {
    /** Convert E_SgReturnStmt enum constant to a string. */
    const char* E_SgReturnStmt(int64_t);

    /** Convert E_SgReturnStmt enum constant to a string. */
    std::string E_SgReturnStmt(int64_t, const std::string &strip);

    /** Return all E_SgReturnStmt member values as a vector. */
    const std::vector<int64_t>& E_SgReturnStmt();
}

namespace Rose {
    std::string stringifyE_SgReturnStmt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgReturnStmt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 765
namespace stringify {
    /** Convert E_SgSpawnStmt enum constant to a string. */
    const char* E_SgSpawnStmt(int64_t);

    /** Convert E_SgSpawnStmt enum constant to a string. */
    std::string E_SgSpawnStmt(int64_t, const std::string &strip);

    /** Return all E_SgSpawnStmt member values as a vector. */
    const std::vector<int64_t>& E_SgSpawnStmt();
}

namespace Rose {
    std::string stringifyE_SgSpawnStmt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSpawnStmt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 768
namespace stringify {
    /** Convert E_SgForInitStatement enum constant to a string. */
    const char* E_SgForInitStatement(int64_t);

    /** Convert E_SgForInitStatement enum constant to a string. */
    std::string E_SgForInitStatement(int64_t, const std::string &strip);

    /** Return all E_SgForInitStatement member values as a vector. */
    const std::vector<int64_t>& E_SgForInitStatement();
}

namespace Rose {
    std::string stringifyE_SgForInitStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgForInitStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 771
namespace stringify {
    /** Convert E_SgCatchStatementSeq enum constant to a string. */
    const char* E_SgCatchStatementSeq(int64_t);

    /** Convert E_SgCatchStatementSeq enum constant to a string. */
    std::string E_SgCatchStatementSeq(int64_t, const std::string &strip);

    /** Return all E_SgCatchStatementSeq member values as a vector. */
    const std::vector<int64_t>& E_SgCatchStatementSeq();
}

namespace Rose {
    std::string stringifyE_SgCatchStatementSeq(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgCatchStatementSeq();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 774
namespace stringify {
    /** Convert E_SgPrintStatement enum constant to a string. */
    const char* E_SgPrintStatement(int64_t);

    /** Convert E_SgPrintStatement enum constant to a string. */
    std::string E_SgPrintStatement(int64_t, const std::string &strip);

    /** Return all E_SgPrintStatement member values as a vector. */
    const std::vector<int64_t>& E_SgPrintStatement();
}

namespace Rose {
    std::string stringifyE_SgPrintStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgPrintStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 777
namespace stringify {
    /** Convert E_SgReadStatement enum constant to a string. */
    const char* E_SgReadStatement(int64_t);

    /** Convert E_SgReadStatement enum constant to a string. */
    std::string E_SgReadStatement(int64_t, const std::string &strip);

    /** Return all E_SgReadStatement member values as a vector. */
    const std::vector<int64_t>& E_SgReadStatement();
}

namespace Rose {
    std::string stringifyE_SgReadStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgReadStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 780
namespace stringify {
    /** Convert E_SgWriteStatement enum constant to a string. */
    const char* E_SgWriteStatement(int64_t);

    /** Convert E_SgWriteStatement enum constant to a string. */
    std::string E_SgWriteStatement(int64_t, const std::string &strip);

    /** Return all E_SgWriteStatement member values as a vector. */
    const std::vector<int64_t>& E_SgWriteStatement();
}

namespace Rose {
    std::string stringifyE_SgWriteStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgWriteStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 783
namespace stringify {
    /** Convert E_SgOpenStatement enum constant to a string. */
    const char* E_SgOpenStatement(int64_t);

    /** Convert E_SgOpenStatement enum constant to a string. */
    std::string E_SgOpenStatement(int64_t, const std::string &strip);

    /** Return all E_SgOpenStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOpenStatement();
}

namespace Rose {
    std::string stringifyE_SgOpenStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOpenStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 786
namespace stringify {
    /** Convert E_SgCloseStatement enum constant to a string. */
    const char* E_SgCloseStatement(int64_t);

    /** Convert E_SgCloseStatement enum constant to a string. */
    std::string E_SgCloseStatement(int64_t, const std::string &strip);

    /** Return all E_SgCloseStatement member values as a vector. */
    const std::vector<int64_t>& E_SgCloseStatement();
}

namespace Rose {
    std::string stringifyE_SgCloseStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgCloseStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 789
namespace stringify {
    /** Convert E_SgInquireStatement enum constant to a string. */
    const char* E_SgInquireStatement(int64_t);

    /** Convert E_SgInquireStatement enum constant to a string. */
    std::string E_SgInquireStatement(int64_t, const std::string &strip);

    /** Return all E_SgInquireStatement member values as a vector. */
    const std::vector<int64_t>& E_SgInquireStatement();
}

namespace Rose {
    std::string stringifyE_SgInquireStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgInquireStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 792
namespace stringify {
    /** Convert E_SgFlushStatement enum constant to a string. */
    const char* E_SgFlushStatement(int64_t);

    /** Convert E_SgFlushStatement enum constant to a string. */
    std::string E_SgFlushStatement(int64_t, const std::string &strip);

    /** Return all E_SgFlushStatement member values as a vector. */
    const std::vector<int64_t>& E_SgFlushStatement();
}

namespace Rose {
    std::string stringifyE_SgFlushStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgFlushStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 795
namespace stringify {
    /** Convert E_SgBackspaceStatement enum constant to a string. */
    const char* E_SgBackspaceStatement(int64_t);

    /** Convert E_SgBackspaceStatement enum constant to a string. */
    std::string E_SgBackspaceStatement(int64_t, const std::string &strip);

    /** Return all E_SgBackspaceStatement member values as a vector. */
    const std::vector<int64_t>& E_SgBackspaceStatement();
}

namespace Rose {
    std::string stringifyE_SgBackspaceStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgBackspaceStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 798
namespace stringify {
    /** Convert E_SgRewindStatement enum constant to a string. */
    const char* E_SgRewindStatement(int64_t);

    /** Convert E_SgRewindStatement enum constant to a string. */
    std::string E_SgRewindStatement(int64_t, const std::string &strip);

    /** Return all E_SgRewindStatement member values as a vector. */
    const std::vector<int64_t>& E_SgRewindStatement();
}

namespace Rose {
    std::string stringifyE_SgRewindStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgRewindStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 801
namespace stringify {
    /** Convert E_SgEndfileStatement enum constant to a string. */
    const char* E_SgEndfileStatement(int64_t);

    /** Convert E_SgEndfileStatement enum constant to a string. */
    std::string E_SgEndfileStatement(int64_t, const std::string &strip);

    /** Return all E_SgEndfileStatement member values as a vector. */
    const std::vector<int64_t>& E_SgEndfileStatement();
}

namespace Rose {
    std::string stringifyE_SgEndfileStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgEndfileStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 804
namespace stringify {
    /** Convert E_SgWaitStatement enum constant to a string. */
    const char* E_SgWaitStatement(int64_t);

    /** Convert E_SgWaitStatement enum constant to a string. */
    std::string E_SgWaitStatement(int64_t, const std::string &strip);

    /** Return all E_SgWaitStatement member values as a vector. */
    const std::vector<int64_t>& E_SgWaitStatement();
}

namespace Rose {
    std::string stringifyE_SgWaitStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgWaitStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 807
namespace stringify {
    /** Convert E_SgIOStatement enum constant to a string. */
    const char* E_SgIOStatement(int64_t);

    /** Convert E_SgIOStatement enum constant to a string. */
    std::string E_SgIOStatement(int64_t, const std::string &strip);

    /** Return all E_SgIOStatement member values as a vector. */
    const std::vector<int64_t>& E_SgIOStatement();
}

namespace Rose {
    std::string stringifyE_SgIOStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgIOStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 810
namespace stringify {
    /** Convert E_SgWhereStatement enum constant to a string. */
    const char* E_SgWhereStatement(int64_t);

    /** Convert E_SgWhereStatement enum constant to a string. */
    std::string E_SgWhereStatement(int64_t, const std::string &strip);

    /** Return all E_SgWhereStatement member values as a vector. */
    const std::vector<int64_t>& E_SgWhereStatement();
}

namespace Rose {
    std::string stringifyE_SgWhereStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgWhereStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 813
namespace stringify {
    /** Convert E_SgElseWhereStatement enum constant to a string. */
    const char* E_SgElseWhereStatement(int64_t);

    /** Convert E_SgElseWhereStatement enum constant to a string. */
    std::string E_SgElseWhereStatement(int64_t, const std::string &strip);

    /** Return all E_SgElseWhereStatement member values as a vector. */
    const std::vector<int64_t>& E_SgElseWhereStatement();
}

namespace Rose {
    std::string stringifyE_SgElseWhereStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgElseWhereStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 816
namespace stringify {
    /** Convert E_SgNullifyStatement enum constant to a string. */
    const char* E_SgNullifyStatement(int64_t);

    /** Convert E_SgNullifyStatement enum constant to a string. */
    std::string E_SgNullifyStatement(int64_t, const std::string &strip);

    /** Return all E_SgNullifyStatement member values as a vector. */
    const std::vector<int64_t>& E_SgNullifyStatement();
}

namespace Rose {
    std::string stringifyE_SgNullifyStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgNullifyStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 819
namespace stringify {
    /** Convert E_SgArithmeticIfStatement enum constant to a string. */
    const char* E_SgArithmeticIfStatement(int64_t);

    /** Convert E_SgArithmeticIfStatement enum constant to a string. */
    std::string E_SgArithmeticIfStatement(int64_t, const std::string &strip);

    /** Return all E_SgArithmeticIfStatement member values as a vector. */
    const std::vector<int64_t>& E_SgArithmeticIfStatement();
}

namespace Rose {
    std::string stringifyE_SgArithmeticIfStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgArithmeticIfStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 822
namespace stringify {
    /** Convert E_SgAssignStatement enum constant to a string. */
    const char* E_SgAssignStatement(int64_t);

    /** Convert E_SgAssignStatement enum constant to a string. */
    std::string E_SgAssignStatement(int64_t, const std::string &strip);

    /** Return all E_SgAssignStatement member values as a vector. */
    const std::vector<int64_t>& E_SgAssignStatement();
}

namespace Rose {
    std::string stringifyE_SgAssignStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAssignStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 825
namespace stringify {
    /** Convert E_SgComputedGotoStatement enum constant to a string. */
    const char* E_SgComputedGotoStatement(int64_t);

    /** Convert E_SgComputedGotoStatement enum constant to a string. */
    std::string E_SgComputedGotoStatement(int64_t, const std::string &strip);

    /** Return all E_SgComputedGotoStatement member values as a vector. */
    const std::vector<int64_t>& E_SgComputedGotoStatement();
}

namespace Rose {
    std::string stringifyE_SgComputedGotoStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgComputedGotoStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 828
namespace stringify {
    /** Convert E_SgAssignedGotoStatement enum constant to a string. */
    const char* E_SgAssignedGotoStatement(int64_t);

    /** Convert E_SgAssignedGotoStatement enum constant to a string. */
    std::string E_SgAssignedGotoStatement(int64_t, const std::string &strip);

    /** Return all E_SgAssignedGotoStatement member values as a vector. */
    const std::vector<int64_t>& E_SgAssignedGotoStatement();
}

namespace Rose {
    std::string stringifyE_SgAssignedGotoStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAssignedGotoStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 831
namespace stringify {
    /** Convert E_SgAllocateStatement enum constant to a string. */
    const char* E_SgAllocateStatement(int64_t);

    /** Convert E_SgAllocateStatement enum constant to a string. */
    std::string E_SgAllocateStatement(int64_t, const std::string &strip);

    /** Return all E_SgAllocateStatement member values as a vector. */
    const std::vector<int64_t>& E_SgAllocateStatement();
}

namespace Rose {
    std::string stringifyE_SgAllocateStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAllocateStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 834
namespace stringify {
    /** Convert E_SgDeallocateStatement enum constant to a string. */
    const char* E_SgDeallocateStatement(int64_t);

    /** Convert E_SgDeallocateStatement enum constant to a string. */
    std::string E_SgDeallocateStatement(int64_t, const std::string &strip);

    /** Return all E_SgDeallocateStatement member values as a vector. */
    const std::vector<int64_t>& E_SgDeallocateStatement();
}

namespace Rose {
    std::string stringifyE_SgDeallocateStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgDeallocateStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 837
namespace stringify {
    /** Convert E_SgUpcNotifyStatement enum constant to a string. */
    const char* E_SgUpcNotifyStatement(int64_t);

    /** Convert E_SgUpcNotifyStatement enum constant to a string. */
    std::string E_SgUpcNotifyStatement(int64_t, const std::string &strip);

    /** Return all E_SgUpcNotifyStatement member values as a vector. */
    const std::vector<int64_t>& E_SgUpcNotifyStatement();
}

namespace Rose {
    std::string stringifyE_SgUpcNotifyStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUpcNotifyStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 840
namespace stringify {
    /** Convert E_SgUpcWaitStatement enum constant to a string. */
    const char* E_SgUpcWaitStatement(int64_t);

    /** Convert E_SgUpcWaitStatement enum constant to a string. */
    std::string E_SgUpcWaitStatement(int64_t, const std::string &strip);

    /** Return all E_SgUpcWaitStatement member values as a vector. */
    const std::vector<int64_t>& E_SgUpcWaitStatement();
}

namespace Rose {
    std::string stringifyE_SgUpcWaitStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUpcWaitStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 843
namespace stringify {
    /** Convert E_SgUpcBarrierStatement enum constant to a string. */
    const char* E_SgUpcBarrierStatement(int64_t);

    /** Convert E_SgUpcBarrierStatement enum constant to a string. */
    std::string E_SgUpcBarrierStatement(int64_t, const std::string &strip);

    /** Return all E_SgUpcBarrierStatement member values as a vector. */
    const std::vector<int64_t>& E_SgUpcBarrierStatement();
}

namespace Rose {
    std::string stringifyE_SgUpcBarrierStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUpcBarrierStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 846
namespace stringify {
    /** Convert E_SgOmpFlushStatement enum constant to a string. */
    const char* E_SgOmpFlushStatement(int64_t);

    /** Convert E_SgOmpFlushStatement enum constant to a string. */
    std::string E_SgOmpFlushStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpFlushStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpFlushStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpFlushStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpFlushStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 849
namespace stringify {
    /** Convert E_SgOmpMasterStatement enum constant to a string. */
    const char* E_SgOmpMasterStatement(int64_t);

    /** Convert E_SgOmpMasterStatement enum constant to a string. */
    std::string E_SgOmpMasterStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpMasterStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpMasterStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpMasterStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpMasterStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 852
namespace stringify {
    /** Convert E_SgOmpOrderedStatement enum constant to a string. */
    const char* E_SgOmpOrderedStatement(int64_t);

    /** Convert E_SgOmpOrderedStatement enum constant to a string. */
    std::string E_SgOmpOrderedStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpOrderedStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpOrderedStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpOrderedStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpOrderedStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 855
namespace stringify {
    /** Convert E_SgOmpCriticalStatement enum constant to a string. */
    const char* E_SgOmpCriticalStatement(int64_t);

    /** Convert E_SgOmpCriticalStatement enum constant to a string. */
    std::string E_SgOmpCriticalStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpCriticalStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpCriticalStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpCriticalStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpCriticalStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 858
namespace stringify {
    /** Convert E_SgOmpSectionStatement enum constant to a string. */
    const char* E_SgOmpSectionStatement(int64_t);

    /** Convert E_SgOmpSectionStatement enum constant to a string. */
    std::string E_SgOmpSectionStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpSectionStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpSectionStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpSectionStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpSectionStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 861
namespace stringify {
    /** Convert E_SgOmpWorkshareStatement enum constant to a string. */
    const char* E_SgOmpWorkshareStatement(int64_t);

    /** Convert E_SgOmpWorkshareStatement enum constant to a string. */
    std::string E_SgOmpWorkshareStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpWorkshareStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpWorkshareStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpWorkshareStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpWorkshareStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 864
namespace stringify {
    /** Convert E_SgOmpParallelStatement enum constant to a string. */
    const char* E_SgOmpParallelStatement(int64_t);

    /** Convert E_SgOmpParallelStatement enum constant to a string. */
    std::string E_SgOmpParallelStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpParallelStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpParallelStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpParallelStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpParallelStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 867
namespace stringify {
    /** Convert E_SgOmpSingleStatement enum constant to a string. */
    const char* E_SgOmpSingleStatement(int64_t);

    /** Convert E_SgOmpSingleStatement enum constant to a string. */
    std::string E_SgOmpSingleStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpSingleStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpSingleStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpSingleStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpSingleStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 870
namespace stringify {
    /** Convert E_SgOmpAtomicStatement enum constant to a string. */
    const char* E_SgOmpAtomicStatement(int64_t);

    /** Convert E_SgOmpAtomicStatement enum constant to a string. */
    std::string E_SgOmpAtomicStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpAtomicStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpAtomicStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpAtomicStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpAtomicStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 873
namespace stringify {
    /** Convert E_SgOmpTaskStatement enum constant to a string. */
    const char* E_SgOmpTaskStatement(int64_t);

    /** Convert E_SgOmpTaskStatement enum constant to a string. */
    std::string E_SgOmpTaskStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpTaskStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpTaskStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpTaskStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpTaskStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 876
namespace stringify {
    /** Convert E_SgOmpForStatement enum constant to a string. */
    const char* E_SgOmpForStatement(int64_t);

    /** Convert E_SgOmpForStatement enum constant to a string. */
    std::string E_SgOmpForStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpForStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpForStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpForStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpForStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 879
namespace stringify {
    /** Convert E_SgOmpDoStatement enum constant to a string. */
    const char* E_SgOmpDoStatement(int64_t);

    /** Convert E_SgOmpDoStatement enum constant to a string. */
    std::string E_SgOmpDoStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpDoStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpDoStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpDoStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpDoStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 882
namespace stringify {
    /** Convert E_SgOmpSectionsStatement enum constant to a string. */
    const char* E_SgOmpSectionsStatement(int64_t);

    /** Convert E_SgOmpSectionsStatement enum constant to a string. */
    std::string E_SgOmpSectionsStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpSectionsStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpSectionsStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpSectionsStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpSectionsStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 885
namespace stringify {
    /** Convert E_SgOmpTargetStatement enum constant to a string. */
    const char* E_SgOmpTargetStatement(int64_t);

    /** Convert E_SgOmpTargetStatement enum constant to a string. */
    std::string E_SgOmpTargetStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpTargetStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpTargetStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpTargetStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpTargetStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 888
namespace stringify {
    /** Convert E_SgOmpTargetDataStatement enum constant to a string. */
    const char* E_SgOmpTargetDataStatement(int64_t);

    /** Convert E_SgOmpTargetDataStatement enum constant to a string. */
    std::string E_SgOmpTargetDataStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpTargetDataStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpTargetDataStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpTargetDataStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpTargetDataStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 891
namespace stringify {
    /** Convert E_SgOmpSimdStatement enum constant to a string. */
    const char* E_SgOmpSimdStatement(int64_t);

    /** Convert E_SgOmpSimdStatement enum constant to a string. */
    std::string E_SgOmpSimdStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpSimdStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpSimdStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpSimdStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpSimdStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 894
namespace stringify {
    /** Convert E_SgOmpForSimdStatement enum constant to a string. */
    const char* E_SgOmpForSimdStatement(int64_t);

    /** Convert E_SgOmpForSimdStatement enum constant to a string. */
    std::string E_SgOmpForSimdStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpForSimdStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpForSimdStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpForSimdStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpForSimdStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 897
namespace stringify {
    /** Convert E_SgOmpClauseBodyStatement enum constant to a string. */
    const char* E_SgOmpClauseBodyStatement(int64_t);

    /** Convert E_SgOmpClauseBodyStatement enum constant to a string. */
    std::string E_SgOmpClauseBodyStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpClauseBodyStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpClauseBodyStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpClauseBodyStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpClauseBodyStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 900
namespace stringify {
    /** Convert E_SgOmpBodyStatement enum constant to a string. */
    const char* E_SgOmpBodyStatement(int64_t);

    /** Convert E_SgOmpBodyStatement enum constant to a string. */
    std::string E_SgOmpBodyStatement(int64_t, const std::string &strip);

    /** Return all E_SgOmpBodyStatement member values as a vector. */
    const std::vector<int64_t>& E_SgOmpBodyStatement();
}

namespace Rose {
    std::string stringifyE_SgOmpBodyStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOmpBodyStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 903
namespace stringify {
    /** Convert E_SgWithStatement enum constant to a string. */
    const char* E_SgWithStatement(int64_t);

    /** Convert E_SgWithStatement enum constant to a string. */
    std::string E_SgWithStatement(int64_t, const std::string &strip);

    /** Return all E_SgWithStatement member values as a vector. */
    const std::vector<int64_t>& E_SgWithStatement();
}

namespace Rose {
    std::string stringifyE_SgWithStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgWithStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 906
namespace stringify {
    /** Convert E_SgPythonPrintStmt enum constant to a string. */
    const char* E_SgPythonPrintStmt(int64_t);

    /** Convert E_SgPythonPrintStmt enum constant to a string. */
    std::string E_SgPythonPrintStmt(int64_t, const std::string &strip);

    /** Return all E_SgPythonPrintStmt member values as a vector. */
    const std::vector<int64_t>& E_SgPythonPrintStmt();
}

namespace Rose {
    std::string stringifyE_SgPythonPrintStmt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgPythonPrintStmt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 909
namespace stringify {
    /** Convert E_SgAssertStmt enum constant to a string. */
    const char* E_SgAssertStmt(int64_t);

    /** Convert E_SgAssertStmt enum constant to a string. */
    std::string E_SgAssertStmt(int64_t, const std::string &strip);

    /** Return all E_SgAssertStmt member values as a vector. */
    const std::vector<int64_t>& E_SgAssertStmt();
}

namespace Rose {
    std::string stringifyE_SgAssertStmt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAssertStmt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 912
namespace stringify {
    /** Convert E_SgExecStatement enum constant to a string. */
    const char* E_SgExecStatement(int64_t);

    /** Convert E_SgExecStatement enum constant to a string. */
    std::string E_SgExecStatement(int64_t, const std::string &strip);

    /** Return all E_SgExecStatement member values as a vector. */
    const std::vector<int64_t>& E_SgExecStatement();
}

namespace Rose {
    std::string stringifyE_SgExecStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgExecStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 915
namespace stringify {
    /** Convert E_SgPythonGlobalStmt enum constant to a string. */
    const char* E_SgPythonGlobalStmt(int64_t);

    /** Convert E_SgPythonGlobalStmt enum constant to a string. */
    std::string E_SgPythonGlobalStmt(int64_t, const std::string &strip);

    /** Return all E_SgPythonGlobalStmt member values as a vector. */
    const std::vector<int64_t>& E_SgPythonGlobalStmt();
}

namespace Rose {
    std::string stringifyE_SgPythonGlobalStmt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgPythonGlobalStmt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 918
namespace stringify {
    /** Convert E_SgJavaSynchronizedStatement enum constant to a string. */
    const char* E_SgJavaSynchronizedStatement(int64_t);

    /** Convert E_SgJavaSynchronizedStatement enum constant to a string. */
    std::string E_SgJavaSynchronizedStatement(int64_t, const std::string &strip);

    /** Return all E_SgJavaSynchronizedStatement member values as a vector. */
    const std::vector<int64_t>& E_SgJavaSynchronizedStatement();
}

namespace Rose {
    std::string stringifyE_SgJavaSynchronizedStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgJavaSynchronizedStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 921
namespace stringify {
    /** Convert E_SgAsyncStmt enum constant to a string. */
    const char* E_SgAsyncStmt(int64_t);

    /** Convert E_SgAsyncStmt enum constant to a string. */
    std::string E_SgAsyncStmt(int64_t, const std::string &strip);

    /** Return all E_SgAsyncStmt member values as a vector. */
    const std::vector<int64_t>& E_SgAsyncStmt();
}

namespace Rose {
    std::string stringifyE_SgAsyncStmt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsyncStmt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 924
namespace stringify {
    /** Convert E_SgFinishStmt enum constant to a string. */
    const char* E_SgFinishStmt(int64_t);

    /** Convert E_SgFinishStmt enum constant to a string. */
    std::string E_SgFinishStmt(int64_t, const std::string &strip);

    /** Return all E_SgFinishStmt member values as a vector. */
    const std::vector<int64_t>& E_SgFinishStmt();
}

namespace Rose {
    std::string stringifyE_SgFinishStmt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgFinishStmt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 927
namespace stringify {
    /** Convert E_SgAtStmt enum constant to a string. */
    const char* E_SgAtStmt(int64_t);

    /** Convert E_SgAtStmt enum constant to a string. */
    std::string E_SgAtStmt(int64_t, const std::string &strip);

    /** Return all E_SgAtStmt member values as a vector. */
    const std::vector<int64_t>& E_SgAtStmt();
}

namespace Rose {
    std::string stringifyE_SgAtStmt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAtStmt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 930
namespace stringify {
    /** Convert E_SgAtomicStmt enum constant to a string. */
    const char* E_SgAtomicStmt(int64_t);

    /** Convert E_SgAtomicStmt enum constant to a string. */
    std::string E_SgAtomicStmt(int64_t, const std::string &strip);

    /** Return all E_SgAtomicStmt member values as a vector. */
    const std::vector<int64_t>& E_SgAtomicStmt();
}

namespace Rose {
    std::string stringifyE_SgAtomicStmt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAtomicStmt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 933
namespace stringify {
    /** Convert E_SgWhenStmt enum constant to a string. */
    const char* E_SgWhenStmt(int64_t);

    /** Convert E_SgWhenStmt enum constant to a string. */
    std::string E_SgWhenStmt(int64_t, const std::string &strip);

    /** Return all E_SgWhenStmt member values as a vector. */
    const std::vector<int64_t>& E_SgWhenStmt();
}

namespace Rose {
    std::string stringifyE_SgWhenStmt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgWhenStmt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 936
namespace stringify {
    /** Convert E_SgSyncAllStatement enum constant to a string. */
    const char* E_SgSyncAllStatement(int64_t);

    /** Convert E_SgSyncAllStatement enum constant to a string. */
    std::string E_SgSyncAllStatement(int64_t, const std::string &strip);

    /** Return all E_SgSyncAllStatement member values as a vector. */
    const std::vector<int64_t>& E_SgSyncAllStatement();
}

namespace Rose {
    std::string stringifyE_SgSyncAllStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSyncAllStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 939
namespace stringify {
    /** Convert E_SgSyncImagesStatement enum constant to a string. */
    const char* E_SgSyncImagesStatement(int64_t);

    /** Convert E_SgSyncImagesStatement enum constant to a string. */
    std::string E_SgSyncImagesStatement(int64_t, const std::string &strip);

    /** Return all E_SgSyncImagesStatement member values as a vector. */
    const std::vector<int64_t>& E_SgSyncImagesStatement();
}

namespace Rose {
    std::string stringifyE_SgSyncImagesStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSyncImagesStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 942
namespace stringify {
    /** Convert E_SgSyncMemoryStatement enum constant to a string. */
    const char* E_SgSyncMemoryStatement(int64_t);

    /** Convert E_SgSyncMemoryStatement enum constant to a string. */
    std::string E_SgSyncMemoryStatement(int64_t, const std::string &strip);

    /** Return all E_SgSyncMemoryStatement member values as a vector. */
    const std::vector<int64_t>& E_SgSyncMemoryStatement();
}

namespace Rose {
    std::string stringifyE_SgSyncMemoryStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSyncMemoryStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 945
namespace stringify {
    /** Convert E_SgSyncTeamStatement enum constant to a string. */
    const char* E_SgSyncTeamStatement(int64_t);

    /** Convert E_SgSyncTeamStatement enum constant to a string. */
    std::string E_SgSyncTeamStatement(int64_t, const std::string &strip);

    /** Return all E_SgSyncTeamStatement member values as a vector. */
    const std::vector<int64_t>& E_SgSyncTeamStatement();
}

namespace Rose {
    std::string stringifyE_SgSyncTeamStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSyncTeamStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 948
namespace stringify {
    /** Convert E_SgLockStatement enum constant to a string. */
    const char* E_SgLockStatement(int64_t);

    /** Convert E_SgLockStatement enum constant to a string. */
    std::string E_SgLockStatement(int64_t, const std::string &strip);

    /** Return all E_SgLockStatement member values as a vector. */
    const std::vector<int64_t>& E_SgLockStatement();
}

namespace Rose {
    std::string stringifyE_SgLockStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgLockStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 951
namespace stringify {
    /** Convert E_SgUnlockStatement enum constant to a string. */
    const char* E_SgUnlockStatement(int64_t);

    /** Convert E_SgUnlockStatement enum constant to a string. */
    std::string E_SgUnlockStatement(int64_t, const std::string &strip);

    /** Return all E_SgUnlockStatement member values as a vector. */
    const std::vector<int64_t>& E_SgUnlockStatement();
}

namespace Rose {
    std::string stringifyE_SgUnlockStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUnlockStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 954
namespace stringify {
    /** Convert E_SgImageControlStatement enum constant to a string. */
    const char* E_SgImageControlStatement(int64_t);

    /** Convert E_SgImageControlStatement enum constant to a string. */
    std::string E_SgImageControlStatement(int64_t, const std::string &strip);

    /** Return all E_SgImageControlStatement member values as a vector. */
    const std::vector<int64_t>& E_SgImageControlStatement();
}

namespace Rose {
    std::string stringifyE_SgImageControlStatement(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgImageControlStatement();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 957
namespace stringify {
    /** Convert E_SgAdaExitStmt enum constant to a string. */
    const char* E_SgAdaExitStmt(int64_t);

    /** Convert E_SgAdaExitStmt enum constant to a string. */
    std::string E_SgAdaExitStmt(int64_t, const std::string &strip);

    /** Return all E_SgAdaExitStmt member values as a vector. */
    const std::vector<int64_t>& E_SgAdaExitStmt();
}

namespace Rose {
    std::string stringifyE_SgAdaExitStmt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAdaExitStmt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 960
namespace stringify {
    /** Convert E_SgAdaLoopStmt enum constant to a string. */
    const char* E_SgAdaLoopStmt(int64_t);

    /** Convert E_SgAdaLoopStmt enum constant to a string. */
    std::string E_SgAdaLoopStmt(int64_t, const std::string &strip);

    /** Return all E_SgAdaLoopStmt member values as a vector. */
    const std::vector<int64_t>& E_SgAdaLoopStmt();
}

namespace Rose {
    std::string stringifyE_SgAdaLoopStmt(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAdaLoopStmt();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 963
namespace stringify {
    /** Convert E_SgExpressionRoot enum constant to a string. */
    const char* E_SgExpressionRoot(int64_t);

    /** Convert E_SgExpressionRoot enum constant to a string. */
    std::string E_SgExpressionRoot(int64_t, const std::string &strip);

    /** Return all E_SgExpressionRoot member values as a vector. */
    const std::vector<int64_t>& E_SgExpressionRoot();
}

namespace Rose {
    std::string stringifyE_SgExpressionRoot(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgExpressionRoot();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 966
namespace stringify {
    /** Convert E_SgMinusOp enum constant to a string. */
    const char* E_SgMinusOp(int64_t);

    /** Convert E_SgMinusOp enum constant to a string. */
    std::string E_SgMinusOp(int64_t, const std::string &strip);

    /** Return all E_SgMinusOp member values as a vector. */
    const std::vector<int64_t>& E_SgMinusOp();
}

namespace Rose {
    std::string stringifyE_SgMinusOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgMinusOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 969
namespace stringify {
    /** Convert E_SgUnaryAddOp enum constant to a string. */
    const char* E_SgUnaryAddOp(int64_t);

    /** Convert E_SgUnaryAddOp enum constant to a string. */
    std::string E_SgUnaryAddOp(int64_t, const std::string &strip);

    /** Return all E_SgUnaryAddOp member values as a vector. */
    const std::vector<int64_t>& E_SgUnaryAddOp();
}

namespace Rose {
    std::string stringifyE_SgUnaryAddOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUnaryAddOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 972
namespace stringify {
    /** Convert E_SgNotOp enum constant to a string. */
    const char* E_SgNotOp(int64_t);

    /** Convert E_SgNotOp enum constant to a string. */
    std::string E_SgNotOp(int64_t, const std::string &strip);

    /** Return all E_SgNotOp member values as a vector. */
    const std::vector<int64_t>& E_SgNotOp();
}

namespace Rose {
    std::string stringifyE_SgNotOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgNotOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 975
namespace stringify {
    /** Convert E_SgPointerDerefExp enum constant to a string. */
    const char* E_SgPointerDerefExp(int64_t);

    /** Convert E_SgPointerDerefExp enum constant to a string. */
    std::string E_SgPointerDerefExp(int64_t, const std::string &strip);

    /** Return all E_SgPointerDerefExp member values as a vector. */
    const std::vector<int64_t>& E_SgPointerDerefExp();
}

namespace Rose {
    std::string stringifyE_SgPointerDerefExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgPointerDerefExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 978
namespace stringify {
    /** Convert E_SgAddressOfOp enum constant to a string. */
    const char* E_SgAddressOfOp(int64_t);

    /** Convert E_SgAddressOfOp enum constant to a string. */
    std::string E_SgAddressOfOp(int64_t, const std::string &strip);

    /** Return all E_SgAddressOfOp member values as a vector. */
    const std::vector<int64_t>& E_SgAddressOfOp();
}

namespace Rose {
    std::string stringifyE_SgAddressOfOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAddressOfOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 981
namespace stringify {
    /** Convert E_SgMinusMinusOp enum constant to a string. */
    const char* E_SgMinusMinusOp(int64_t);

    /** Convert E_SgMinusMinusOp enum constant to a string. */
    std::string E_SgMinusMinusOp(int64_t, const std::string &strip);

    /** Return all E_SgMinusMinusOp member values as a vector. */
    const std::vector<int64_t>& E_SgMinusMinusOp();
}

namespace Rose {
    std::string stringifyE_SgMinusMinusOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgMinusMinusOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 984
namespace stringify {
    /** Convert E_SgPlusPlusOp enum constant to a string. */
    const char* E_SgPlusPlusOp(int64_t);

    /** Convert E_SgPlusPlusOp enum constant to a string. */
    std::string E_SgPlusPlusOp(int64_t, const std::string &strip);

    /** Return all E_SgPlusPlusOp member values as a vector. */
    const std::vector<int64_t>& E_SgPlusPlusOp();
}

namespace Rose {
    std::string stringifyE_SgPlusPlusOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgPlusPlusOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 987
namespace stringify {
    /** Convert E_SgBitComplementOp enum constant to a string. */
    const char* E_SgBitComplementOp(int64_t);

    /** Convert E_SgBitComplementOp enum constant to a string. */
    std::string E_SgBitComplementOp(int64_t, const std::string &strip);

    /** Return all E_SgBitComplementOp member values as a vector. */
    const std::vector<int64_t>& E_SgBitComplementOp();
}

namespace Rose {
    std::string stringifyE_SgBitComplementOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgBitComplementOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 990
namespace stringify {
    /** Convert E_SgCastExp enum constant to a string. */
    const char* E_SgCastExp(int64_t);

    /** Convert E_SgCastExp enum constant to a string. */
    std::string E_SgCastExp(int64_t, const std::string &strip);

    /** Return all E_SgCastExp member values as a vector. */
    const std::vector<int64_t>& E_SgCastExp();
}

namespace Rose {
    std::string stringifyE_SgCastExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgCastExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 993
namespace stringify {
    /** Convert E_SgThrowOp enum constant to a string. */
    const char* E_SgThrowOp(int64_t);

    /** Convert E_SgThrowOp enum constant to a string. */
    std::string E_SgThrowOp(int64_t, const std::string &strip);

    /** Return all E_SgThrowOp member values as a vector. */
    const std::vector<int64_t>& E_SgThrowOp();
}

namespace Rose {
    std::string stringifyE_SgThrowOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgThrowOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 996
namespace stringify {
    /** Convert E_SgRealPartOp enum constant to a string. */
    const char* E_SgRealPartOp(int64_t);

    /** Convert E_SgRealPartOp enum constant to a string. */
    std::string E_SgRealPartOp(int64_t, const std::string &strip);

    /** Return all E_SgRealPartOp member values as a vector. */
    const std::vector<int64_t>& E_SgRealPartOp();
}

namespace Rose {
    std::string stringifyE_SgRealPartOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgRealPartOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 999
namespace stringify {
    /** Convert E_SgImagPartOp enum constant to a string. */
    const char* E_SgImagPartOp(int64_t);

    /** Convert E_SgImagPartOp enum constant to a string. */
    std::string E_SgImagPartOp(int64_t, const std::string &strip);

    /** Return all E_SgImagPartOp member values as a vector. */
    const std::vector<int64_t>& E_SgImagPartOp();
}

namespace Rose {
    std::string stringifyE_SgImagPartOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgImagPartOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1002
namespace stringify {
    /** Convert E_SgConjugateOp enum constant to a string. */
    const char* E_SgConjugateOp(int64_t);

    /** Convert E_SgConjugateOp enum constant to a string. */
    std::string E_SgConjugateOp(int64_t, const std::string &strip);

    /** Return all E_SgConjugateOp member values as a vector. */
    const std::vector<int64_t>& E_SgConjugateOp();
}

namespace Rose {
    std::string stringifyE_SgConjugateOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgConjugateOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1005
namespace stringify {
    /** Convert E_SgUserDefinedUnaryOp enum constant to a string. */
    const char* E_SgUserDefinedUnaryOp(int64_t);

    /** Convert E_SgUserDefinedUnaryOp enum constant to a string. */
    std::string E_SgUserDefinedUnaryOp(int64_t, const std::string &strip);

    /** Return all E_SgUserDefinedUnaryOp member values as a vector. */
    const std::vector<int64_t>& E_SgUserDefinedUnaryOp();
}

namespace Rose {
    std::string stringifyE_SgUserDefinedUnaryOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUserDefinedUnaryOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1008
namespace stringify {
    /** Convert E_SgMatrixTransposeOp enum constant to a string. */
    const char* E_SgMatrixTransposeOp(int64_t);

    /** Convert E_SgMatrixTransposeOp enum constant to a string. */
    std::string E_SgMatrixTransposeOp(int64_t, const std::string &strip);

    /** Return all E_SgMatrixTransposeOp member values as a vector. */
    const std::vector<int64_t>& E_SgMatrixTransposeOp();
}

namespace Rose {
    std::string stringifyE_SgMatrixTransposeOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgMatrixTransposeOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1011
namespace stringify {
    /** Convert E_SgAbsOp enum constant to a string. */
    const char* E_SgAbsOp(int64_t);

    /** Convert E_SgAbsOp enum constant to a string. */
    std::string E_SgAbsOp(int64_t, const std::string &strip);

    /** Return all E_SgAbsOp member values as a vector. */
    const std::vector<int64_t>& E_SgAbsOp();
}

namespace Rose {
    std::string stringifyE_SgAbsOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAbsOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1014
namespace stringify {
    /** Convert E_SgUnaryOp enum constant to a string. */
    const char* E_SgUnaryOp(int64_t);

    /** Convert E_SgUnaryOp enum constant to a string. */
    std::string E_SgUnaryOp(int64_t, const std::string &strip);

    /** Return all E_SgUnaryOp member values as a vector. */
    const std::vector<int64_t>& E_SgUnaryOp();
}

namespace Rose {
    std::string stringifyE_SgUnaryOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUnaryOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1017
namespace stringify {
    /** Convert E_SgArrowExp enum constant to a string. */
    const char* E_SgArrowExp(int64_t);

    /** Convert E_SgArrowExp enum constant to a string. */
    std::string E_SgArrowExp(int64_t, const std::string &strip);

    /** Return all E_SgArrowExp member values as a vector. */
    const std::vector<int64_t>& E_SgArrowExp();
}

namespace Rose {
    std::string stringifyE_SgArrowExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgArrowExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1020
namespace stringify {
    /** Convert E_SgDotExp enum constant to a string. */
    const char* E_SgDotExp(int64_t);

    /** Convert E_SgDotExp enum constant to a string. */
    std::string E_SgDotExp(int64_t, const std::string &strip);

    /** Return all E_SgDotExp member values as a vector. */
    const std::vector<int64_t>& E_SgDotExp();
}

namespace Rose {
    std::string stringifyE_SgDotExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgDotExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1023
namespace stringify {
    /** Convert E_SgDotStarOp enum constant to a string. */
    const char* E_SgDotStarOp(int64_t);

    /** Convert E_SgDotStarOp enum constant to a string. */
    std::string E_SgDotStarOp(int64_t, const std::string &strip);

    /** Return all E_SgDotStarOp member values as a vector. */
    const std::vector<int64_t>& E_SgDotStarOp();
}

namespace Rose {
    std::string stringifyE_SgDotStarOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgDotStarOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1026
namespace stringify {
    /** Convert E_SgArrowStarOp enum constant to a string. */
    const char* E_SgArrowStarOp(int64_t);

    /** Convert E_SgArrowStarOp enum constant to a string. */
    std::string E_SgArrowStarOp(int64_t, const std::string &strip);

    /** Return all E_SgArrowStarOp member values as a vector. */
    const std::vector<int64_t>& E_SgArrowStarOp();
}

namespace Rose {
    std::string stringifyE_SgArrowStarOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgArrowStarOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1029
namespace stringify {
    /** Convert E_SgEqualityOp enum constant to a string. */
    const char* E_SgEqualityOp(int64_t);

    /** Convert E_SgEqualityOp enum constant to a string. */
    std::string E_SgEqualityOp(int64_t, const std::string &strip);

    /** Return all E_SgEqualityOp member values as a vector. */
    const std::vector<int64_t>& E_SgEqualityOp();
}

namespace Rose {
    std::string stringifyE_SgEqualityOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgEqualityOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1032
namespace stringify {
    /** Convert E_SgLessThanOp enum constant to a string. */
    const char* E_SgLessThanOp(int64_t);

    /** Convert E_SgLessThanOp enum constant to a string. */
    std::string E_SgLessThanOp(int64_t, const std::string &strip);

    /** Return all E_SgLessThanOp member values as a vector. */
    const std::vector<int64_t>& E_SgLessThanOp();
}

namespace Rose {
    std::string stringifyE_SgLessThanOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgLessThanOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1035
namespace stringify {
    /** Convert E_SgGreaterThanOp enum constant to a string. */
    const char* E_SgGreaterThanOp(int64_t);

    /** Convert E_SgGreaterThanOp enum constant to a string. */
    std::string E_SgGreaterThanOp(int64_t, const std::string &strip);

    /** Return all E_SgGreaterThanOp member values as a vector. */
    const std::vector<int64_t>& E_SgGreaterThanOp();
}

namespace Rose {
    std::string stringifyE_SgGreaterThanOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgGreaterThanOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1038
namespace stringify {
    /** Convert E_SgNotEqualOp enum constant to a string. */
    const char* E_SgNotEqualOp(int64_t);

    /** Convert E_SgNotEqualOp enum constant to a string. */
    std::string E_SgNotEqualOp(int64_t, const std::string &strip);

    /** Return all E_SgNotEqualOp member values as a vector. */
    const std::vector<int64_t>& E_SgNotEqualOp();
}

namespace Rose {
    std::string stringifyE_SgNotEqualOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgNotEqualOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1041
namespace stringify {
    /** Convert E_SgLessOrEqualOp enum constant to a string. */
    const char* E_SgLessOrEqualOp(int64_t);

    /** Convert E_SgLessOrEqualOp enum constant to a string. */
    std::string E_SgLessOrEqualOp(int64_t, const std::string &strip);

    /** Return all E_SgLessOrEqualOp member values as a vector. */
    const std::vector<int64_t>& E_SgLessOrEqualOp();
}

namespace Rose {
    std::string stringifyE_SgLessOrEqualOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgLessOrEqualOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1044
namespace stringify {
    /** Convert E_SgGreaterOrEqualOp enum constant to a string. */
    const char* E_SgGreaterOrEqualOp(int64_t);

    /** Convert E_SgGreaterOrEqualOp enum constant to a string. */
    std::string E_SgGreaterOrEqualOp(int64_t, const std::string &strip);

    /** Return all E_SgGreaterOrEqualOp member values as a vector. */
    const std::vector<int64_t>& E_SgGreaterOrEqualOp();
}

namespace Rose {
    std::string stringifyE_SgGreaterOrEqualOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgGreaterOrEqualOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1047
namespace stringify {
    /** Convert E_SgAddOp enum constant to a string. */
    const char* E_SgAddOp(int64_t);

    /** Convert E_SgAddOp enum constant to a string. */
    std::string E_SgAddOp(int64_t, const std::string &strip);

    /** Return all E_SgAddOp member values as a vector. */
    const std::vector<int64_t>& E_SgAddOp();
}

namespace Rose {
    std::string stringifyE_SgAddOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAddOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1050
namespace stringify {
    /** Convert E_SgSubtractOp enum constant to a string. */
    const char* E_SgSubtractOp(int64_t);

    /** Convert E_SgSubtractOp enum constant to a string. */
    std::string E_SgSubtractOp(int64_t, const std::string &strip);

    /** Return all E_SgSubtractOp member values as a vector. */
    const std::vector<int64_t>& E_SgSubtractOp();
}

namespace Rose {
    std::string stringifyE_SgSubtractOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSubtractOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1053
namespace stringify {
    /** Convert E_SgMultiplyOp enum constant to a string. */
    const char* E_SgMultiplyOp(int64_t);

    /** Convert E_SgMultiplyOp enum constant to a string. */
    std::string E_SgMultiplyOp(int64_t, const std::string &strip);

    /** Return all E_SgMultiplyOp member values as a vector. */
    const std::vector<int64_t>& E_SgMultiplyOp();
}

namespace Rose {
    std::string stringifyE_SgMultiplyOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgMultiplyOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1056
namespace stringify {
    /** Convert E_SgDivideOp enum constant to a string. */
    const char* E_SgDivideOp(int64_t);

    /** Convert E_SgDivideOp enum constant to a string. */
    std::string E_SgDivideOp(int64_t, const std::string &strip);

    /** Return all E_SgDivideOp member values as a vector. */
    const std::vector<int64_t>& E_SgDivideOp();
}

namespace Rose {
    std::string stringifyE_SgDivideOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgDivideOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1059
namespace stringify {
    /** Convert E_SgIntegerDivideOp enum constant to a string. */
    const char* E_SgIntegerDivideOp(int64_t);

    /** Convert E_SgIntegerDivideOp enum constant to a string. */
    std::string E_SgIntegerDivideOp(int64_t, const std::string &strip);

    /** Return all E_SgIntegerDivideOp member values as a vector. */
    const std::vector<int64_t>& E_SgIntegerDivideOp();
}

namespace Rose {
    std::string stringifyE_SgIntegerDivideOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgIntegerDivideOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1062
namespace stringify {
    /** Convert E_SgModOp enum constant to a string. */
    const char* E_SgModOp(int64_t);

    /** Convert E_SgModOp enum constant to a string. */
    std::string E_SgModOp(int64_t, const std::string &strip);

    /** Return all E_SgModOp member values as a vector. */
    const std::vector<int64_t>& E_SgModOp();
}

namespace Rose {
    std::string stringifyE_SgModOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgModOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1065
namespace stringify {
    /** Convert E_SgAndOp enum constant to a string. */
    const char* E_SgAndOp(int64_t);

    /** Convert E_SgAndOp enum constant to a string. */
    std::string E_SgAndOp(int64_t, const std::string &strip);

    /** Return all E_SgAndOp member values as a vector. */
    const std::vector<int64_t>& E_SgAndOp();
}

namespace Rose {
    std::string stringifyE_SgAndOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAndOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1068
namespace stringify {
    /** Convert E_SgOrOp enum constant to a string. */
    const char* E_SgOrOp(int64_t);

    /** Convert E_SgOrOp enum constant to a string. */
    std::string E_SgOrOp(int64_t, const std::string &strip);

    /** Return all E_SgOrOp member values as a vector. */
    const std::vector<int64_t>& E_SgOrOp();
}

namespace Rose {
    std::string stringifyE_SgOrOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgOrOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1071
namespace stringify {
    /** Convert E_SgBitXorOp enum constant to a string. */
    const char* E_SgBitXorOp(int64_t);

    /** Convert E_SgBitXorOp enum constant to a string. */
    std::string E_SgBitXorOp(int64_t, const std::string &strip);

    /** Return all E_SgBitXorOp member values as a vector. */
    const std::vector<int64_t>& E_SgBitXorOp();
}

namespace Rose {
    std::string stringifyE_SgBitXorOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgBitXorOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1074
namespace stringify {
    /** Convert E_SgBitAndOp enum constant to a string. */
    const char* E_SgBitAndOp(int64_t);

    /** Convert E_SgBitAndOp enum constant to a string. */
    std::string E_SgBitAndOp(int64_t, const std::string &strip);

    /** Return all E_SgBitAndOp member values as a vector. */
    const std::vector<int64_t>& E_SgBitAndOp();
}

namespace Rose {
    std::string stringifyE_SgBitAndOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgBitAndOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1077
namespace stringify {
    /** Convert E_SgBitOrOp enum constant to a string. */
    const char* E_SgBitOrOp(int64_t);

    /** Convert E_SgBitOrOp enum constant to a string. */
    std::string E_SgBitOrOp(int64_t, const std::string &strip);

    /** Return all E_SgBitOrOp member values as a vector. */
    const std::vector<int64_t>& E_SgBitOrOp();
}

namespace Rose {
    std::string stringifyE_SgBitOrOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgBitOrOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1080
namespace stringify {
    /** Convert E_SgBitEqvOp enum constant to a string. */
    const char* E_SgBitEqvOp(int64_t);

    /** Convert E_SgBitEqvOp enum constant to a string. */
    std::string E_SgBitEqvOp(int64_t, const std::string &strip);

    /** Return all E_SgBitEqvOp member values as a vector. */
    const std::vector<int64_t>& E_SgBitEqvOp();
}

namespace Rose {
    std::string stringifyE_SgBitEqvOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgBitEqvOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1083
namespace stringify {
    /** Convert E_SgCommaOpExp enum constant to a string. */
    const char* E_SgCommaOpExp(int64_t);

    /** Convert E_SgCommaOpExp enum constant to a string. */
    std::string E_SgCommaOpExp(int64_t, const std::string &strip);

    /** Return all E_SgCommaOpExp member values as a vector. */
    const std::vector<int64_t>& E_SgCommaOpExp();
}

namespace Rose {
    std::string stringifyE_SgCommaOpExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgCommaOpExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1086
namespace stringify {
    /** Convert E_SgLshiftOp enum constant to a string. */
    const char* E_SgLshiftOp(int64_t);

    /** Convert E_SgLshiftOp enum constant to a string. */
    std::string E_SgLshiftOp(int64_t, const std::string &strip);

    /** Return all E_SgLshiftOp member values as a vector. */
    const std::vector<int64_t>& E_SgLshiftOp();
}

namespace Rose {
    std::string stringifyE_SgLshiftOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgLshiftOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1089
namespace stringify {
    /** Convert E_SgRshiftOp enum constant to a string. */
    const char* E_SgRshiftOp(int64_t);

    /** Convert E_SgRshiftOp enum constant to a string. */
    std::string E_SgRshiftOp(int64_t, const std::string &strip);

    /** Return all E_SgRshiftOp member values as a vector. */
    const std::vector<int64_t>& E_SgRshiftOp();
}

namespace Rose {
    std::string stringifyE_SgRshiftOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgRshiftOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1092
namespace stringify {
    /** Convert E_SgPntrArrRefExp enum constant to a string. */
    const char* E_SgPntrArrRefExp(int64_t);

    /** Convert E_SgPntrArrRefExp enum constant to a string. */
    std::string E_SgPntrArrRefExp(int64_t, const std::string &strip);

    /** Return all E_SgPntrArrRefExp member values as a vector. */
    const std::vector<int64_t>& E_SgPntrArrRefExp();
}

namespace Rose {
    std::string stringifyE_SgPntrArrRefExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgPntrArrRefExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1095
namespace stringify {
    /** Convert E_SgScopeOp enum constant to a string. */
    const char* E_SgScopeOp(int64_t);

    /** Convert E_SgScopeOp enum constant to a string. */
    std::string E_SgScopeOp(int64_t, const std::string &strip);

    /** Return all E_SgScopeOp member values as a vector. */
    const std::vector<int64_t>& E_SgScopeOp();
}

namespace Rose {
    std::string stringifyE_SgScopeOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgScopeOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1098
namespace stringify {
    /** Convert E_SgAssignOp enum constant to a string. */
    const char* E_SgAssignOp(int64_t);

    /** Convert E_SgAssignOp enum constant to a string. */
    std::string E_SgAssignOp(int64_t, const std::string &strip);

    /** Return all E_SgAssignOp member values as a vector. */
    const std::vector<int64_t>& E_SgAssignOp();
}

namespace Rose {
    std::string stringifyE_SgAssignOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAssignOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1101
namespace stringify {
    /** Convert E_SgExponentiationOp enum constant to a string. */
    const char* E_SgExponentiationOp(int64_t);

    /** Convert E_SgExponentiationOp enum constant to a string. */
    std::string E_SgExponentiationOp(int64_t, const std::string &strip);

    /** Return all E_SgExponentiationOp member values as a vector. */
    const std::vector<int64_t>& E_SgExponentiationOp();
}

namespace Rose {
    std::string stringifyE_SgExponentiationOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgExponentiationOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1104
namespace stringify {
    /** Convert E_SgJavaUnsignedRshiftOp enum constant to a string. */
    const char* E_SgJavaUnsignedRshiftOp(int64_t);

    /** Convert E_SgJavaUnsignedRshiftOp enum constant to a string. */
    std::string E_SgJavaUnsignedRshiftOp(int64_t, const std::string &strip);

    /** Return all E_SgJavaUnsignedRshiftOp member values as a vector. */
    const std::vector<int64_t>& E_SgJavaUnsignedRshiftOp();
}

namespace Rose {
    std::string stringifyE_SgJavaUnsignedRshiftOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgJavaUnsignedRshiftOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1107
namespace stringify {
    /** Convert E_SgConcatenationOp enum constant to a string. */
    const char* E_SgConcatenationOp(int64_t);

    /** Convert E_SgConcatenationOp enum constant to a string. */
    std::string E_SgConcatenationOp(int64_t, const std::string &strip);

    /** Return all E_SgConcatenationOp member values as a vector. */
    const std::vector<int64_t>& E_SgConcatenationOp();
}

namespace Rose {
    std::string stringifyE_SgConcatenationOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgConcatenationOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1110
namespace stringify {
    /** Convert E_SgPointerAssignOp enum constant to a string. */
    const char* E_SgPointerAssignOp(int64_t);

    /** Convert E_SgPointerAssignOp enum constant to a string. */
    std::string E_SgPointerAssignOp(int64_t, const std::string &strip);

    /** Return all E_SgPointerAssignOp member values as a vector. */
    const std::vector<int64_t>& E_SgPointerAssignOp();
}

namespace Rose {
    std::string stringifyE_SgPointerAssignOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgPointerAssignOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1113
namespace stringify {
    /** Convert E_SgUserDefinedBinaryOp enum constant to a string. */
    const char* E_SgUserDefinedBinaryOp(int64_t);

    /** Convert E_SgUserDefinedBinaryOp enum constant to a string. */
    std::string E_SgUserDefinedBinaryOp(int64_t, const std::string &strip);

    /** Return all E_SgUserDefinedBinaryOp member values as a vector. */
    const std::vector<int64_t>& E_SgUserDefinedBinaryOp();
}

namespace Rose {
    std::string stringifyE_SgUserDefinedBinaryOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUserDefinedBinaryOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1116
namespace stringify {
    /** Convert E_SgPlusAssignOp enum constant to a string. */
    const char* E_SgPlusAssignOp(int64_t);

    /** Convert E_SgPlusAssignOp enum constant to a string. */
    std::string E_SgPlusAssignOp(int64_t, const std::string &strip);

    /** Return all E_SgPlusAssignOp member values as a vector. */
    const std::vector<int64_t>& E_SgPlusAssignOp();
}

namespace Rose {
    std::string stringifyE_SgPlusAssignOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgPlusAssignOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1119
namespace stringify {
    /** Convert E_SgMinusAssignOp enum constant to a string. */
    const char* E_SgMinusAssignOp(int64_t);

    /** Convert E_SgMinusAssignOp enum constant to a string. */
    std::string E_SgMinusAssignOp(int64_t, const std::string &strip);

    /** Return all E_SgMinusAssignOp member values as a vector. */
    const std::vector<int64_t>& E_SgMinusAssignOp();
}

namespace Rose {
    std::string stringifyE_SgMinusAssignOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgMinusAssignOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1122
namespace stringify {
    /** Convert E_SgAndAssignOp enum constant to a string. */
    const char* E_SgAndAssignOp(int64_t);

    /** Convert E_SgAndAssignOp enum constant to a string. */
    std::string E_SgAndAssignOp(int64_t, const std::string &strip);

    /** Return all E_SgAndAssignOp member values as a vector. */
    const std::vector<int64_t>& E_SgAndAssignOp();
}

namespace Rose {
    std::string stringifyE_SgAndAssignOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAndAssignOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1125
namespace stringify {
    /** Convert E_SgIorAssignOp enum constant to a string. */
    const char* E_SgIorAssignOp(int64_t);

    /** Convert E_SgIorAssignOp enum constant to a string. */
    std::string E_SgIorAssignOp(int64_t, const std::string &strip);

    /** Return all E_SgIorAssignOp member values as a vector. */
    const std::vector<int64_t>& E_SgIorAssignOp();
}

namespace Rose {
    std::string stringifyE_SgIorAssignOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgIorAssignOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1128
namespace stringify {
    /** Convert E_SgMultAssignOp enum constant to a string. */
    const char* E_SgMultAssignOp(int64_t);

    /** Convert E_SgMultAssignOp enum constant to a string. */
    std::string E_SgMultAssignOp(int64_t, const std::string &strip);

    /** Return all E_SgMultAssignOp member values as a vector. */
    const std::vector<int64_t>& E_SgMultAssignOp();
}

namespace Rose {
    std::string stringifyE_SgMultAssignOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgMultAssignOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1131
namespace stringify {
    /** Convert E_SgDivAssignOp enum constant to a string. */
    const char* E_SgDivAssignOp(int64_t);

    /** Convert E_SgDivAssignOp enum constant to a string. */
    std::string E_SgDivAssignOp(int64_t, const std::string &strip);

    /** Return all E_SgDivAssignOp member values as a vector. */
    const std::vector<int64_t>& E_SgDivAssignOp();
}

namespace Rose {
    std::string stringifyE_SgDivAssignOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgDivAssignOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1134
namespace stringify {
    /** Convert E_SgModAssignOp enum constant to a string. */
    const char* E_SgModAssignOp(int64_t);

    /** Convert E_SgModAssignOp enum constant to a string. */
    std::string E_SgModAssignOp(int64_t, const std::string &strip);

    /** Return all E_SgModAssignOp member values as a vector. */
    const std::vector<int64_t>& E_SgModAssignOp();
}

namespace Rose {
    std::string stringifyE_SgModAssignOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgModAssignOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1137
namespace stringify {
    /** Convert E_SgXorAssignOp enum constant to a string. */
    const char* E_SgXorAssignOp(int64_t);

    /** Convert E_SgXorAssignOp enum constant to a string. */
    std::string E_SgXorAssignOp(int64_t, const std::string &strip);

    /** Return all E_SgXorAssignOp member values as a vector. */
    const std::vector<int64_t>& E_SgXorAssignOp();
}

namespace Rose {
    std::string stringifyE_SgXorAssignOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgXorAssignOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1140
namespace stringify {
    /** Convert E_SgLshiftAssignOp enum constant to a string. */
    const char* E_SgLshiftAssignOp(int64_t);

    /** Convert E_SgLshiftAssignOp enum constant to a string. */
    std::string E_SgLshiftAssignOp(int64_t, const std::string &strip);

    /** Return all E_SgLshiftAssignOp member values as a vector. */
    const std::vector<int64_t>& E_SgLshiftAssignOp();
}

namespace Rose {
    std::string stringifyE_SgLshiftAssignOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgLshiftAssignOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1143
namespace stringify {
    /** Convert E_SgRshiftAssignOp enum constant to a string. */
    const char* E_SgRshiftAssignOp(int64_t);

    /** Convert E_SgRshiftAssignOp enum constant to a string. */
    std::string E_SgRshiftAssignOp(int64_t, const std::string &strip);

    /** Return all E_SgRshiftAssignOp member values as a vector. */
    const std::vector<int64_t>& E_SgRshiftAssignOp();
}

namespace Rose {
    std::string stringifyE_SgRshiftAssignOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgRshiftAssignOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1146
namespace stringify {
    /** Convert E_SgJavaUnsignedRshiftAssignOp enum constant to a string. */
    const char* E_SgJavaUnsignedRshiftAssignOp(int64_t);

    /** Convert E_SgJavaUnsignedRshiftAssignOp enum constant to a string. */
    std::string E_SgJavaUnsignedRshiftAssignOp(int64_t, const std::string &strip);

    /** Return all E_SgJavaUnsignedRshiftAssignOp member values as a vector. */
    const std::vector<int64_t>& E_SgJavaUnsignedRshiftAssignOp();
}

namespace Rose {
    std::string stringifyE_SgJavaUnsignedRshiftAssignOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgJavaUnsignedRshiftAssignOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1149
namespace stringify {
    /** Convert E_SgIntegerDivideAssignOp enum constant to a string. */
    const char* E_SgIntegerDivideAssignOp(int64_t);

    /** Convert E_SgIntegerDivideAssignOp enum constant to a string. */
    std::string E_SgIntegerDivideAssignOp(int64_t, const std::string &strip);

    /** Return all E_SgIntegerDivideAssignOp member values as a vector. */
    const std::vector<int64_t>& E_SgIntegerDivideAssignOp();
}

namespace Rose {
    std::string stringifyE_SgIntegerDivideAssignOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgIntegerDivideAssignOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1152
namespace stringify {
    /** Convert E_SgExponentiationAssignOp enum constant to a string. */
    const char* E_SgExponentiationAssignOp(int64_t);

    /** Convert E_SgExponentiationAssignOp enum constant to a string. */
    std::string E_SgExponentiationAssignOp(int64_t, const std::string &strip);

    /** Return all E_SgExponentiationAssignOp member values as a vector. */
    const std::vector<int64_t>& E_SgExponentiationAssignOp();
}

namespace Rose {
    std::string stringifyE_SgExponentiationAssignOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgExponentiationAssignOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1155
namespace stringify {
    /** Convert E_SgCompoundAssignOp enum constant to a string. */
    const char* E_SgCompoundAssignOp(int64_t);

    /** Convert E_SgCompoundAssignOp enum constant to a string. */
    std::string E_SgCompoundAssignOp(int64_t, const std::string &strip);

    /** Return all E_SgCompoundAssignOp member values as a vector. */
    const std::vector<int64_t>& E_SgCompoundAssignOp();
}

namespace Rose {
    std::string stringifyE_SgCompoundAssignOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgCompoundAssignOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1158
namespace stringify {
    /** Convert E_SgMembershipOp enum constant to a string. */
    const char* E_SgMembershipOp(int64_t);

    /** Convert E_SgMembershipOp enum constant to a string. */
    std::string E_SgMembershipOp(int64_t, const std::string &strip);

    /** Return all E_SgMembershipOp member values as a vector. */
    const std::vector<int64_t>& E_SgMembershipOp();
}

namespace Rose {
    std::string stringifyE_SgMembershipOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgMembershipOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1161
namespace stringify {
    /** Convert E_SgSpaceshipOp enum constant to a string. */
    const char* E_SgSpaceshipOp(int64_t);

    /** Convert E_SgSpaceshipOp enum constant to a string. */
    std::string E_SgSpaceshipOp(int64_t, const std::string &strip);

    /** Return all E_SgSpaceshipOp member values as a vector. */
    const std::vector<int64_t>& E_SgSpaceshipOp();
}

namespace Rose {
    std::string stringifyE_SgSpaceshipOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSpaceshipOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1164
namespace stringify {
    /** Convert E_SgNonMembershipOp enum constant to a string. */
    const char* E_SgNonMembershipOp(int64_t);

    /** Convert E_SgNonMembershipOp enum constant to a string. */
    std::string E_SgNonMembershipOp(int64_t, const std::string &strip);

    /** Return all E_SgNonMembershipOp member values as a vector. */
    const std::vector<int64_t>& E_SgNonMembershipOp();
}

namespace Rose {
    std::string stringifyE_SgNonMembershipOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgNonMembershipOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1167
namespace stringify {
    /** Convert E_SgIsOp enum constant to a string. */
    const char* E_SgIsOp(int64_t);

    /** Convert E_SgIsOp enum constant to a string. */
    std::string E_SgIsOp(int64_t, const std::string &strip);

    /** Return all E_SgIsOp member values as a vector. */
    const std::vector<int64_t>& E_SgIsOp();
}

namespace Rose {
    std::string stringifyE_SgIsOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgIsOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1170
namespace stringify {
    /** Convert E_SgIsNotOp enum constant to a string. */
    const char* E_SgIsNotOp(int64_t);

    /** Convert E_SgIsNotOp enum constant to a string. */
    std::string E_SgIsNotOp(int64_t, const std::string &strip);

    /** Return all E_SgIsNotOp member values as a vector. */
    const std::vector<int64_t>& E_SgIsNotOp();
}

namespace Rose {
    std::string stringifyE_SgIsNotOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgIsNotOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1173
namespace stringify {
    /** Convert E_SgDotDotExp enum constant to a string. */
    const char* E_SgDotDotExp(int64_t);

    /** Convert E_SgDotDotExp enum constant to a string. */
    std::string E_SgDotDotExp(int64_t, const std::string &strip);

    /** Return all E_SgDotDotExp member values as a vector. */
    const std::vector<int64_t>& E_SgDotDotExp();
}

namespace Rose {
    std::string stringifyE_SgDotDotExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgDotDotExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1176
namespace stringify {
    /** Convert E_SgElementwiseMultiplyOp enum constant to a string. */
    const char* E_SgElementwiseMultiplyOp(int64_t);

    /** Convert E_SgElementwiseMultiplyOp enum constant to a string. */
    std::string E_SgElementwiseMultiplyOp(int64_t, const std::string &strip);

    /** Return all E_SgElementwiseMultiplyOp member values as a vector. */
    const std::vector<int64_t>& E_SgElementwiseMultiplyOp();
}

namespace Rose {
    std::string stringifyE_SgElementwiseMultiplyOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgElementwiseMultiplyOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1179
namespace stringify {
    /** Convert E_SgElementwisePowerOp enum constant to a string. */
    const char* E_SgElementwisePowerOp(int64_t);

    /** Convert E_SgElementwisePowerOp enum constant to a string. */
    std::string E_SgElementwisePowerOp(int64_t, const std::string &strip);

    /** Return all E_SgElementwisePowerOp member values as a vector. */
    const std::vector<int64_t>& E_SgElementwisePowerOp();
}

namespace Rose {
    std::string stringifyE_SgElementwisePowerOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgElementwisePowerOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1182
namespace stringify {
    /** Convert E_SgElementwiseLeftDivideOp enum constant to a string. */
    const char* E_SgElementwiseLeftDivideOp(int64_t);

    /** Convert E_SgElementwiseLeftDivideOp enum constant to a string. */
    std::string E_SgElementwiseLeftDivideOp(int64_t, const std::string &strip);

    /** Return all E_SgElementwiseLeftDivideOp member values as a vector. */
    const std::vector<int64_t>& E_SgElementwiseLeftDivideOp();
}

namespace Rose {
    std::string stringifyE_SgElementwiseLeftDivideOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgElementwiseLeftDivideOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1185
namespace stringify {
    /** Convert E_SgElementwiseDivideOp enum constant to a string. */
    const char* E_SgElementwiseDivideOp(int64_t);

    /** Convert E_SgElementwiseDivideOp enum constant to a string. */
    std::string E_SgElementwiseDivideOp(int64_t, const std::string &strip);

    /** Return all E_SgElementwiseDivideOp member values as a vector. */
    const std::vector<int64_t>& E_SgElementwiseDivideOp();
}

namespace Rose {
    std::string stringifyE_SgElementwiseDivideOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgElementwiseDivideOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1188
namespace stringify {
    /** Convert E_SgElementwiseAddOp enum constant to a string. */
    const char* E_SgElementwiseAddOp(int64_t);

    /** Convert E_SgElementwiseAddOp enum constant to a string. */
    std::string E_SgElementwiseAddOp(int64_t, const std::string &strip);

    /** Return all E_SgElementwiseAddOp member values as a vector. */
    const std::vector<int64_t>& E_SgElementwiseAddOp();
}

namespace Rose {
    std::string stringifyE_SgElementwiseAddOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgElementwiseAddOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1191
namespace stringify {
    /** Convert E_SgElementwiseSubtractOp enum constant to a string. */
    const char* E_SgElementwiseSubtractOp(int64_t);

    /** Convert E_SgElementwiseSubtractOp enum constant to a string. */
    std::string E_SgElementwiseSubtractOp(int64_t, const std::string &strip);

    /** Return all E_SgElementwiseSubtractOp member values as a vector. */
    const std::vector<int64_t>& E_SgElementwiseSubtractOp();
}

namespace Rose {
    std::string stringifyE_SgElementwiseSubtractOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgElementwiseSubtractOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1194
namespace stringify {
    /** Convert E_SgElementwiseOp enum constant to a string. */
    const char* E_SgElementwiseOp(int64_t);

    /** Convert E_SgElementwiseOp enum constant to a string. */
    std::string E_SgElementwiseOp(int64_t, const std::string &strip);

    /** Return all E_SgElementwiseOp member values as a vector. */
    const std::vector<int64_t>& E_SgElementwiseOp();
}

namespace Rose {
    std::string stringifyE_SgElementwiseOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgElementwiseOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1197
namespace stringify {
    /** Convert E_SgPowerOp enum constant to a string. */
    const char* E_SgPowerOp(int64_t);

    /** Convert E_SgPowerOp enum constant to a string. */
    std::string E_SgPowerOp(int64_t, const std::string &strip);

    /** Return all E_SgPowerOp member values as a vector. */
    const std::vector<int64_t>& E_SgPowerOp();
}

namespace Rose {
    std::string stringifyE_SgPowerOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgPowerOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1200
namespace stringify {
    /** Convert E_SgLeftDivideOp enum constant to a string. */
    const char* E_SgLeftDivideOp(int64_t);

    /** Convert E_SgLeftDivideOp enum constant to a string. */
    std::string E_SgLeftDivideOp(int64_t, const std::string &strip);

    /** Return all E_SgLeftDivideOp member values as a vector. */
    const std::vector<int64_t>& E_SgLeftDivideOp();
}

namespace Rose {
    std::string stringifyE_SgLeftDivideOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgLeftDivideOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1203
namespace stringify {
    /** Convert E_SgRemOp enum constant to a string. */
    const char* E_SgRemOp(int64_t);

    /** Convert E_SgRemOp enum constant to a string. */
    std::string E_SgRemOp(int64_t, const std::string &strip);

    /** Return all E_SgRemOp member values as a vector. */
    const std::vector<int64_t>& E_SgRemOp();
}

namespace Rose {
    std::string stringifyE_SgRemOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgRemOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1206
namespace stringify {
    /** Convert E_SgReplicationOp enum constant to a string. */
    const char* E_SgReplicationOp(int64_t);

    /** Convert E_SgReplicationOp enum constant to a string. */
    std::string E_SgReplicationOp(int64_t, const std::string &strip);

    /** Return all E_SgReplicationOp member values as a vector. */
    const std::vector<int64_t>& E_SgReplicationOp();
}

namespace Rose {
    std::string stringifyE_SgReplicationOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgReplicationOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1209
namespace stringify {
    /** Convert E_SgBinaryOp enum constant to a string. */
    const char* E_SgBinaryOp(int64_t);

    /** Convert E_SgBinaryOp enum constant to a string. */
    std::string E_SgBinaryOp(int64_t, const std::string &strip);

    /** Return all E_SgBinaryOp member values as a vector. */
    const std::vector<int64_t>& E_SgBinaryOp();
}

namespace Rose {
    std::string stringifyE_SgBinaryOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgBinaryOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1212
namespace stringify {
    /** Convert E_SgListExp enum constant to a string. */
    const char* E_SgListExp(int64_t);

    /** Convert E_SgListExp enum constant to a string. */
    std::string E_SgListExp(int64_t, const std::string &strip);

    /** Return all E_SgListExp member values as a vector. */
    const std::vector<int64_t>& E_SgListExp();
}

namespace Rose {
    std::string stringifyE_SgListExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgListExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1215
namespace stringify {
    /** Convert E_SgTupleExp enum constant to a string. */
    const char* E_SgTupleExp(int64_t);

    /** Convert E_SgTupleExp enum constant to a string. */
    std::string E_SgTupleExp(int64_t, const std::string &strip);

    /** Return all E_SgTupleExp member values as a vector. */
    const std::vector<int64_t>& E_SgTupleExp();
}

namespace Rose {
    std::string stringifyE_SgTupleExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTupleExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1218
namespace stringify {
    /** Convert E_SgMatrixExp enum constant to a string. */
    const char* E_SgMatrixExp(int64_t);

    /** Convert E_SgMatrixExp enum constant to a string. */
    std::string E_SgMatrixExp(int64_t, const std::string &strip);

    /** Return all E_SgMatrixExp member values as a vector. */
    const std::vector<int64_t>& E_SgMatrixExp();
}

namespace Rose {
    std::string stringifyE_SgMatrixExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgMatrixExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1221
namespace stringify {
    /** Convert E_SgExprListExp enum constant to a string. */
    const char* E_SgExprListExp(int64_t);

    /** Convert E_SgExprListExp enum constant to a string. */
    std::string E_SgExprListExp(int64_t, const std::string &strip);

    /** Return all E_SgExprListExp member values as a vector. */
    const std::vector<int64_t>& E_SgExprListExp();
}

namespace Rose {
    std::string stringifyE_SgExprListExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgExprListExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1224
namespace stringify {
    /** Convert E_SgComplexVal enum constant to a string. */
    const char* E_SgComplexVal(int64_t);

    /** Convert E_SgComplexVal enum constant to a string. */
    std::string E_SgComplexVal(int64_t, const std::string &strip);

    /** Return all E_SgComplexVal member values as a vector. */
    const std::vector<int64_t>& E_SgComplexVal();
}

namespace Rose {
    std::string stringifyE_SgComplexVal(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgComplexVal();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1227
namespace stringify {
    /** Convert E_SgCudaKernelCallExp enum constant to a string. */
    const char* E_SgCudaKernelCallExp(int64_t);

    /** Convert E_SgCudaKernelCallExp enum constant to a string. */
    std::string E_SgCudaKernelCallExp(int64_t, const std::string &strip);

    /** Return all E_SgCudaKernelCallExp member values as a vector. */
    const std::vector<int64_t>& E_SgCudaKernelCallExp();
}

namespace Rose {
    std::string stringifyE_SgCudaKernelCallExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgCudaKernelCallExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1230
namespace stringify {
    /** Convert E_SgFunctionCallExp enum constant to a string. */
    const char* E_SgFunctionCallExp(int64_t);

    /** Convert E_SgFunctionCallExp enum constant to a string. */
    std::string E_SgFunctionCallExp(int64_t, const std::string &strip);

    /** Return all E_SgFunctionCallExp member values as a vector. */
    const std::vector<int64_t>& E_SgFunctionCallExp();
}

namespace Rose {
    std::string stringifyE_SgFunctionCallExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgFunctionCallExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1233
namespace stringify {
    /** Convert E_SgCallExpression enum constant to a string. */
    const char* E_SgCallExpression(int64_t);

    /** Convert E_SgCallExpression enum constant to a string. */
    std::string E_SgCallExpression(int64_t, const std::string &strip);

    /** Return all E_SgCallExpression member values as a vector. */
    const std::vector<int64_t>& E_SgCallExpression();
}

namespace Rose {
    std::string stringifyE_SgCallExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgCallExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1236
namespace stringify {
    /** Convert E_SgSizeOfOp enum constant to a string. */
    const char* E_SgSizeOfOp(int64_t);

    /** Convert E_SgSizeOfOp enum constant to a string. */
    std::string E_SgSizeOfOp(int64_t, const std::string &strip);

    /** Return all E_SgSizeOfOp member values as a vector. */
    const std::vector<int64_t>& E_SgSizeOfOp();
}

namespace Rose {
    std::string stringifyE_SgSizeOfOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSizeOfOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1239
namespace stringify {
    /** Convert E_SgUpcLocalsizeofExpression enum constant to a string. */
    const char* E_SgUpcLocalsizeofExpression(int64_t);

    /** Convert E_SgUpcLocalsizeofExpression enum constant to a string. */
    std::string E_SgUpcLocalsizeofExpression(int64_t, const std::string &strip);

    /** Return all E_SgUpcLocalsizeofExpression member values as a vector. */
    const std::vector<int64_t>& E_SgUpcLocalsizeofExpression();
}

namespace Rose {
    std::string stringifyE_SgUpcLocalsizeofExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUpcLocalsizeofExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1242
namespace stringify {
    /** Convert E_SgUpcBlocksizeofExpression enum constant to a string. */
    const char* E_SgUpcBlocksizeofExpression(int64_t);

    /** Convert E_SgUpcBlocksizeofExpression enum constant to a string. */
    std::string E_SgUpcBlocksizeofExpression(int64_t, const std::string &strip);

    /** Return all E_SgUpcBlocksizeofExpression member values as a vector. */
    const std::vector<int64_t>& E_SgUpcBlocksizeofExpression();
}

namespace Rose {
    std::string stringifyE_SgUpcBlocksizeofExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUpcBlocksizeofExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1245
namespace stringify {
    /** Convert E_SgUpcElemsizeofExpression enum constant to a string. */
    const char* E_SgUpcElemsizeofExpression(int64_t);

    /** Convert E_SgUpcElemsizeofExpression enum constant to a string. */
    std::string E_SgUpcElemsizeofExpression(int64_t, const std::string &strip);

    /** Return all E_SgUpcElemsizeofExpression member values as a vector. */
    const std::vector<int64_t>& E_SgUpcElemsizeofExpression();
}

namespace Rose {
    std::string stringifyE_SgUpcElemsizeofExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUpcElemsizeofExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1248
namespace stringify {
    /** Convert E_SgJavaInstanceOfOp enum constant to a string. */
    const char* E_SgJavaInstanceOfOp(int64_t);

    /** Convert E_SgJavaInstanceOfOp enum constant to a string. */
    std::string E_SgJavaInstanceOfOp(int64_t, const std::string &strip);

    /** Return all E_SgJavaInstanceOfOp member values as a vector. */
    const std::vector<int64_t>& E_SgJavaInstanceOfOp();
}

namespace Rose {
    std::string stringifyE_SgJavaInstanceOfOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgJavaInstanceOfOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1251
namespace stringify {
    /** Convert E_SgTypeIdOp enum constant to a string. */
    const char* E_SgTypeIdOp(int64_t);

    /** Convert E_SgTypeIdOp enum constant to a string. */
    std::string E_SgTypeIdOp(int64_t, const std::string &strip);

    /** Return all E_SgTypeIdOp member values as a vector. */
    const std::vector<int64_t>& E_SgTypeIdOp();
}

namespace Rose {
    std::string stringifyE_SgTypeIdOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypeIdOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1254
namespace stringify {
    /** Convert E_SgConditionalExp enum constant to a string. */
    const char* E_SgConditionalExp(int64_t);

    /** Convert E_SgConditionalExp enum constant to a string. */
    std::string E_SgConditionalExp(int64_t, const std::string &strip);

    /** Return all E_SgConditionalExp member values as a vector. */
    const std::vector<int64_t>& E_SgConditionalExp();
}

namespace Rose {
    std::string stringifyE_SgConditionalExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgConditionalExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1257
namespace stringify {
    /** Convert E_SgNewExp enum constant to a string. */
    const char* E_SgNewExp(int64_t);

    /** Convert E_SgNewExp enum constant to a string. */
    std::string E_SgNewExp(int64_t, const std::string &strip);

    /** Return all E_SgNewExp member values as a vector. */
    const std::vector<int64_t>& E_SgNewExp();
}

namespace Rose {
    std::string stringifyE_SgNewExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgNewExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1260
namespace stringify {
    /** Convert E_SgDeleteExp enum constant to a string. */
    const char* E_SgDeleteExp(int64_t);

    /** Convert E_SgDeleteExp enum constant to a string. */
    std::string E_SgDeleteExp(int64_t, const std::string &strip);

    /** Return all E_SgDeleteExp member values as a vector. */
    const std::vector<int64_t>& E_SgDeleteExp();
}

namespace Rose {
    std::string stringifyE_SgDeleteExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgDeleteExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1263
namespace stringify {
    /** Convert E_SgAggregateInitializer enum constant to a string. */
    const char* E_SgAggregateInitializer(int64_t);

    /** Convert E_SgAggregateInitializer enum constant to a string. */
    std::string E_SgAggregateInitializer(int64_t, const std::string &strip);

    /** Return all E_SgAggregateInitializer member values as a vector. */
    const std::vector<int64_t>& E_SgAggregateInitializer();
}

namespace Rose {
    std::string stringifyE_SgAggregateInitializer(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAggregateInitializer();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1266
namespace stringify {
    /** Convert E_SgCompoundInitializer enum constant to a string. */
    const char* E_SgCompoundInitializer(int64_t);

    /** Convert E_SgCompoundInitializer enum constant to a string. */
    std::string E_SgCompoundInitializer(int64_t, const std::string &strip);

    /** Return all E_SgCompoundInitializer member values as a vector. */
    const std::vector<int64_t>& E_SgCompoundInitializer();
}

namespace Rose {
    std::string stringifyE_SgCompoundInitializer(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgCompoundInitializer();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1269
namespace stringify {
    /** Convert E_SgConstructorInitializer enum constant to a string. */
    const char* E_SgConstructorInitializer(int64_t);

    /** Convert E_SgConstructorInitializer enum constant to a string. */
    std::string E_SgConstructorInitializer(int64_t, const std::string &strip);

    /** Return all E_SgConstructorInitializer member values as a vector. */
    const std::vector<int64_t>& E_SgConstructorInitializer();
}

namespace Rose {
    std::string stringifyE_SgConstructorInitializer(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgConstructorInitializer();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1272
namespace stringify {
    /** Convert E_SgAssignInitializer enum constant to a string. */
    const char* E_SgAssignInitializer(int64_t);

    /** Convert E_SgAssignInitializer enum constant to a string. */
    std::string E_SgAssignInitializer(int64_t, const std::string &strip);

    /** Return all E_SgAssignInitializer member values as a vector. */
    const std::vector<int64_t>& E_SgAssignInitializer();
}

namespace Rose {
    std::string stringifyE_SgAssignInitializer(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAssignInitializer();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1275
namespace stringify {
    /** Convert E_SgDesignatedInitializer enum constant to a string. */
    const char* E_SgDesignatedInitializer(int64_t);

    /** Convert E_SgDesignatedInitializer enum constant to a string. */
    std::string E_SgDesignatedInitializer(int64_t, const std::string &strip);

    /** Return all E_SgDesignatedInitializer member values as a vector. */
    const std::vector<int64_t>& E_SgDesignatedInitializer();
}

namespace Rose {
    std::string stringifyE_SgDesignatedInitializer(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgDesignatedInitializer();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1278
namespace stringify {
    /** Convert E_SgBracedInitializer enum constant to a string. */
    const char* E_SgBracedInitializer(int64_t);

    /** Convert E_SgBracedInitializer enum constant to a string. */
    std::string E_SgBracedInitializer(int64_t, const std::string &strip);

    /** Return all E_SgBracedInitializer member values as a vector. */
    const std::vector<int64_t>& E_SgBracedInitializer();
}

namespace Rose {
    std::string stringifyE_SgBracedInitializer(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgBracedInitializer();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1281
namespace stringify {
    /** Convert E_SgVarArgStartOp enum constant to a string. */
    const char* E_SgVarArgStartOp(int64_t);

    /** Convert E_SgVarArgStartOp enum constant to a string. */
    std::string E_SgVarArgStartOp(int64_t, const std::string &strip);

    /** Return all E_SgVarArgStartOp member values as a vector. */
    const std::vector<int64_t>& E_SgVarArgStartOp();
}

namespace Rose {
    std::string stringifyE_SgVarArgStartOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgVarArgStartOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1284
namespace stringify {
    /** Convert E_SgVarArgOp enum constant to a string. */
    const char* E_SgVarArgOp(int64_t);

    /** Convert E_SgVarArgOp enum constant to a string. */
    std::string E_SgVarArgOp(int64_t, const std::string &strip);

    /** Return all E_SgVarArgOp member values as a vector. */
    const std::vector<int64_t>& E_SgVarArgOp();
}

namespace Rose {
    std::string stringifyE_SgVarArgOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgVarArgOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1287
namespace stringify {
    /** Convert E_SgVarArgEndOp enum constant to a string. */
    const char* E_SgVarArgEndOp(int64_t);

    /** Convert E_SgVarArgEndOp enum constant to a string. */
    std::string E_SgVarArgEndOp(int64_t, const std::string &strip);

    /** Return all E_SgVarArgEndOp member values as a vector. */
    const std::vector<int64_t>& E_SgVarArgEndOp();
}

namespace Rose {
    std::string stringifyE_SgVarArgEndOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgVarArgEndOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1290
namespace stringify {
    /** Convert E_SgVarArgCopyOp enum constant to a string. */
    const char* E_SgVarArgCopyOp(int64_t);

    /** Convert E_SgVarArgCopyOp enum constant to a string. */
    std::string E_SgVarArgCopyOp(int64_t, const std::string &strip);

    /** Return all E_SgVarArgCopyOp member values as a vector. */
    const std::vector<int64_t>& E_SgVarArgCopyOp();
}

namespace Rose {
    std::string stringifyE_SgVarArgCopyOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgVarArgCopyOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1293
namespace stringify {
    /** Convert E_SgVarArgStartOneOperandOp enum constant to a string. */
    const char* E_SgVarArgStartOneOperandOp(int64_t);

    /** Convert E_SgVarArgStartOneOperandOp enum constant to a string. */
    std::string E_SgVarArgStartOneOperandOp(int64_t, const std::string &strip);

    /** Return all E_SgVarArgStartOneOperandOp member values as a vector. */
    const std::vector<int64_t>& E_SgVarArgStartOneOperandOp();
}

namespace Rose {
    std::string stringifyE_SgVarArgStartOneOperandOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgVarArgStartOneOperandOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1296
namespace stringify {
    /** Convert E_SgSubscriptExpression enum constant to a string. */
    const char* E_SgSubscriptExpression(int64_t);

    /** Convert E_SgSubscriptExpression enum constant to a string. */
    std::string E_SgSubscriptExpression(int64_t, const std::string &strip);

    /** Return all E_SgSubscriptExpression member values as a vector. */
    const std::vector<int64_t>& E_SgSubscriptExpression();
}

namespace Rose {
    std::string stringifyE_SgSubscriptExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSubscriptExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1299
namespace stringify {
    /** Convert E_SgImpliedDo enum constant to a string. */
    const char* E_SgImpliedDo(int64_t);

    /** Convert E_SgImpliedDo enum constant to a string. */
    std::string E_SgImpliedDo(int64_t, const std::string &strip);

    /** Return all E_SgImpliedDo member values as a vector. */
    const std::vector<int64_t>& E_SgImpliedDo();
}

namespace Rose {
    std::string stringifyE_SgImpliedDo(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgImpliedDo();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1302
namespace stringify {
    /** Convert E_SgIOItemExpression enum constant to a string. */
    const char* E_SgIOItemExpression(int64_t);

    /** Convert E_SgIOItemExpression enum constant to a string. */
    std::string E_SgIOItemExpression(int64_t, const std::string &strip);

    /** Return all E_SgIOItemExpression member values as a vector. */
    const std::vector<int64_t>& E_SgIOItemExpression();
}

namespace Rose {
    std::string stringifyE_SgIOItemExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgIOItemExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1305
namespace stringify {
    /** Convert E_SgStatementExpression enum constant to a string. */
    const char* E_SgStatementExpression(int64_t);

    /** Convert E_SgStatementExpression enum constant to a string. */
    std::string E_SgStatementExpression(int64_t, const std::string &strip);

    /** Return all E_SgStatementExpression member values as a vector. */
    const std::vector<int64_t>& E_SgStatementExpression();
}

namespace Rose {
    std::string stringifyE_SgStatementExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgStatementExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1308
namespace stringify {
    /** Convert E_SgAsmOp enum constant to a string. */
    const char* E_SgAsmOp(int64_t);

    /** Convert E_SgAsmOp enum constant to a string. */
    std::string E_SgAsmOp(int64_t, const std::string &strip);

    /** Return all E_SgAsmOp member values as a vector. */
    const std::vector<int64_t>& E_SgAsmOp();
}

namespace Rose {
    std::string stringifyE_SgAsmOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1311
namespace stringify {
    /** Convert E_SgActualArgumentExpression enum constant to a string. */
    const char* E_SgActualArgumentExpression(int64_t);

    /** Convert E_SgActualArgumentExpression enum constant to a string. */
    std::string E_SgActualArgumentExpression(int64_t, const std::string &strip);

    /** Return all E_SgActualArgumentExpression member values as a vector. */
    const std::vector<int64_t>& E_SgActualArgumentExpression();
}

namespace Rose {
    std::string stringifyE_SgActualArgumentExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgActualArgumentExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1314
namespace stringify {
    /** Convert E_SgUnknownArrayOrFunctionReference enum constant to a string. */
    const char* E_SgUnknownArrayOrFunctionReference(int64_t);

    /** Convert E_SgUnknownArrayOrFunctionReference enum constant to a string. */
    std::string E_SgUnknownArrayOrFunctionReference(int64_t, const std::string &strip);

    /** Return all E_SgUnknownArrayOrFunctionReference member values as a vector. */
    const std::vector<int64_t>& E_SgUnknownArrayOrFunctionReference();
}

namespace Rose {
    std::string stringifyE_SgUnknownArrayOrFunctionReference(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgUnknownArrayOrFunctionReference();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1317
namespace stringify {
    /** Convert E_SgCAFCoExpression enum constant to a string. */
    const char* E_SgCAFCoExpression(int64_t);

    /** Convert E_SgCAFCoExpression enum constant to a string. */
    std::string E_SgCAFCoExpression(int64_t, const std::string &strip);

    /** Return all E_SgCAFCoExpression member values as a vector. */
    const std::vector<int64_t>& E_SgCAFCoExpression();
}

namespace Rose {
    std::string stringifyE_SgCAFCoExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgCAFCoExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1320
namespace stringify {
    /** Convert E_SgCudaKernelExecConfig enum constant to a string. */
    const char* E_SgCudaKernelExecConfig(int64_t);

    /** Convert E_SgCudaKernelExecConfig enum constant to a string. */
    std::string E_SgCudaKernelExecConfig(int64_t, const std::string &strip);

    /** Return all E_SgCudaKernelExecConfig member values as a vector. */
    const std::vector<int64_t>& E_SgCudaKernelExecConfig();
}

namespace Rose {
    std::string stringifyE_SgCudaKernelExecConfig(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgCudaKernelExecConfig();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1323
namespace stringify {
    /** Convert E_SgLambdaRefExp enum constant to a string. */
    const char* E_SgLambdaRefExp(int64_t);

    /** Convert E_SgLambdaRefExp enum constant to a string. */
    std::string E_SgLambdaRefExp(int64_t, const std::string &strip);

    /** Return all E_SgLambdaRefExp member values as a vector. */
    const std::vector<int64_t>& E_SgLambdaRefExp();
}

namespace Rose {
    std::string stringifyE_SgLambdaRefExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgLambdaRefExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1326
namespace stringify {
    /** Convert E_SgDictionaryExp enum constant to a string. */
    const char* E_SgDictionaryExp(int64_t);

    /** Convert E_SgDictionaryExp enum constant to a string. */
    std::string E_SgDictionaryExp(int64_t, const std::string &strip);

    /** Return all E_SgDictionaryExp member values as a vector. */
    const std::vector<int64_t>& E_SgDictionaryExp();
}

namespace Rose {
    std::string stringifyE_SgDictionaryExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgDictionaryExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1329
namespace stringify {
    /** Convert E_SgKeyDatumPair enum constant to a string. */
    const char* E_SgKeyDatumPair(int64_t);

    /** Convert E_SgKeyDatumPair enum constant to a string. */
    std::string E_SgKeyDatumPair(int64_t, const std::string &strip);

    /** Return all E_SgKeyDatumPair member values as a vector. */
    const std::vector<int64_t>& E_SgKeyDatumPair();
}

namespace Rose {
    std::string stringifyE_SgKeyDatumPair(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgKeyDatumPair();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1332
namespace stringify {
    /** Convert E_SgComprehension enum constant to a string. */
    const char* E_SgComprehension(int64_t);

    /** Convert E_SgComprehension enum constant to a string. */
    std::string E_SgComprehension(int64_t, const std::string &strip);

    /** Return all E_SgComprehension member values as a vector. */
    const std::vector<int64_t>& E_SgComprehension();
}

namespace Rose {
    std::string stringifyE_SgComprehension(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgComprehension();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1335
namespace stringify {
    /** Convert E_SgListComprehension enum constant to a string. */
    const char* E_SgListComprehension(int64_t);

    /** Convert E_SgListComprehension enum constant to a string. */
    std::string E_SgListComprehension(int64_t, const std::string &strip);

    /** Return all E_SgListComprehension member values as a vector. */
    const std::vector<int64_t>& E_SgListComprehension();
}

namespace Rose {
    std::string stringifyE_SgListComprehension(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgListComprehension();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1338
namespace stringify {
    /** Convert E_SgSetComprehension enum constant to a string. */
    const char* E_SgSetComprehension(int64_t);

    /** Convert E_SgSetComprehension enum constant to a string. */
    std::string E_SgSetComprehension(int64_t, const std::string &strip);

    /** Return all E_SgSetComprehension member values as a vector. */
    const std::vector<int64_t>& E_SgSetComprehension();
}

namespace Rose {
    std::string stringifyE_SgSetComprehension(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgSetComprehension();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1341
namespace stringify {
    /** Convert E_SgDictionaryComprehension enum constant to a string. */
    const char* E_SgDictionaryComprehension(int64_t);

    /** Convert E_SgDictionaryComprehension enum constant to a string. */
    std::string E_SgDictionaryComprehension(int64_t, const std::string &strip);

    /** Return all E_SgDictionaryComprehension member values as a vector. */
    const std::vector<int64_t>& E_SgDictionaryComprehension();
}

namespace Rose {
    std::string stringifyE_SgDictionaryComprehension(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgDictionaryComprehension();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1344
namespace stringify {
    /** Convert E_SgNaryBooleanOp enum constant to a string. */
    const char* E_SgNaryBooleanOp(int64_t);

    /** Convert E_SgNaryBooleanOp enum constant to a string. */
    std::string E_SgNaryBooleanOp(int64_t, const std::string &strip);

    /** Return all E_SgNaryBooleanOp member values as a vector. */
    const std::vector<int64_t>& E_SgNaryBooleanOp();
}

namespace Rose {
    std::string stringifyE_SgNaryBooleanOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgNaryBooleanOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1347
namespace stringify {
    /** Convert E_SgNaryComparisonOp enum constant to a string. */
    const char* E_SgNaryComparisonOp(int64_t);

    /** Convert E_SgNaryComparisonOp enum constant to a string. */
    std::string E_SgNaryComparisonOp(int64_t, const std::string &strip);

    /** Return all E_SgNaryComparisonOp member values as a vector. */
    const std::vector<int64_t>& E_SgNaryComparisonOp();
}

namespace Rose {
    std::string stringifyE_SgNaryComparisonOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgNaryComparisonOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1350
namespace stringify {
    /** Convert E_SgNaryOp enum constant to a string. */
    const char* E_SgNaryOp(int64_t);

    /** Convert E_SgNaryOp enum constant to a string. */
    std::string E_SgNaryOp(int64_t, const std::string &strip);

    /** Return all E_SgNaryOp member values as a vector. */
    const std::vector<int64_t>& E_SgNaryOp();
}

namespace Rose {
    std::string stringifyE_SgNaryOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgNaryOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1353
namespace stringify {
    /** Convert E_SgStringConversion enum constant to a string. */
    const char* E_SgStringConversion(int64_t);

    /** Convert E_SgStringConversion enum constant to a string. */
    std::string E_SgStringConversion(int64_t, const std::string &strip);

    /** Return all E_SgStringConversion member values as a vector. */
    const std::vector<int64_t>& E_SgStringConversion();
}

namespace Rose {
    std::string stringifyE_SgStringConversion(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgStringConversion();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1356
namespace stringify {
    /** Convert E_SgYieldExpression enum constant to a string. */
    const char* E_SgYieldExpression(int64_t);

    /** Convert E_SgYieldExpression enum constant to a string. */
    std::string E_SgYieldExpression(int64_t, const std::string &strip);

    /** Return all E_SgYieldExpression member values as a vector. */
    const std::vector<int64_t>& E_SgYieldExpression();
}

namespace Rose {
    std::string stringifyE_SgYieldExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgYieldExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1359
namespace stringify {
    /** Convert E_SgAlignOfOp enum constant to a string. */
    const char* E_SgAlignOfOp(int64_t);

    /** Convert E_SgAlignOfOp enum constant to a string. */
    std::string E_SgAlignOfOp(int64_t, const std::string &strip);

    /** Return all E_SgAlignOfOp member values as a vector. */
    const std::vector<int64_t>& E_SgAlignOfOp();
}

namespace Rose {
    std::string stringifyE_SgAlignOfOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAlignOfOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1362
namespace stringify {
    /** Convert E_SgRangeExp enum constant to a string. */
    const char* E_SgRangeExp(int64_t);

    /** Convert E_SgRangeExp enum constant to a string. */
    std::string E_SgRangeExp(int64_t, const std::string &strip);

    /** Return all E_SgRangeExp member values as a vector. */
    const std::vector<int64_t>& E_SgRangeExp();
}

namespace Rose {
    std::string stringifyE_SgRangeExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgRangeExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1365
namespace stringify {
    /** Convert E_SgJavaSingleMemberAnnotation enum constant to a string. */
    const char* E_SgJavaSingleMemberAnnotation(int64_t);

    /** Convert E_SgJavaSingleMemberAnnotation enum constant to a string. */
    std::string E_SgJavaSingleMemberAnnotation(int64_t, const std::string &strip);

    /** Return all E_SgJavaSingleMemberAnnotation member values as a vector. */
    const std::vector<int64_t>& E_SgJavaSingleMemberAnnotation();
}

namespace Rose {
    std::string stringifyE_SgJavaSingleMemberAnnotation(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgJavaSingleMemberAnnotation();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1368
namespace stringify {
    /** Convert E_SgJavaNormalAnnotation enum constant to a string. */
    const char* E_SgJavaNormalAnnotation(int64_t);

    /** Convert E_SgJavaNormalAnnotation enum constant to a string. */
    std::string E_SgJavaNormalAnnotation(int64_t, const std::string &strip);

    /** Return all E_SgJavaNormalAnnotation member values as a vector. */
    const std::vector<int64_t>& E_SgJavaNormalAnnotation();
}

namespace Rose {
    std::string stringifyE_SgJavaNormalAnnotation(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgJavaNormalAnnotation();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1371
namespace stringify {
    /** Convert E_SgFunctionParameterRefExp enum constant to a string. */
    const char* E_SgFunctionParameterRefExp(int64_t);

    /** Convert E_SgFunctionParameterRefExp enum constant to a string. */
    std::string E_SgFunctionParameterRefExp(int64_t, const std::string &strip);

    /** Return all E_SgFunctionParameterRefExp member values as a vector. */
    const std::vector<int64_t>& E_SgFunctionParameterRefExp();
}

namespace Rose {
    std::string stringifyE_SgFunctionParameterRefExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgFunctionParameterRefExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1374
namespace stringify {
    /** Convert E_SgLambdaExp enum constant to a string. */
    const char* E_SgLambdaExp(int64_t);

    /** Convert E_SgLambdaExp enum constant to a string. */
    std::string E_SgLambdaExp(int64_t, const std::string &strip);

    /** Return all E_SgLambdaExp member values as a vector. */
    const std::vector<int64_t>& E_SgLambdaExp();
}

namespace Rose {
    std::string stringifyE_SgLambdaExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgLambdaExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1377
namespace stringify {
    /** Convert E_SgHereExp enum constant to a string. */
    const char* E_SgHereExp(int64_t);

    /** Convert E_SgHereExp enum constant to a string. */
    std::string E_SgHereExp(int64_t, const std::string &strip);

    /** Return all E_SgHereExp member values as a vector. */
    const std::vector<int64_t>& E_SgHereExp();
}

namespace Rose {
    std::string stringifyE_SgHereExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgHereExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1380
namespace stringify {
    /** Convert E_SgAtExp enum constant to a string. */
    const char* E_SgAtExp(int64_t);

    /** Convert E_SgAtExp enum constant to a string. */
    std::string E_SgAtExp(int64_t, const std::string &strip);

    /** Return all E_SgAtExp member values as a vector. */
    const std::vector<int64_t>& E_SgAtExp();
}

namespace Rose {
    std::string stringifyE_SgAtExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAtExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1383
namespace stringify {
    /** Convert E_SgFinishExp enum constant to a string. */
    const char* E_SgFinishExp(int64_t);

    /** Convert E_SgFinishExp enum constant to a string. */
    std::string E_SgFinishExp(int64_t, const std::string &strip);

    /** Return all E_SgFinishExp member values as a vector. */
    const std::vector<int64_t>& E_SgFinishExp();
}

namespace Rose {
    std::string stringifyE_SgFinishExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgFinishExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1386
namespace stringify {
    /** Convert E_SgNoexceptOp enum constant to a string. */
    const char* E_SgNoexceptOp(int64_t);

    /** Convert E_SgNoexceptOp enum constant to a string. */
    std::string E_SgNoexceptOp(int64_t, const std::string &strip);

    /** Return all E_SgNoexceptOp member values as a vector. */
    const std::vector<int64_t>& E_SgNoexceptOp();
}

namespace Rose {
    std::string stringifyE_SgNoexceptOp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgNoexceptOp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1389
namespace stringify {
    /** Convert E_SgFoldExpression enum constant to a string. */
    const char* E_SgFoldExpression(int64_t);

    /** Convert E_SgFoldExpression enum constant to a string. */
    std::string E_SgFoldExpression(int64_t, const std::string &strip);

    /** Return all E_SgFoldExpression member values as a vector. */
    const std::vector<int64_t>& E_SgFoldExpression();
}

namespace Rose {
    std::string stringifyE_SgFoldExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgFoldExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1392
namespace stringify {
    /** Convert E_SgAwaitExpression enum constant to a string. */
    const char* E_SgAwaitExpression(int64_t);

    /** Convert E_SgAwaitExpression enum constant to a string. */
    std::string E_SgAwaitExpression(int64_t, const std::string &strip);

    /** Return all E_SgAwaitExpression member values as a vector. */
    const std::vector<int64_t>& E_SgAwaitExpression();
}

namespace Rose {
    std::string stringifyE_SgAwaitExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAwaitExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1395
namespace stringify {
    /** Convert E_SgChooseExpression enum constant to a string. */
    const char* E_SgChooseExpression(int64_t);

    /** Convert E_SgChooseExpression enum constant to a string. */
    std::string E_SgChooseExpression(int64_t, const std::string &strip);

    /** Return all E_SgChooseExpression member values as a vector. */
    const std::vector<int64_t>& E_SgChooseExpression();
}

namespace Rose {
    std::string stringifyE_SgChooseExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgChooseExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1398
namespace stringify {
    /** Convert E_SgJovialTablePresetExp enum constant to a string. */
    const char* E_SgJovialTablePresetExp(int64_t);

    /** Convert E_SgJovialTablePresetExp enum constant to a string. */
    std::string E_SgJovialTablePresetExp(int64_t, const std::string &strip);

    /** Return all E_SgJovialTablePresetExp member values as a vector. */
    const std::vector<int64_t>& E_SgJovialTablePresetExp();
}

namespace Rose {
    std::string stringifyE_SgJovialTablePresetExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgJovialTablePresetExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1401
namespace stringify {
    /** Convert E_SgNonrealSymbol enum constant to a string. */
    const char* E_SgNonrealSymbol(int64_t);

    /** Convert E_SgNonrealSymbol enum constant to a string. */
    std::string E_SgNonrealSymbol(int64_t, const std::string &strip);

    /** Return all E_SgNonrealSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgNonrealSymbol();
}

namespace Rose {
    std::string stringifyE_SgNonrealSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgNonrealSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1404
namespace stringify {
    /** Convert E_SgTemplateMemberFunctionSymbol enum constant to a string. */
    const char* E_SgTemplateMemberFunctionSymbol(int64_t);

    /** Convert E_SgTemplateMemberFunctionSymbol enum constant to a string. */
    std::string E_SgTemplateMemberFunctionSymbol(int64_t, const std::string &strip);

    /** Return all E_SgTemplateMemberFunctionSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateMemberFunctionSymbol();
}

namespace Rose {
    std::string stringifyE_SgTemplateMemberFunctionSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateMemberFunctionSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1407
namespace stringify {
    /** Convert E_SgMemberFunctionSymbol enum constant to a string. */
    const char* E_SgMemberFunctionSymbol(int64_t);

    /** Convert E_SgMemberFunctionSymbol enum constant to a string. */
    std::string E_SgMemberFunctionSymbol(int64_t, const std::string &strip);

    /** Return all E_SgMemberFunctionSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgMemberFunctionSymbol();
}

namespace Rose {
    std::string stringifyE_SgMemberFunctionSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgMemberFunctionSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1410
namespace stringify {
    /** Convert E_SgTemplateFunctionSymbol enum constant to a string. */
    const char* E_SgTemplateFunctionSymbol(int64_t);

    /** Convert E_SgTemplateFunctionSymbol enum constant to a string. */
    std::string E_SgTemplateFunctionSymbol(int64_t, const std::string &strip);

    /** Return all E_SgTemplateFunctionSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateFunctionSymbol();
}

namespace Rose {
    std::string stringifyE_SgTemplateFunctionSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateFunctionSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1413
namespace stringify {
    /** Convert E_SgRenameSymbol enum constant to a string. */
    const char* E_SgRenameSymbol(int64_t);

    /** Convert E_SgRenameSymbol enum constant to a string. */
    std::string E_SgRenameSymbol(int64_t, const std::string &strip);

    /** Return all E_SgRenameSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgRenameSymbol();
}

namespace Rose {
    std::string stringifyE_SgRenameSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgRenameSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1416
namespace stringify {
    /** Convert E_SgFunctionSymbol enum constant to a string. */
    const char* E_SgFunctionSymbol(int64_t);

    /** Convert E_SgFunctionSymbol enum constant to a string. */
    std::string E_SgFunctionSymbol(int64_t, const std::string &strip);

    /** Return all E_SgFunctionSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgFunctionSymbol();
}

namespace Rose {
    std::string stringifyE_SgFunctionSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgFunctionSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1419
namespace stringify {
    /** Convert E_SgTemplateClassSymbol enum constant to a string. */
    const char* E_SgTemplateClassSymbol(int64_t);

    /** Convert E_SgTemplateClassSymbol enum constant to a string. */
    std::string E_SgTemplateClassSymbol(int64_t, const std::string &strip);

    /** Return all E_SgTemplateClassSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateClassSymbol();
}

namespace Rose {
    std::string stringifyE_SgTemplateClassSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateClassSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1422
namespace stringify {
    /** Convert E_SgClassSymbol enum constant to a string. */
    const char* E_SgClassSymbol(int64_t);

    /** Convert E_SgClassSymbol enum constant to a string. */
    std::string E_SgClassSymbol(int64_t, const std::string &strip);

    /** Return all E_SgClassSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgClassSymbol();
}

namespace Rose {
    std::string stringifyE_SgClassSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgClassSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1425
namespace stringify {
    /** Convert E_SgTemplateSymbol enum constant to a string. */
    const char* E_SgTemplateSymbol(int64_t);

    /** Convert E_SgTemplateSymbol enum constant to a string. */
    std::string E_SgTemplateSymbol(int64_t, const std::string &strip);

    /** Return all E_SgTemplateSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateSymbol();
}

namespace Rose {
    std::string stringifyE_SgTemplateSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1428
namespace stringify {
    /** Convert E_SgEnumSymbol enum constant to a string. */
    const char* E_SgEnumSymbol(int64_t);

    /** Convert E_SgEnumSymbol enum constant to a string. */
    std::string E_SgEnumSymbol(int64_t, const std::string &strip);

    /** Return all E_SgEnumSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgEnumSymbol();
}

namespace Rose {
    std::string stringifyE_SgEnumSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgEnumSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1431
namespace stringify {
    /** Convert E_SgTemplateTypedefSymbol enum constant to a string. */
    const char* E_SgTemplateTypedefSymbol(int64_t);

    /** Convert E_SgTemplateTypedefSymbol enum constant to a string. */
    std::string E_SgTemplateTypedefSymbol(int64_t, const std::string &strip);

    /** Return all E_SgTemplateTypedefSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgTemplateTypedefSymbol();
}

namespace Rose {
    std::string stringifyE_SgTemplateTypedefSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTemplateTypedefSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1434
namespace stringify {
    /** Convert E_SgTypedefSymbol enum constant to a string. */
    const char* E_SgTypedefSymbol(int64_t);

    /** Convert E_SgTypedefSymbol enum constant to a string. */
    std::string E_SgTypedefSymbol(int64_t, const std::string &strip);

    /** Return all E_SgTypedefSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgTypedefSymbol();
}

namespace Rose {
    std::string stringifyE_SgTypedefSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgTypedefSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1437
namespace stringify {
    /** Convert E_SgLabelSymbol enum constant to a string. */
    const char* E_SgLabelSymbol(int64_t);

    /** Convert E_SgLabelSymbol enum constant to a string. */
    std::string E_SgLabelSymbol(int64_t, const std::string &strip);

    /** Return all E_SgLabelSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgLabelSymbol();
}

namespace Rose {
    std::string stringifyE_SgLabelSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgLabelSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1440
namespace stringify {
    /** Convert E_SgNamespaceSymbol enum constant to a string. */
    const char* E_SgNamespaceSymbol(int64_t);

    /** Convert E_SgNamespaceSymbol enum constant to a string. */
    std::string E_SgNamespaceSymbol(int64_t, const std::string &strip);

    /** Return all E_SgNamespaceSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgNamespaceSymbol();
}

namespace Rose {
    std::string stringifyE_SgNamespaceSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgNamespaceSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1443
namespace stringify {
    /** Convert E_SgModuleSymbol enum constant to a string. */
    const char* E_SgModuleSymbol(int64_t);

    /** Convert E_SgModuleSymbol enum constant to a string. */
    std::string E_SgModuleSymbol(int64_t, const std::string &strip);

    /** Return all E_SgModuleSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgModuleSymbol();
}

namespace Rose {
    std::string stringifyE_SgModuleSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgModuleSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1446
namespace stringify {
    /** Convert E_SgAliasSymbol enum constant to a string. */
    const char* E_SgAliasSymbol(int64_t);

    /** Convert E_SgAliasSymbol enum constant to a string. */
    std::string E_SgAliasSymbol(int64_t, const std::string &strip);

    /** Return all E_SgAliasSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgAliasSymbol();
}

namespace Rose {
    std::string stringifyE_SgAliasSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAliasSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1449
namespace stringify {
    /** Convert E_SgJavaLabelSymbol enum constant to a string. */
    const char* E_SgJavaLabelSymbol(int64_t);

    /** Convert E_SgJavaLabelSymbol enum constant to a string. */
    std::string E_SgJavaLabelSymbol(int64_t, const std::string &strip);

    /** Return all E_SgJavaLabelSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgJavaLabelSymbol();
}

namespace Rose {
    std::string stringifyE_SgJavaLabelSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgJavaLabelSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1452
namespace stringify {
    /** Convert E_SgAdaPackageSymbol enum constant to a string. */
    const char* E_SgAdaPackageSymbol(int64_t);

    /** Convert E_SgAdaPackageSymbol enum constant to a string. */
    std::string E_SgAdaPackageSymbol(int64_t, const std::string &strip);

    /** Return all E_SgAdaPackageSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgAdaPackageSymbol();
}

namespace Rose {
    std::string stringifyE_SgAdaPackageSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAdaPackageSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1455
namespace stringify {
    /** Convert E_SgAdaTaskSymbol enum constant to a string. */
    const char* E_SgAdaTaskSymbol(int64_t);

    /** Convert E_SgAdaTaskSymbol enum constant to a string. */
    std::string E_SgAdaTaskSymbol(int64_t, const std::string &strip);

    /** Return all E_SgAdaTaskSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgAdaTaskSymbol();
}

namespace Rose {
    std::string stringifyE_SgAdaTaskSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAdaTaskSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1458
namespace stringify {
    /** Convert E_SgAsmFunction enum constant to a string. */
    const char* E_SgAsmFunction(int64_t);

    /** Convert E_SgAsmFunction enum constant to a string. */
    std::string E_SgAsmFunction(int64_t, const std::string &strip);

    /** Return all E_SgAsmFunction member values as a vector. */
    const std::vector<int64_t>& E_SgAsmFunction();
}

namespace Rose {
    std::string stringifyE_SgAsmFunction(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmFunction();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1461
namespace stringify {
    /** Convert E_SgAsmBlock enum constant to a string. */
    const char* E_SgAsmBlock(int64_t);

    /** Convert E_SgAsmBlock enum constant to a string. */
    std::string E_SgAsmBlock(int64_t, const std::string &strip);

    /** Return all E_SgAsmBlock member values as a vector. */
    const std::vector<int64_t>& E_SgAsmBlock();
}

namespace Rose {
    std::string stringifyE_SgAsmBlock(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmBlock();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1464
namespace stringify {
    /** Convert E_SgAsmX86Instruction enum constant to a string. */
    const char* E_SgAsmX86Instruction(int64_t);

    /** Convert E_SgAsmX86Instruction enum constant to a string. */
    std::string E_SgAsmX86Instruction(int64_t, const std::string &strip);

    /** Return all E_SgAsmX86Instruction member values as a vector. */
    const std::vector<int64_t>& E_SgAsmX86Instruction();
}

namespace Rose {
    std::string stringifyE_SgAsmX86Instruction(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmX86Instruction();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1467
namespace stringify {
    /** Convert E_SgAsmA64Instruction enum constant to a string. */
    const char* E_SgAsmA64Instruction(int64_t);

    /** Convert E_SgAsmA64Instruction enum constant to a string. */
    std::string E_SgAsmA64Instruction(int64_t, const std::string &strip);

    /** Return all E_SgAsmA64Instruction member values as a vector. */
    const std::vector<int64_t>& E_SgAsmA64Instruction();
}

namespace Rose {
    std::string stringifyE_SgAsmA64Instruction(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmA64Instruction();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1470
namespace stringify {
    /** Convert E_SgAsmPowerpcInstruction enum constant to a string. */
    const char* E_SgAsmPowerpcInstruction(int64_t);

    /** Convert E_SgAsmPowerpcInstruction enum constant to a string. */
    std::string E_SgAsmPowerpcInstruction(int64_t, const std::string &strip);

    /** Return all E_SgAsmPowerpcInstruction member values as a vector. */
    const std::vector<int64_t>& E_SgAsmPowerpcInstruction();
}

namespace Rose {
    std::string stringifyE_SgAsmPowerpcInstruction(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmPowerpcInstruction();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1473
namespace stringify {
    /** Convert E_SgAsmMipsInstruction enum constant to a string. */
    const char* E_SgAsmMipsInstruction(int64_t);

    /** Convert E_SgAsmMipsInstruction enum constant to a string. */
    std::string E_SgAsmMipsInstruction(int64_t, const std::string &strip);

    /** Return all E_SgAsmMipsInstruction member values as a vector. */
    const std::vector<int64_t>& E_SgAsmMipsInstruction();
}

namespace Rose {
    std::string stringifyE_SgAsmMipsInstruction(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmMipsInstruction();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1476
namespace stringify {
    /** Convert E_SgAsmM68kInstruction enum constant to a string. */
    const char* E_SgAsmM68kInstruction(int64_t);

    /** Convert E_SgAsmM68kInstruction enum constant to a string. */
    std::string E_SgAsmM68kInstruction(int64_t, const std::string &strip);

    /** Return all E_SgAsmM68kInstruction member values as a vector. */
    const std::vector<int64_t>& E_SgAsmM68kInstruction();
}

namespace Rose {
    std::string stringifyE_SgAsmM68kInstruction(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmM68kInstruction();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1479
namespace stringify {
    /** Convert E_SgAsmInstruction enum constant to a string. */
    const char* E_SgAsmInstruction(int64_t);

    /** Convert E_SgAsmInstruction enum constant to a string. */
    std::string E_SgAsmInstruction(int64_t, const std::string &strip);

    /** Return all E_SgAsmInstruction member values as a vector. */
    const std::vector<int64_t>& E_SgAsmInstruction();
}

namespace Rose {
    std::string stringifyE_SgAsmInstruction(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmInstruction();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1482
namespace stringify {
    /** Convert E_SgAsmIntegerValueExpression enum constant to a string. */
    const char* E_SgAsmIntegerValueExpression(int64_t);

    /** Convert E_SgAsmIntegerValueExpression enum constant to a string. */
    std::string E_SgAsmIntegerValueExpression(int64_t, const std::string &strip);

    /** Return all E_SgAsmIntegerValueExpression member values as a vector. */
    const std::vector<int64_t>& E_SgAsmIntegerValueExpression();
}

namespace Rose {
    std::string stringifyE_SgAsmIntegerValueExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmIntegerValueExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1485
namespace stringify {
    /** Convert E_SgAsmFloatValueExpression enum constant to a string. */
    const char* E_SgAsmFloatValueExpression(int64_t);

    /** Convert E_SgAsmFloatValueExpression enum constant to a string. */
    std::string E_SgAsmFloatValueExpression(int64_t, const std::string &strip);

    /** Return all E_SgAsmFloatValueExpression member values as a vector. */
    const std::vector<int64_t>& E_SgAsmFloatValueExpression();
}

namespace Rose {
    std::string stringifyE_SgAsmFloatValueExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmFloatValueExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1488
namespace stringify {
    /** Convert E_SgAsmConstantExpression enum constant to a string. */
    const char* E_SgAsmConstantExpression(int64_t);

    /** Convert E_SgAsmConstantExpression enum constant to a string. */
    std::string E_SgAsmConstantExpression(int64_t, const std::string &strip);

    /** Return all E_SgAsmConstantExpression member values as a vector. */
    const std::vector<int64_t>& E_SgAsmConstantExpression();
}

namespace Rose {
    std::string stringifyE_SgAsmConstantExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmConstantExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1491
namespace stringify {
    /** Convert E_SgAsmValueExpression enum constant to a string. */
    const char* E_SgAsmValueExpression(int64_t);

    /** Convert E_SgAsmValueExpression enum constant to a string. */
    std::string E_SgAsmValueExpression(int64_t, const std::string &strip);

    /** Return all E_SgAsmValueExpression member values as a vector. */
    const std::vector<int64_t>& E_SgAsmValueExpression();
}

namespace Rose {
    std::string stringifyE_SgAsmValueExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmValueExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1494
namespace stringify {
    /** Convert E_SgAsmBinaryAdd enum constant to a string. */
    const char* E_SgAsmBinaryAdd(int64_t);

    /** Convert E_SgAsmBinaryAdd enum constant to a string. */
    std::string E_SgAsmBinaryAdd(int64_t, const std::string &strip);

    /** Return all E_SgAsmBinaryAdd member values as a vector. */
    const std::vector<int64_t>& E_SgAsmBinaryAdd();
}

namespace Rose {
    std::string stringifyE_SgAsmBinaryAdd(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmBinaryAdd();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1497
namespace stringify {
    /** Convert E_SgAsmBinarySubtract enum constant to a string. */
    const char* E_SgAsmBinarySubtract(int64_t);

    /** Convert E_SgAsmBinarySubtract enum constant to a string. */
    std::string E_SgAsmBinarySubtract(int64_t, const std::string &strip);

    /** Return all E_SgAsmBinarySubtract member values as a vector. */
    const std::vector<int64_t>& E_SgAsmBinarySubtract();
}

namespace Rose {
    std::string stringifyE_SgAsmBinarySubtract(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmBinarySubtract();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1500
namespace stringify {
    /** Convert E_SgAsmBinaryMultiply enum constant to a string. */
    const char* E_SgAsmBinaryMultiply(int64_t);

    /** Convert E_SgAsmBinaryMultiply enum constant to a string. */
    std::string E_SgAsmBinaryMultiply(int64_t, const std::string &strip);

    /** Return all E_SgAsmBinaryMultiply member values as a vector. */
    const std::vector<int64_t>& E_SgAsmBinaryMultiply();
}

namespace Rose {
    std::string stringifyE_SgAsmBinaryMultiply(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmBinaryMultiply();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1503
namespace stringify {
    /** Convert E_SgAsmBinaryDivide enum constant to a string. */
    const char* E_SgAsmBinaryDivide(int64_t);

    /** Convert E_SgAsmBinaryDivide enum constant to a string. */
    std::string E_SgAsmBinaryDivide(int64_t, const std::string &strip);

    /** Return all E_SgAsmBinaryDivide member values as a vector. */
    const std::vector<int64_t>& E_SgAsmBinaryDivide();
}

namespace Rose {
    std::string stringifyE_SgAsmBinaryDivide(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmBinaryDivide();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1506
namespace stringify {
    /** Convert E_SgAsmBinaryMod enum constant to a string. */
    const char* E_SgAsmBinaryMod(int64_t);

    /** Convert E_SgAsmBinaryMod enum constant to a string. */
    std::string E_SgAsmBinaryMod(int64_t, const std::string &strip);

    /** Return all E_SgAsmBinaryMod member values as a vector. */
    const std::vector<int64_t>& E_SgAsmBinaryMod();
}

namespace Rose {
    std::string stringifyE_SgAsmBinaryMod(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmBinaryMod();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1509
namespace stringify {
    /** Convert E_SgAsmBinaryAddPreupdate enum constant to a string. */
    const char* E_SgAsmBinaryAddPreupdate(int64_t);

    /** Convert E_SgAsmBinaryAddPreupdate enum constant to a string. */
    std::string E_SgAsmBinaryAddPreupdate(int64_t, const std::string &strip);

    /** Return all E_SgAsmBinaryAddPreupdate member values as a vector. */
    const std::vector<int64_t>& E_SgAsmBinaryAddPreupdate();
}

namespace Rose {
    std::string stringifyE_SgAsmBinaryAddPreupdate(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmBinaryAddPreupdate();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1512
namespace stringify {
    /** Convert E_SgAsmBinarySubtractPreupdate enum constant to a string. */
    const char* E_SgAsmBinarySubtractPreupdate(int64_t);

    /** Convert E_SgAsmBinarySubtractPreupdate enum constant to a string. */
    std::string E_SgAsmBinarySubtractPreupdate(int64_t, const std::string &strip);

    /** Return all E_SgAsmBinarySubtractPreupdate member values as a vector. */
    const std::vector<int64_t>& E_SgAsmBinarySubtractPreupdate();
}

namespace Rose {
    std::string stringifyE_SgAsmBinarySubtractPreupdate(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmBinarySubtractPreupdate();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1515
namespace stringify {
    /** Convert E_SgAsmBinaryAddPostupdate enum constant to a string. */
    const char* E_SgAsmBinaryAddPostupdate(int64_t);

    /** Convert E_SgAsmBinaryAddPostupdate enum constant to a string. */
    std::string E_SgAsmBinaryAddPostupdate(int64_t, const std::string &strip);

    /** Return all E_SgAsmBinaryAddPostupdate member values as a vector. */
    const std::vector<int64_t>& E_SgAsmBinaryAddPostupdate();
}

namespace Rose {
    std::string stringifyE_SgAsmBinaryAddPostupdate(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmBinaryAddPostupdate();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1518
namespace stringify {
    /** Convert E_SgAsmBinarySubtractPostupdate enum constant to a string. */
    const char* E_SgAsmBinarySubtractPostupdate(int64_t);

    /** Convert E_SgAsmBinarySubtractPostupdate enum constant to a string. */
    std::string E_SgAsmBinarySubtractPostupdate(int64_t, const std::string &strip);

    /** Return all E_SgAsmBinarySubtractPostupdate member values as a vector. */
    const std::vector<int64_t>& E_SgAsmBinarySubtractPostupdate();
}

namespace Rose {
    std::string stringifyE_SgAsmBinarySubtractPostupdate(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmBinarySubtractPostupdate();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1521
namespace stringify {
    /** Convert E_SgAsmBinaryLsl enum constant to a string. */
    const char* E_SgAsmBinaryLsl(int64_t);

    /** Convert E_SgAsmBinaryLsl enum constant to a string. */
    std::string E_SgAsmBinaryLsl(int64_t, const std::string &strip);

    /** Return all E_SgAsmBinaryLsl member values as a vector. */
    const std::vector<int64_t>& E_SgAsmBinaryLsl();
}

namespace Rose {
    std::string stringifyE_SgAsmBinaryLsl(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmBinaryLsl();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1524
namespace stringify {
    /** Convert E_SgAsmBinaryLsr enum constant to a string. */
    const char* E_SgAsmBinaryLsr(int64_t);

    /** Convert E_SgAsmBinaryLsr enum constant to a string. */
    std::string E_SgAsmBinaryLsr(int64_t, const std::string &strip);

    /** Return all E_SgAsmBinaryLsr member values as a vector. */
    const std::vector<int64_t>& E_SgAsmBinaryLsr();
}

namespace Rose {
    std::string stringifyE_SgAsmBinaryLsr(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmBinaryLsr();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1527
namespace stringify {
    /** Convert E_SgAsmBinaryAsr enum constant to a string. */
    const char* E_SgAsmBinaryAsr(int64_t);

    /** Convert E_SgAsmBinaryAsr enum constant to a string. */
    std::string E_SgAsmBinaryAsr(int64_t, const std::string &strip);

    /** Return all E_SgAsmBinaryAsr member values as a vector. */
    const std::vector<int64_t>& E_SgAsmBinaryAsr();
}

namespace Rose {
    std::string stringifyE_SgAsmBinaryAsr(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmBinaryAsr();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1530
namespace stringify {
    /** Convert E_SgAsmBinaryRor enum constant to a string. */
    const char* E_SgAsmBinaryRor(int64_t);

    /** Convert E_SgAsmBinaryRor enum constant to a string. */
    std::string E_SgAsmBinaryRor(int64_t, const std::string &strip);

    /** Return all E_SgAsmBinaryRor member values as a vector. */
    const std::vector<int64_t>& E_SgAsmBinaryRor();
}

namespace Rose {
    std::string stringifyE_SgAsmBinaryRor(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmBinaryRor();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1533
namespace stringify {
    /** Convert E_SgAsmBinaryMsl enum constant to a string. */
    const char* E_SgAsmBinaryMsl(int64_t);

    /** Convert E_SgAsmBinaryMsl enum constant to a string. */
    std::string E_SgAsmBinaryMsl(int64_t, const std::string &strip);

    /** Return all E_SgAsmBinaryMsl member values as a vector. */
    const std::vector<int64_t>& E_SgAsmBinaryMsl();
}

namespace Rose {
    std::string stringifyE_SgAsmBinaryMsl(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmBinaryMsl();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1536
namespace stringify {
    /** Convert E_SgAsmBinaryExpression enum constant to a string. */
    const char* E_SgAsmBinaryExpression(int64_t);

    /** Convert E_SgAsmBinaryExpression enum constant to a string. */
    std::string E_SgAsmBinaryExpression(int64_t, const std::string &strip);

    /** Return all E_SgAsmBinaryExpression member values as a vector. */
    const std::vector<int64_t>& E_SgAsmBinaryExpression();
}

namespace Rose {
    std::string stringifyE_SgAsmBinaryExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmBinaryExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1539
namespace stringify {
    /** Convert E_SgAsmUnaryPlus enum constant to a string. */
    const char* E_SgAsmUnaryPlus(int64_t);

    /** Convert E_SgAsmUnaryPlus enum constant to a string. */
    std::string E_SgAsmUnaryPlus(int64_t, const std::string &strip);

    /** Return all E_SgAsmUnaryPlus member values as a vector. */
    const std::vector<int64_t>& E_SgAsmUnaryPlus();
}

namespace Rose {
    std::string stringifyE_SgAsmUnaryPlus(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmUnaryPlus();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1542
namespace stringify {
    /** Convert E_SgAsmUnaryMinus enum constant to a string. */
    const char* E_SgAsmUnaryMinus(int64_t);

    /** Convert E_SgAsmUnaryMinus enum constant to a string. */
    std::string E_SgAsmUnaryMinus(int64_t, const std::string &strip);

    /** Return all E_SgAsmUnaryMinus member values as a vector. */
    const std::vector<int64_t>& E_SgAsmUnaryMinus();
}

namespace Rose {
    std::string stringifyE_SgAsmUnaryMinus(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmUnaryMinus();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1545
namespace stringify {
    /** Convert E_SgAsmUnaryRrx enum constant to a string. */
    const char* E_SgAsmUnaryRrx(int64_t);

    /** Convert E_SgAsmUnaryRrx enum constant to a string. */
    std::string E_SgAsmUnaryRrx(int64_t, const std::string &strip);

    /** Return all E_SgAsmUnaryRrx member values as a vector. */
    const std::vector<int64_t>& E_SgAsmUnaryRrx();
}

namespace Rose {
    std::string stringifyE_SgAsmUnaryRrx(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmUnaryRrx();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1548
namespace stringify {
    /** Convert E_SgAsmUnaryTruncate enum constant to a string. */
    const char* E_SgAsmUnaryTruncate(int64_t);

    /** Convert E_SgAsmUnaryTruncate enum constant to a string. */
    std::string E_SgAsmUnaryTruncate(int64_t, const std::string &strip);

    /** Return all E_SgAsmUnaryTruncate member values as a vector. */
    const std::vector<int64_t>& E_SgAsmUnaryTruncate();
}

namespace Rose {
    std::string stringifyE_SgAsmUnaryTruncate(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmUnaryTruncate();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1551
namespace stringify {
    /** Convert E_SgAsmUnarySignedExtend enum constant to a string. */
    const char* E_SgAsmUnarySignedExtend(int64_t);

    /** Convert E_SgAsmUnarySignedExtend enum constant to a string. */
    std::string E_SgAsmUnarySignedExtend(int64_t, const std::string &strip);

    /** Return all E_SgAsmUnarySignedExtend member values as a vector. */
    const std::vector<int64_t>& E_SgAsmUnarySignedExtend();
}

namespace Rose {
    std::string stringifyE_SgAsmUnarySignedExtend(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmUnarySignedExtend();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1554
namespace stringify {
    /** Convert E_SgAsmUnaryUnsignedExtend enum constant to a string. */
    const char* E_SgAsmUnaryUnsignedExtend(int64_t);

    /** Convert E_SgAsmUnaryUnsignedExtend enum constant to a string. */
    std::string E_SgAsmUnaryUnsignedExtend(int64_t, const std::string &strip);

    /** Return all E_SgAsmUnaryUnsignedExtend member values as a vector. */
    const std::vector<int64_t>& E_SgAsmUnaryUnsignedExtend();
}

namespace Rose {
    std::string stringifyE_SgAsmUnaryUnsignedExtend(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmUnaryUnsignedExtend();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1557
namespace stringify {
    /** Convert E_SgAsmA64AtOperand enum constant to a string. */
    const char* E_SgAsmA64AtOperand(int64_t);

    /** Convert E_SgAsmA64AtOperand enum constant to a string. */
    std::string E_SgAsmA64AtOperand(int64_t, const std::string &strip);

    /** Return all E_SgAsmA64AtOperand member values as a vector. */
    const std::vector<int64_t>& E_SgAsmA64AtOperand();
}

namespace Rose {
    std::string stringifyE_SgAsmA64AtOperand(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmA64AtOperand();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1560
namespace stringify {
    /** Convert E_SgAsmA64PrefetchOperand enum constant to a string. */
    const char* E_SgAsmA64PrefetchOperand(int64_t);

    /** Convert E_SgAsmA64PrefetchOperand enum constant to a string. */
    std::string E_SgAsmA64PrefetchOperand(int64_t, const std::string &strip);

    /** Return all E_SgAsmA64PrefetchOperand member values as a vector. */
    const std::vector<int64_t>& E_SgAsmA64PrefetchOperand();
}

namespace Rose {
    std::string stringifyE_SgAsmA64PrefetchOperand(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmA64PrefetchOperand();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1563
namespace stringify {
    /** Convert E_SgAsmA64SysMoveOperand enum constant to a string. */
    const char* E_SgAsmA64SysMoveOperand(int64_t);

    /** Convert E_SgAsmA64SysMoveOperand enum constant to a string. */
    std::string E_SgAsmA64SysMoveOperand(int64_t, const std::string &strip);

    /** Return all E_SgAsmA64SysMoveOperand member values as a vector. */
    const std::vector<int64_t>& E_SgAsmA64SysMoveOperand();
}

namespace Rose {
    std::string stringifyE_SgAsmA64SysMoveOperand(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmA64SysMoveOperand();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1566
namespace stringify {
    /** Convert E_SgAsmA64CImmediateOperand enum constant to a string. */
    const char* E_SgAsmA64CImmediateOperand(int64_t);

    /** Convert E_SgAsmA64CImmediateOperand enum constant to a string. */
    std::string E_SgAsmA64CImmediateOperand(int64_t, const std::string &strip);

    /** Return all E_SgAsmA64CImmediateOperand member values as a vector. */
    const std::vector<int64_t>& E_SgAsmA64CImmediateOperand();
}

namespace Rose {
    std::string stringifyE_SgAsmA64CImmediateOperand(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmA64CImmediateOperand();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1569
namespace stringify {
    /** Convert E_SgAsmA64BarrierOperand enum constant to a string. */
    const char* E_SgAsmA64BarrierOperand(int64_t);

    /** Convert E_SgAsmA64BarrierOperand enum constant to a string. */
    std::string E_SgAsmA64BarrierOperand(int64_t, const std::string &strip);

    /** Return all E_SgAsmA64BarrierOperand member values as a vector. */
    const std::vector<int64_t>& E_SgAsmA64BarrierOperand();
}

namespace Rose {
    std::string stringifyE_SgAsmA64BarrierOperand(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmA64BarrierOperand();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1572
namespace stringify {
    /** Convert E_SgAsmUnaryExpression enum constant to a string. */
    const char* E_SgAsmUnaryExpression(int64_t);

    /** Convert E_SgAsmUnaryExpression enum constant to a string. */
    std::string E_SgAsmUnaryExpression(int64_t, const std::string &strip);

    /** Return all E_SgAsmUnaryExpression member values as a vector. */
    const std::vector<int64_t>& E_SgAsmUnaryExpression();
}

namespace Rose {
    std::string stringifyE_SgAsmUnaryExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmUnaryExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1575
namespace stringify {
    /** Convert E_SgAsmMemoryReferenceExpression enum constant to a string. */
    const char* E_SgAsmMemoryReferenceExpression(int64_t);

    /** Convert E_SgAsmMemoryReferenceExpression enum constant to a string. */
    std::string E_SgAsmMemoryReferenceExpression(int64_t, const std::string &strip);

    /** Return all E_SgAsmMemoryReferenceExpression member values as a vector. */
    const std::vector<int64_t>& E_SgAsmMemoryReferenceExpression();
}

namespace Rose {
    std::string stringifyE_SgAsmMemoryReferenceExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmMemoryReferenceExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1578
namespace stringify {
    /** Convert E_SgAsmCommonSubExpression enum constant to a string. */
    const char* E_SgAsmCommonSubExpression(int64_t);

    /** Convert E_SgAsmCommonSubExpression enum constant to a string. */
    std::string E_SgAsmCommonSubExpression(int64_t, const std::string &strip);

    /** Return all E_SgAsmCommonSubExpression member values as a vector. */
    const std::vector<int64_t>& E_SgAsmCommonSubExpression();
}

namespace Rose {
    std::string stringifyE_SgAsmCommonSubExpression(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmCommonSubExpression();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1581
namespace stringify {
    /** Convert E_SgAsmExprListExp enum constant to a string. */
    const char* E_SgAsmExprListExp(int64_t);

    /** Convert E_SgAsmExprListExp enum constant to a string. */
    std::string E_SgAsmExprListExp(int64_t, const std::string &strip);

    /** Return all E_SgAsmExprListExp member values as a vector. */
    const std::vector<int64_t>& E_SgAsmExprListExp();
}

namespace Rose {
    std::string stringifyE_SgAsmExprListExp(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmExprListExp();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1584
namespace stringify {
    /** Convert E_SgAsmRegisterNames enum constant to a string. */
    const char* E_SgAsmRegisterNames(int64_t);

    /** Convert E_SgAsmRegisterNames enum constant to a string. */
    std::string E_SgAsmRegisterNames(int64_t, const std::string &strip);

    /** Return all E_SgAsmRegisterNames member values as a vector. */
    const std::vector<int64_t>& E_SgAsmRegisterNames();
}

namespace Rose {
    std::string stringifyE_SgAsmRegisterNames(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmRegisterNames();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1587
namespace stringify {
    /** Convert E_SgAsmRiscOperation enum constant to a string. */
    const char* E_SgAsmRiscOperation(int64_t);

    /** Convert E_SgAsmRiscOperation enum constant to a string. */
    std::string E_SgAsmRiscOperation(int64_t, const std::string &strip);

    /** Return all E_SgAsmRiscOperation member values as a vector. */
    const std::vector<int64_t>& E_SgAsmRiscOperation();
}

namespace Rose {
    std::string stringifyE_SgAsmRiscOperation(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmRiscOperation();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1590
namespace stringify {
    /** Convert E_SgAsmInterpretation enum constant to a string. */
    const char* E_SgAsmInterpretation(int64_t);

    /** Convert E_SgAsmInterpretation enum constant to a string. */
    std::string E_SgAsmInterpretation(int64_t, const std::string &strip);

    /** Return all E_SgAsmInterpretation member values as a vector. */
    const std::vector<int64_t>& E_SgAsmInterpretation();
}

namespace Rose {
    std::string stringifyE_SgAsmInterpretation(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmInterpretation();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1593
namespace stringify {
    /** Convert E_SgAsmOperandList enum constant to a string. */
    const char* E_SgAsmOperandList(int64_t);

    /** Convert E_SgAsmOperandList enum constant to a string. */
    std::string E_SgAsmOperandList(int64_t, const std::string &strip);

    /** Return all E_SgAsmOperandList member values as a vector. */
    const std::vector<int64_t>& E_SgAsmOperandList();
}

namespace Rose {
    std::string stringifyE_SgAsmOperandList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmOperandList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1596
namespace stringify {
    /** Convert E_SgAsmGenericDLL enum constant to a string. */
    const char* E_SgAsmGenericDLL(int64_t);

    /** Convert E_SgAsmGenericDLL enum constant to a string. */
    std::string E_SgAsmGenericDLL(int64_t, const std::string &strip);

    /** Return all E_SgAsmGenericDLL member values as a vector. */
    const std::vector<int64_t>& E_SgAsmGenericDLL();
}

namespace Rose {
    std::string stringifyE_SgAsmGenericDLL(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmGenericDLL();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1599
namespace stringify {
    /** Convert E_SgAsmGenericFile enum constant to a string. */
    const char* E_SgAsmGenericFile(int64_t);

    /** Convert E_SgAsmGenericFile enum constant to a string. */
    std::string E_SgAsmGenericFile(int64_t, const std::string &strip);

    /** Return all E_SgAsmGenericFile member values as a vector. */
    const std::vector<int64_t>& E_SgAsmGenericFile();
}

namespace Rose {
    std::string stringifyE_SgAsmGenericFile(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmGenericFile();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1602
namespace stringify {
    /** Convert E_SgAsmPEFileHeader enum constant to a string. */
    const char* E_SgAsmPEFileHeader(int64_t);

    /** Convert E_SgAsmPEFileHeader enum constant to a string. */
    std::string E_SgAsmPEFileHeader(int64_t, const std::string &strip);

    /** Return all E_SgAsmPEFileHeader member values as a vector. */
    const std::vector<int64_t>& E_SgAsmPEFileHeader();
}

namespace Rose {
    std::string stringifyE_SgAsmPEFileHeader(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmPEFileHeader();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1605
namespace stringify {
    /** Convert E_SgAsmLEFileHeader enum constant to a string. */
    const char* E_SgAsmLEFileHeader(int64_t);

    /** Convert E_SgAsmLEFileHeader enum constant to a string. */
    std::string E_SgAsmLEFileHeader(int64_t, const std::string &strip);

    /** Return all E_SgAsmLEFileHeader member values as a vector. */
    const std::vector<int64_t>& E_SgAsmLEFileHeader();
}

namespace Rose {
    std::string stringifyE_SgAsmLEFileHeader(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmLEFileHeader();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1608
namespace stringify {
    /** Convert E_SgAsmNEFileHeader enum constant to a string. */
    const char* E_SgAsmNEFileHeader(int64_t);

    /** Convert E_SgAsmNEFileHeader enum constant to a string. */
    std::string E_SgAsmNEFileHeader(int64_t, const std::string &strip);

    /** Return all E_SgAsmNEFileHeader member values as a vector. */
    const std::vector<int64_t>& E_SgAsmNEFileHeader();
}

namespace Rose {
    std::string stringifyE_SgAsmNEFileHeader(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmNEFileHeader();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1611
namespace stringify {
    /** Convert E_SgAsmDOSFileHeader enum constant to a string. */
    const char* E_SgAsmDOSFileHeader(int64_t);

    /** Convert E_SgAsmDOSFileHeader enum constant to a string. */
    std::string E_SgAsmDOSFileHeader(int64_t, const std::string &strip);

    /** Return all E_SgAsmDOSFileHeader member values as a vector. */
    const std::vector<int64_t>& E_SgAsmDOSFileHeader();
}

namespace Rose {
    std::string stringifyE_SgAsmDOSFileHeader(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmDOSFileHeader();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1614
namespace stringify {
    /** Convert E_SgAsmElfFileHeader enum constant to a string. */
    const char* E_SgAsmElfFileHeader(int64_t);

    /** Convert E_SgAsmElfFileHeader enum constant to a string. */
    std::string E_SgAsmElfFileHeader(int64_t, const std::string &strip);

    /** Return all E_SgAsmElfFileHeader member values as a vector. */
    const std::vector<int64_t>& E_SgAsmElfFileHeader();
}

namespace Rose {
    std::string stringifyE_SgAsmElfFileHeader(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmElfFileHeader();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1617
namespace stringify {
    /** Convert E_SgAsmGenericHeader enum constant to a string. */
    const char* E_SgAsmGenericHeader(int64_t);

    /** Convert E_SgAsmGenericHeader enum constant to a string. */
    std::string E_SgAsmGenericHeader(int64_t, const std::string &strip);

    /** Return all E_SgAsmGenericHeader member values as a vector. */
    const std::vector<int64_t>& E_SgAsmGenericHeader();
}

namespace Rose {
    std::string stringifyE_SgAsmGenericHeader(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmGenericHeader();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1620
namespace stringify {
    /** Convert E_SgAsmElfSymbolSection enum constant to a string. */
    const char* E_SgAsmElfSymbolSection(int64_t);

    /** Convert E_SgAsmElfSymbolSection enum constant to a string. */
    std::string E_SgAsmElfSymbolSection(int64_t, const std::string &strip);

    /** Return all E_SgAsmElfSymbolSection member values as a vector. */
    const std::vector<int64_t>& E_SgAsmElfSymbolSection();
}

namespace Rose {
    std::string stringifyE_SgAsmElfSymbolSection(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmElfSymbolSection();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1623
namespace stringify {
    /** Convert E_SgAsmElfRelocSection enum constant to a string. */
    const char* E_SgAsmElfRelocSection(int64_t);

    /** Convert E_SgAsmElfRelocSection enum constant to a string. */
    std::string E_SgAsmElfRelocSection(int64_t, const std::string &strip);

    /** Return all E_SgAsmElfRelocSection member values as a vector. */
    const std::vector<int64_t>& E_SgAsmElfRelocSection();
}

namespace Rose {
    std::string stringifyE_SgAsmElfRelocSection(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmElfRelocSection();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1626
namespace stringify {
    /** Convert E_SgAsmElfDynamicSection enum constant to a string. */
    const char* E_SgAsmElfDynamicSection(int64_t);

    /** Convert E_SgAsmElfDynamicSection enum constant to a string. */
    std::string E_SgAsmElfDynamicSection(int64_t, const std::string &strip);

    /** Return all E_SgAsmElfDynamicSection member values as a vector. */
    const std::vector<int64_t>& E_SgAsmElfDynamicSection();
}

namespace Rose {
    std::string stringifyE_SgAsmElfDynamicSection(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmElfDynamicSection();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1629
namespace stringify {
    /** Convert E_SgAsmElfStringSection enum constant to a string. */
    const char* E_SgAsmElfStringSection(int64_t);

    /** Convert E_SgAsmElfStringSection enum constant to a string. */
    std::string E_SgAsmElfStringSection(int64_t, const std::string &strip);

    /** Return all E_SgAsmElfStringSection member values as a vector. */
    const std::vector<int64_t>& E_SgAsmElfStringSection();
}

namespace Rose {
    std::string stringifyE_SgAsmElfStringSection(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmElfStringSection();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1632
namespace stringify {
    /** Convert E_SgAsmElfNoteSection enum constant to a string. */
    const char* E_SgAsmElfNoteSection(int64_t);

    /** Convert E_SgAsmElfNoteSection enum constant to a string. */
    std::string E_SgAsmElfNoteSection(int64_t, const std::string &strip);

    /** Return all E_SgAsmElfNoteSection member values as a vector. */
    const std::vector<int64_t>& E_SgAsmElfNoteSection();
}

namespace Rose {
    std::string stringifyE_SgAsmElfNoteSection(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmElfNoteSection();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1635
namespace stringify {
    /** Convert E_SgAsmElfEHFrameSection enum constant to a string. */
    const char* E_SgAsmElfEHFrameSection(int64_t);

    /** Convert E_SgAsmElfEHFrameSection enum constant to a string. */
    std::string E_SgAsmElfEHFrameSection(int64_t, const std::string &strip);

    /** Return all E_SgAsmElfEHFrameSection member values as a vector. */
    const std::vector<int64_t>& E_SgAsmElfEHFrameSection();
}

namespace Rose {
    std::string stringifyE_SgAsmElfEHFrameSection(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmElfEHFrameSection();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1638
namespace stringify {
    /** Convert E_SgAsmElfSymverSection enum constant to a string. */
    const char* E_SgAsmElfSymverSection(int64_t);

    /** Convert E_SgAsmElfSymverSection enum constant to a string. */
    std::string E_SgAsmElfSymverSection(int64_t, const std::string &strip);

    /** Return all E_SgAsmElfSymverSection member values as a vector. */
    const std::vector<int64_t>& E_SgAsmElfSymverSection();
}

namespace Rose {
    std::string stringifyE_SgAsmElfSymverSection(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmElfSymverSection();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1641
namespace stringify {
    /** Convert E_SgAsmElfSymverDefinedSection enum constant to a string. */
    const char* E_SgAsmElfSymverDefinedSection(int64_t);

    /** Convert E_SgAsmElfSymverDefinedSection enum constant to a string. */
    std::string E_SgAsmElfSymverDefinedSection(int64_t, const std::string &strip);

    /** Return all E_SgAsmElfSymverDefinedSection member values as a vector. */
    const std::vector<int64_t>& E_SgAsmElfSymverDefinedSection();
}

namespace Rose {
    std::string stringifyE_SgAsmElfSymverDefinedSection(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmElfSymverDefinedSection();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1644
namespace stringify {
    /** Convert E_SgAsmElfSymverNeededSection enum constant to a string. */
    const char* E_SgAsmElfSymverNeededSection(int64_t);

    /** Convert E_SgAsmElfSymverNeededSection enum constant to a string. */
    std::string E_SgAsmElfSymverNeededSection(int64_t, const std::string &strip);

    /** Return all E_SgAsmElfSymverNeededSection member values as a vector. */
    const std::vector<int64_t>& E_SgAsmElfSymverNeededSection();
}

namespace Rose {
    std::string stringifyE_SgAsmElfSymverNeededSection(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmElfSymverNeededSection();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1647
namespace stringify {
    /** Convert E_SgAsmElfSection enum constant to a string. */
    const char* E_SgAsmElfSection(int64_t);

    /** Convert E_SgAsmElfSection enum constant to a string. */
    std::string E_SgAsmElfSection(int64_t, const std::string &strip);

    /** Return all E_SgAsmElfSection member values as a vector. */
    const std::vector<int64_t>& E_SgAsmElfSection();
}

namespace Rose {
    std::string stringifyE_SgAsmElfSection(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmElfSection();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1650
namespace stringify {
    /** Convert E_SgAsmPEImportSection enum constant to a string. */
    const char* E_SgAsmPEImportSection(int64_t);

    /** Convert E_SgAsmPEImportSection enum constant to a string. */
    std::string E_SgAsmPEImportSection(int64_t, const std::string &strip);

    /** Return all E_SgAsmPEImportSection member values as a vector. */
    const std::vector<int64_t>& E_SgAsmPEImportSection();
}

namespace Rose {
    std::string stringifyE_SgAsmPEImportSection(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmPEImportSection();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1653
namespace stringify {
    /** Convert E_SgAsmPEExportSection enum constant to a string. */
    const char* E_SgAsmPEExportSection(int64_t);

    /** Convert E_SgAsmPEExportSection enum constant to a string. */
    std::string E_SgAsmPEExportSection(int64_t, const std::string &strip);

    /** Return all E_SgAsmPEExportSection member values as a vector. */
    const std::vector<int64_t>& E_SgAsmPEExportSection();
}

namespace Rose {
    std::string stringifyE_SgAsmPEExportSection(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmPEExportSection();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1656
namespace stringify {
    /** Convert E_SgAsmPEStringSection enum constant to a string. */
    const char* E_SgAsmPEStringSection(int64_t);

    /** Convert E_SgAsmPEStringSection enum constant to a string. */
    std::string E_SgAsmPEStringSection(int64_t, const std::string &strip);

    /** Return all E_SgAsmPEStringSection member values as a vector. */
    const std::vector<int64_t>& E_SgAsmPEStringSection();
}

namespace Rose {
    std::string stringifyE_SgAsmPEStringSection(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmPEStringSection();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1659
namespace stringify {
    /** Convert E_SgAsmPESection enum constant to a string. */
    const char* E_SgAsmPESection(int64_t);

    /** Convert E_SgAsmPESection enum constant to a string. */
    std::string E_SgAsmPESection(int64_t, const std::string &strip);

    /** Return all E_SgAsmPESection member values as a vector. */
    const std::vector<int64_t>& E_SgAsmPESection();
}

namespace Rose {
    std::string stringifyE_SgAsmPESection(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmPESection();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1662
namespace stringify {
    /** Convert E_SgAsmCoffSymbolTable enum constant to a string. */
    const char* E_SgAsmCoffSymbolTable(int64_t);

    /** Convert E_SgAsmCoffSymbolTable enum constant to a string. */
    std::string E_SgAsmCoffSymbolTable(int64_t, const std::string &strip);

    /** Return all E_SgAsmCoffSymbolTable member values as a vector. */
    const std::vector<int64_t>& E_SgAsmCoffSymbolTable();
}

namespace Rose {
    std::string stringifyE_SgAsmCoffSymbolTable(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmCoffSymbolTable();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1665
namespace stringify {
    /** Convert E_SgAsmNESection enum constant to a string. */
    const char* E_SgAsmNESection(int64_t);

    /** Convert E_SgAsmNESection enum constant to a string. */
    std::string E_SgAsmNESection(int64_t, const std::string &strip);

    /** Return all E_SgAsmNESection member values as a vector. */
    const std::vector<int64_t>& E_SgAsmNESection();
}

namespace Rose {
    std::string stringifyE_SgAsmNESection(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmNESection();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1668
namespace stringify {
    /** Convert E_SgAsmNEModuleTable enum constant to a string. */
    const char* E_SgAsmNEModuleTable(int64_t);

    /** Convert E_SgAsmNEModuleTable enum constant to a string. */
    std::string E_SgAsmNEModuleTable(int64_t, const std::string &strip);

    /** Return all E_SgAsmNEModuleTable member values as a vector. */
    const std::vector<int64_t>& E_SgAsmNEModuleTable();
}

namespace Rose {
    std::string stringifyE_SgAsmNEModuleTable(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmNEModuleTable();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1671
namespace stringify {
    /** Convert E_SgAsmNEEntryTable enum constant to a string. */
    const char* E_SgAsmNEEntryTable(int64_t);

    /** Convert E_SgAsmNEEntryTable enum constant to a string. */
    std::string E_SgAsmNEEntryTable(int64_t, const std::string &strip);

    /** Return all E_SgAsmNEEntryTable member values as a vector. */
    const std::vector<int64_t>& E_SgAsmNEEntryTable();
}

namespace Rose {
    std::string stringifyE_SgAsmNEEntryTable(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmNEEntryTable();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1674
namespace stringify {
    /** Convert E_SgAsmNERelocTable enum constant to a string. */
    const char* E_SgAsmNERelocTable(int64_t);

    /** Convert E_SgAsmNERelocTable enum constant to a string. */
    std::string E_SgAsmNERelocTable(int64_t, const std::string &strip);

    /** Return all E_SgAsmNERelocTable member values as a vector. */
    const std::vector<int64_t>& E_SgAsmNERelocTable();
}

namespace Rose {
    std::string stringifyE_SgAsmNERelocTable(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmNERelocTable();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1677
namespace stringify {
    /** Convert E_SgAsmLESection enum constant to a string. */
    const char* E_SgAsmLESection(int64_t);

    /** Convert E_SgAsmLESection enum constant to a string. */
    std::string E_SgAsmLESection(int64_t, const std::string &strip);

    /** Return all E_SgAsmLESection member values as a vector. */
    const std::vector<int64_t>& E_SgAsmLESection();
}

namespace Rose {
    std::string stringifyE_SgAsmLESection(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmLESection();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1680
namespace stringify {
    /** Convert E_SgAsmLEPageTable enum constant to a string. */
    const char* E_SgAsmLEPageTable(int64_t);

    /** Convert E_SgAsmLEPageTable enum constant to a string. */
    std::string E_SgAsmLEPageTable(int64_t, const std::string &strip);

    /** Return all E_SgAsmLEPageTable member values as a vector. */
    const std::vector<int64_t>& E_SgAsmLEPageTable();
}

namespace Rose {
    std::string stringifyE_SgAsmLEPageTable(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmLEPageTable();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1683
namespace stringify {
    /** Convert E_SgAsmLEEntryTable enum constant to a string. */
    const char* E_SgAsmLEEntryTable(int64_t);

    /** Convert E_SgAsmLEEntryTable enum constant to a string. */
    std::string E_SgAsmLEEntryTable(int64_t, const std::string &strip);

    /** Return all E_SgAsmLEEntryTable member values as a vector. */
    const std::vector<int64_t>& E_SgAsmLEEntryTable();
}

namespace Rose {
    std::string stringifyE_SgAsmLEEntryTable(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmLEEntryTable();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1686
namespace stringify {
    /** Convert E_SgAsmLERelocTable enum constant to a string. */
    const char* E_SgAsmLERelocTable(int64_t);

    /** Convert E_SgAsmLERelocTable enum constant to a string. */
    std::string E_SgAsmLERelocTable(int64_t, const std::string &strip);

    /** Return all E_SgAsmLERelocTable member values as a vector. */
    const std::vector<int64_t>& E_SgAsmLERelocTable();
}

namespace Rose {
    std::string stringifyE_SgAsmLERelocTable(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmLERelocTable();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1689
namespace stringify {
    /** Convert E_SgAsmCoffSymbol enum constant to a string. */
    const char* E_SgAsmCoffSymbol(int64_t);

    /** Convert E_SgAsmCoffSymbol enum constant to a string. */
    std::string E_SgAsmCoffSymbol(int64_t, const std::string &strip);

    /** Return all E_SgAsmCoffSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgAsmCoffSymbol();
}

namespace Rose {
    std::string stringifyE_SgAsmCoffSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmCoffSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1692
namespace stringify {
    /** Convert E_SgAsmElfSymbol enum constant to a string. */
    const char* E_SgAsmElfSymbol(int64_t);

    /** Convert E_SgAsmElfSymbol enum constant to a string. */
    std::string E_SgAsmElfSymbol(int64_t, const std::string &strip);

    /** Return all E_SgAsmElfSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgAsmElfSymbol();
}

namespace Rose {
    std::string stringifyE_SgAsmElfSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmElfSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1695
namespace stringify {
    /** Convert E_SgAsmGenericSymbol enum constant to a string. */
    const char* E_SgAsmGenericSymbol(int64_t);

    /** Convert E_SgAsmGenericSymbol enum constant to a string. */
    std::string E_SgAsmGenericSymbol(int64_t, const std::string &strip);

    /** Return all E_SgAsmGenericSymbol member values as a vector. */
    const std::vector<int64_t>& E_SgAsmGenericSymbol();
}

namespace Rose {
    std::string stringifyE_SgAsmGenericSymbol(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmGenericSymbol();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1698
namespace stringify {
    /** Convert E_SgAsmGenericSectionList enum constant to a string. */
    const char* E_SgAsmGenericSectionList(int64_t);

    /** Convert E_SgAsmGenericSectionList enum constant to a string. */
    std::string E_SgAsmGenericSectionList(int64_t, const std::string &strip);

    /** Return all E_SgAsmGenericSectionList member values as a vector. */
    const std::vector<int64_t>& E_SgAsmGenericSectionList();
}

namespace Rose {
    std::string stringifyE_SgAsmGenericSectionList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmGenericSectionList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1701
namespace stringify {
    /** Convert E_SgAsmGenericHeaderList enum constant to a string. */
    const char* E_SgAsmGenericHeaderList(int64_t);

    /** Convert E_SgAsmGenericHeaderList enum constant to a string. */
    std::string E_SgAsmGenericHeaderList(int64_t, const std::string &strip);

    /** Return all E_SgAsmGenericHeaderList member values as a vector. */
    const std::vector<int64_t>& E_SgAsmGenericHeaderList();
}

namespace Rose {
    std::string stringifyE_SgAsmGenericHeaderList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmGenericHeaderList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1704
namespace stringify {
    /** Convert E_SgAsmElfSymbolList enum constant to a string. */
    const char* E_SgAsmElfSymbolList(int64_t);

    /** Convert E_SgAsmElfSymbolList enum constant to a string. */
    std::string E_SgAsmElfSymbolList(int64_t, const std::string &strip);

    /** Return all E_SgAsmElfSymbolList member values as a vector. */
    const std::vector<int64_t>& E_SgAsmElfSymbolList();
}

namespace Rose {
    std::string stringifyE_SgAsmElfSymbolList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmElfSymbolList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1707
namespace stringify {
    /** Convert E_SgAsmElfRelocEntryList enum constant to a string. */
    const char* E_SgAsmElfRelocEntryList(int64_t);

    /** Convert E_SgAsmElfRelocEntryList enum constant to a string. */
    std::string E_SgAsmElfRelocEntryList(int64_t, const std::string &strip);

    /** Return all E_SgAsmElfRelocEntryList member values as a vector. */
    const std::vector<int64_t>& E_SgAsmElfRelocEntryList();
}

namespace Rose {
    std::string stringifyE_SgAsmElfRelocEntryList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmElfRelocEntryList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1710
namespace stringify {
    /** Convert E_SgAsmPEExportEntry enum constant to a string. */
    const char* E_SgAsmPEExportEntry(int64_t);

    /** Convert E_SgAsmPEExportEntry enum constant to a string. */
    std::string E_SgAsmPEExportEntry(int64_t, const std::string &strip);

    /** Return all E_SgAsmPEExportEntry member values as a vector. */
    const std::vector<int64_t>& E_SgAsmPEExportEntry();
}

namespace Rose {
    std::string stringifyE_SgAsmPEExportEntry(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmPEExportEntry();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1713
namespace stringify {
    /** Convert E_SgAsmPEExportEntryList enum constant to a string. */
    const char* E_SgAsmPEExportEntryList(int64_t);

    /** Convert E_SgAsmPEExportEntryList enum constant to a string. */
    std::string E_SgAsmPEExportEntryList(int64_t, const std::string &strip);

    /** Return all E_SgAsmPEExportEntryList member values as a vector. */
    const std::vector<int64_t>& E_SgAsmPEExportEntryList();
}

namespace Rose {
    std::string stringifyE_SgAsmPEExportEntryList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmPEExportEntryList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1716
namespace stringify {
    /** Convert E_SgAsmElfDynamicEntry enum constant to a string. */
    const char* E_SgAsmElfDynamicEntry(int64_t);

    /** Convert E_SgAsmElfDynamicEntry enum constant to a string. */
    std::string E_SgAsmElfDynamicEntry(int64_t, const std::string &strip);

    /** Return all E_SgAsmElfDynamicEntry member values as a vector. */
    const std::vector<int64_t>& E_SgAsmElfDynamicEntry();
}

namespace Rose {
    std::string stringifyE_SgAsmElfDynamicEntry(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmElfDynamicEntry();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1719
namespace stringify {
    /** Convert E_SgAsmElfSegmentTableEntryList enum constant to a string. */
    const char* E_SgAsmElfSegmentTableEntryList(int64_t);

    /** Convert E_SgAsmElfSegmentTableEntryList enum constant to a string. */
    std::string E_SgAsmElfSegmentTableEntryList(int64_t, const std::string &strip);

    /** Return all E_SgAsmElfSegmentTableEntryList member values as a vector. */
    const std::vector<int64_t>& E_SgAsmElfSegmentTableEntryList();
}

namespace Rose {
    std::string stringifyE_SgAsmElfSegmentTableEntryList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmElfSegmentTableEntryList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1722
namespace stringify {
    /** Convert E_SgAsmElfNoteEntry enum constant to a string. */
    const char* E_SgAsmElfNoteEntry(int64_t);

    /** Convert E_SgAsmElfNoteEntry enum constant to a string. */
    std::string E_SgAsmElfNoteEntry(int64_t, const std::string &strip);

    /** Return all E_SgAsmElfNoteEntry member values as a vector. */
    const std::vector<int64_t>& E_SgAsmElfNoteEntry();
}

namespace Rose {
    std::string stringifyE_SgAsmElfNoteEntry(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmElfNoteEntry();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1725
namespace stringify {
    /** Convert E_SgAsmElfSymverEntryList enum constant to a string. */
    const char* E_SgAsmElfSymverEntryList(int64_t);

    /** Convert E_SgAsmElfSymverEntryList enum constant to a string. */
    std::string E_SgAsmElfSymverEntryList(int64_t, const std::string &strip);

    /** Return all E_SgAsmElfSymverEntryList member values as a vector. */
    const std::vector<int64_t>& E_SgAsmElfSymverEntryList();
}

namespace Rose {
    std::string stringifyE_SgAsmElfSymverEntryList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmElfSymverEntryList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1728
namespace stringify {
    /** Convert E_SgAsmElfSymverDefinedEntry enum constant to a string. */
    const char* E_SgAsmElfSymverDefinedEntry(int64_t);

    /** Convert E_SgAsmElfSymverDefinedEntry enum constant to a string. */
    std::string E_SgAsmElfSymverDefinedEntry(int64_t, const std::string &strip);

    /** Return all E_SgAsmElfSymverDefinedEntry member values as a vector. */
    const std::vector<int64_t>& E_SgAsmElfSymverDefinedEntry();
}

namespace Rose {
    std::string stringifyE_SgAsmElfSymverDefinedEntry(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmElfSymverDefinedEntry();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1731
namespace stringify {
    /** Convert E_SgAsmElfSymverDefinedEntryList enum constant to a string. */
    const char* E_SgAsmElfSymverDefinedEntryList(int64_t);

    /** Convert E_SgAsmElfSymverDefinedEntryList enum constant to a string. */
    std::string E_SgAsmElfSymverDefinedEntryList(int64_t, const std::string &strip);

    /** Return all E_SgAsmElfSymverDefinedEntryList member values as a vector. */
    const std::vector<int64_t>& E_SgAsmElfSymverDefinedEntryList();
}

namespace Rose {
    std::string stringifyE_SgAsmElfSymverDefinedEntryList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmElfSymverDefinedEntryList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1734
namespace stringify {
    /** Convert E_SgAsmElfSymverDefinedAux enum constant to a string. */
    const char* E_SgAsmElfSymverDefinedAux(int64_t);

    /** Convert E_SgAsmElfSymverDefinedAux enum constant to a string. */
    std::string E_SgAsmElfSymverDefinedAux(int64_t, const std::string &strip);

    /** Return all E_SgAsmElfSymverDefinedAux member values as a vector. */
    const std::vector<int64_t>& E_SgAsmElfSymverDefinedAux();
}

namespace Rose {
    std::string stringifyE_SgAsmElfSymverDefinedAux(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmElfSymverDefinedAux();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1737
namespace stringify {
    /** Convert E_SgAsmElfSymverDefinedAuxList enum constant to a string. */
    const char* E_SgAsmElfSymverDefinedAuxList(int64_t);

    /** Convert E_SgAsmElfSymverDefinedAuxList enum constant to a string. */
    std::string E_SgAsmElfSymverDefinedAuxList(int64_t, const std::string &strip);

    /** Return all E_SgAsmElfSymverDefinedAuxList member values as a vector. */
    const std::vector<int64_t>& E_SgAsmElfSymverDefinedAuxList();
}

namespace Rose {
    std::string stringifyE_SgAsmElfSymverDefinedAuxList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmElfSymverDefinedAuxList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1740
namespace stringify {
    /** Convert E_SgAsmElfSymverNeededEntry enum constant to a string. */
    const char* E_SgAsmElfSymverNeededEntry(int64_t);

    /** Convert E_SgAsmElfSymverNeededEntry enum constant to a string. */
    std::string E_SgAsmElfSymverNeededEntry(int64_t, const std::string &strip);

    /** Return all E_SgAsmElfSymverNeededEntry member values as a vector. */
    const std::vector<int64_t>& E_SgAsmElfSymverNeededEntry();
}

namespace Rose {
    std::string stringifyE_SgAsmElfSymverNeededEntry(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmElfSymverNeededEntry();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1743
namespace stringify {
    /** Convert E_SgAsmElfSymverNeededEntryList enum constant to a string. */
    const char* E_SgAsmElfSymverNeededEntryList(int64_t);

    /** Convert E_SgAsmElfSymverNeededEntryList enum constant to a string. */
    std::string E_SgAsmElfSymverNeededEntryList(int64_t, const std::string &strip);

    /** Return all E_SgAsmElfSymverNeededEntryList member values as a vector. */
    const std::vector<int64_t>& E_SgAsmElfSymverNeededEntryList();
}

namespace Rose {
    std::string stringifyE_SgAsmElfSymverNeededEntryList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmElfSymverNeededEntryList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1746
namespace stringify {
    /** Convert E_SgAsmElfSymverNeededAux enum constant to a string. */
    const char* E_SgAsmElfSymverNeededAux(int64_t);

    /** Convert E_SgAsmElfSymverNeededAux enum constant to a string. */
    std::string E_SgAsmElfSymverNeededAux(int64_t, const std::string &strip);

    /** Return all E_SgAsmElfSymverNeededAux member values as a vector. */
    const std::vector<int64_t>& E_SgAsmElfSymverNeededAux();
}

namespace Rose {
    std::string stringifyE_SgAsmElfSymverNeededAux(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmElfSymverNeededAux();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1749
namespace stringify {
    /** Convert E_SgAsmElfSymverNeededAuxList enum constant to a string. */
    const char* E_SgAsmElfSymverNeededAuxList(int64_t);

    /** Convert E_SgAsmElfSymverNeededAuxList enum constant to a string. */
    std::string E_SgAsmElfSymverNeededAuxList(int64_t, const std::string &strip);

    /** Return all E_SgAsmElfSymverNeededAuxList member values as a vector. */
    const std::vector<int64_t>& E_SgAsmElfSymverNeededAuxList();
}

namespace Rose {
    std::string stringifyE_SgAsmElfSymverNeededAuxList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmElfSymverNeededAuxList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1752
namespace stringify {
    /** Convert E_SgAsmPEImportDirectory enum constant to a string. */
    const char* E_SgAsmPEImportDirectory(int64_t);

    /** Convert E_SgAsmPEImportDirectory enum constant to a string. */
    std::string E_SgAsmPEImportDirectory(int64_t, const std::string &strip);

    /** Return all E_SgAsmPEImportDirectory member values as a vector. */
    const std::vector<int64_t>& E_SgAsmPEImportDirectory();
}

namespace Rose {
    std::string stringifyE_SgAsmPEImportDirectory(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmPEImportDirectory();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1755
namespace stringify {
    /** Convert E_SgAsmPEExportDirectory enum constant to a string. */
    const char* E_SgAsmPEExportDirectory(int64_t);

    /** Convert E_SgAsmPEExportDirectory enum constant to a string. */
    std::string E_SgAsmPEExportDirectory(int64_t, const std::string &strip);

    /** Return all E_SgAsmPEExportDirectory member values as a vector. */
    const std::vector<int64_t>& E_SgAsmPEExportDirectory();
}

namespace Rose {
    std::string stringifyE_SgAsmPEExportDirectory(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmPEExportDirectory();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1758
namespace stringify {
    /** Convert E_SgAsmCoffSymbolList enum constant to a string. */
    const char* E_SgAsmCoffSymbolList(int64_t);

    /** Convert E_SgAsmCoffSymbolList enum constant to a string. */
    std::string E_SgAsmCoffSymbolList(int64_t, const std::string &strip);

    /** Return all E_SgAsmCoffSymbolList member values as a vector. */
    const std::vector<int64_t>& E_SgAsmCoffSymbolList();
}

namespace Rose {
    std::string stringifyE_SgAsmCoffSymbolList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmCoffSymbolList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1761
namespace stringify {
    /** Convert E_SgAsmPERVASizePairList enum constant to a string. */
    const char* E_SgAsmPERVASizePairList(int64_t);

    /** Convert E_SgAsmPERVASizePairList enum constant to a string. */
    std::string E_SgAsmPERVASizePairList(int64_t, const std::string &strip);

    /** Return all E_SgAsmPERVASizePairList member values as a vector. */
    const std::vector<int64_t>& E_SgAsmPERVASizePairList();
}

namespace Rose {
    std::string stringifyE_SgAsmPERVASizePairList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmPERVASizePairList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1764
namespace stringify {
    /** Convert E_SgAsmElfEHFrameEntryCI enum constant to a string. */
    const char* E_SgAsmElfEHFrameEntryCI(int64_t);

    /** Convert E_SgAsmElfEHFrameEntryCI enum constant to a string. */
    std::string E_SgAsmElfEHFrameEntryCI(int64_t, const std::string &strip);

    /** Return all E_SgAsmElfEHFrameEntryCI member values as a vector. */
    const std::vector<int64_t>& E_SgAsmElfEHFrameEntryCI();
}

namespace Rose {
    std::string stringifyE_SgAsmElfEHFrameEntryCI(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmElfEHFrameEntryCI();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1767
namespace stringify {
    /** Convert E_SgAsmPEImportDirectoryList enum constant to a string. */
    const char* E_SgAsmPEImportDirectoryList(int64_t);

    /** Convert E_SgAsmPEImportDirectoryList enum constant to a string. */
    std::string E_SgAsmPEImportDirectoryList(int64_t, const std::string &strip);

    /** Return all E_SgAsmPEImportDirectoryList member values as a vector. */
    const std::vector<int64_t>& E_SgAsmPEImportDirectoryList();
}

namespace Rose {
    std::string stringifyE_SgAsmPEImportDirectoryList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmPEImportDirectoryList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1770
namespace stringify {
    /** Convert E_SgAsmLEEntryPoint enum constant to a string. */
    const char* E_SgAsmLEEntryPoint(int64_t);

    /** Convert E_SgAsmLEEntryPoint enum constant to a string. */
    std::string E_SgAsmLEEntryPoint(int64_t, const std::string &strip);

    /** Return all E_SgAsmLEEntryPoint member values as a vector. */
    const std::vector<int64_t>& E_SgAsmLEEntryPoint();
}

namespace Rose {
    std::string stringifyE_SgAsmLEEntryPoint(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmLEEntryPoint();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1773
namespace stringify {
    /** Convert E_SgAsmDwarfMacroList enum constant to a string. */
    const char* E_SgAsmDwarfMacroList(int64_t);

    /** Convert E_SgAsmDwarfMacroList enum constant to a string. */
    std::string E_SgAsmDwarfMacroList(int64_t, const std::string &strip);

    /** Return all E_SgAsmDwarfMacroList member values as a vector. */
    const std::vector<int64_t>& E_SgAsmDwarfMacroList();
}

namespace Rose {
    std::string stringifyE_SgAsmDwarfMacroList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmDwarfMacroList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1776
namespace stringify {
    /** Convert E_SgAsmDwarfLineList enum constant to a string. */
    const char* E_SgAsmDwarfLineList(int64_t);

    /** Convert E_SgAsmDwarfLineList enum constant to a string. */
    std::string E_SgAsmDwarfLineList(int64_t, const std::string &strip);

    /** Return all E_SgAsmDwarfLineList member values as a vector. */
    const std::vector<int64_t>& E_SgAsmDwarfLineList();
}

namespace Rose {
    std::string stringifyE_SgAsmDwarfLineList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmDwarfLineList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1779
namespace stringify {
    /** Convert E_SgAsmDwarfCompilationUnitList enum constant to a string. */
    const char* E_SgAsmDwarfCompilationUnitList(int64_t);

    /** Convert E_SgAsmDwarfCompilationUnitList enum constant to a string. */
    std::string E_SgAsmDwarfCompilationUnitList(int64_t, const std::string &strip);

    /** Return all E_SgAsmDwarfCompilationUnitList member values as a vector. */
    const std::vector<int64_t>& E_SgAsmDwarfCompilationUnitList();
}

namespace Rose {
    std::string stringifyE_SgAsmDwarfCompilationUnitList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmDwarfCompilationUnitList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1782
namespace stringify {
    /** Convert E_SgAsmDwarfArrayType enum constant to a string. */
    const char* E_SgAsmDwarfArrayType(int64_t);

    /** Convert E_SgAsmDwarfArrayType enum constant to a string. */
    std::string E_SgAsmDwarfArrayType(int64_t, const std::string &strip);

    /** Return all E_SgAsmDwarfArrayType member values as a vector. */
    const std::vector<int64_t>& E_SgAsmDwarfArrayType();
}

namespace Rose {
    std::string stringifyE_SgAsmDwarfArrayType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmDwarfArrayType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1785
namespace stringify {
    /** Convert E_SgAsmDwarfClassType enum constant to a string. */
    const char* E_SgAsmDwarfClassType(int64_t);

    /** Convert E_SgAsmDwarfClassType enum constant to a string. */
    std::string E_SgAsmDwarfClassType(int64_t, const std::string &strip);

    /** Return all E_SgAsmDwarfClassType member values as a vector. */
    const std::vector<int64_t>& E_SgAsmDwarfClassType();
}

namespace Rose {
    std::string stringifyE_SgAsmDwarfClassType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmDwarfClassType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1788
namespace stringify {
    /** Convert E_SgAsmDwarfEnumerationType enum constant to a string. */
    const char* E_SgAsmDwarfEnumerationType(int64_t);

    /** Convert E_SgAsmDwarfEnumerationType enum constant to a string. */
    std::string E_SgAsmDwarfEnumerationType(int64_t, const std::string &strip);

    /** Return all E_SgAsmDwarfEnumerationType member values as a vector. */
    const std::vector<int64_t>& E_SgAsmDwarfEnumerationType();
}

namespace Rose {
    std::string stringifyE_SgAsmDwarfEnumerationType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmDwarfEnumerationType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1791
namespace stringify {
    /** Convert E_SgAsmDwarfLexicalBlock enum constant to a string. */
    const char* E_SgAsmDwarfLexicalBlock(int64_t);

    /** Convert E_SgAsmDwarfLexicalBlock enum constant to a string. */
    std::string E_SgAsmDwarfLexicalBlock(int64_t, const std::string &strip);

    /** Return all E_SgAsmDwarfLexicalBlock member values as a vector. */
    const std::vector<int64_t>& E_SgAsmDwarfLexicalBlock();
}

namespace Rose {
    std::string stringifyE_SgAsmDwarfLexicalBlock(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmDwarfLexicalBlock();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1794
namespace stringify {
    /** Convert E_SgAsmDwarfCompilationUnit enum constant to a string. */
    const char* E_SgAsmDwarfCompilationUnit(int64_t);

    /** Convert E_SgAsmDwarfCompilationUnit enum constant to a string. */
    std::string E_SgAsmDwarfCompilationUnit(int64_t, const std::string &strip);

    /** Return all E_SgAsmDwarfCompilationUnit member values as a vector. */
    const std::vector<int64_t>& E_SgAsmDwarfCompilationUnit();
}

namespace Rose {
    std::string stringifyE_SgAsmDwarfCompilationUnit(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmDwarfCompilationUnit();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1797
namespace stringify {
    /** Convert E_SgAsmDwarfStructureType enum constant to a string. */
    const char* E_SgAsmDwarfStructureType(int64_t);

    /** Convert E_SgAsmDwarfStructureType enum constant to a string. */
    std::string E_SgAsmDwarfStructureType(int64_t, const std::string &strip);

    /** Return all E_SgAsmDwarfStructureType member values as a vector. */
    const std::vector<int64_t>& E_SgAsmDwarfStructureType();
}

namespace Rose {
    std::string stringifyE_SgAsmDwarfStructureType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmDwarfStructureType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1800
namespace stringify {
    /** Convert E_SgAsmDwarfSubroutineType enum constant to a string. */
    const char* E_SgAsmDwarfSubroutineType(int64_t);

    /** Convert E_SgAsmDwarfSubroutineType enum constant to a string. */
    std::string E_SgAsmDwarfSubroutineType(int64_t, const std::string &strip);

    /** Return all E_SgAsmDwarfSubroutineType member values as a vector. */
    const std::vector<int64_t>& E_SgAsmDwarfSubroutineType();
}

namespace Rose {
    std::string stringifyE_SgAsmDwarfSubroutineType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmDwarfSubroutineType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1803
namespace stringify {
    /** Convert E_SgAsmDwarfUnionType enum constant to a string. */
    const char* E_SgAsmDwarfUnionType(int64_t);

    /** Convert E_SgAsmDwarfUnionType enum constant to a string. */
    std::string E_SgAsmDwarfUnionType(int64_t, const std::string &strip);

    /** Return all E_SgAsmDwarfUnionType member values as a vector. */
    const std::vector<int64_t>& E_SgAsmDwarfUnionType();
}

namespace Rose {
    std::string stringifyE_SgAsmDwarfUnionType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmDwarfUnionType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1806
namespace stringify {
    /** Convert E_SgAsmDwarfCommonBlock enum constant to a string. */
    const char* E_SgAsmDwarfCommonBlock(int64_t);

    /** Convert E_SgAsmDwarfCommonBlock enum constant to a string. */
    std::string E_SgAsmDwarfCommonBlock(int64_t, const std::string &strip);

    /** Return all E_SgAsmDwarfCommonBlock member values as a vector. */
    const std::vector<int64_t>& E_SgAsmDwarfCommonBlock();
}

namespace Rose {
    std::string stringifyE_SgAsmDwarfCommonBlock(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmDwarfCommonBlock();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1809
namespace stringify {
    /** Convert E_SgAsmDwarfInlinedSubroutine enum constant to a string. */
    const char* E_SgAsmDwarfInlinedSubroutine(int64_t);

    /** Convert E_SgAsmDwarfInlinedSubroutine enum constant to a string. */
    std::string E_SgAsmDwarfInlinedSubroutine(int64_t, const std::string &strip);

    /** Return all E_SgAsmDwarfInlinedSubroutine member values as a vector. */
    const std::vector<int64_t>& E_SgAsmDwarfInlinedSubroutine();
}

namespace Rose {
    std::string stringifyE_SgAsmDwarfInlinedSubroutine(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmDwarfInlinedSubroutine();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1812
namespace stringify {
    /** Convert E_SgAsmDwarfSubprogram enum constant to a string. */
    const char* E_SgAsmDwarfSubprogram(int64_t);

    /** Convert E_SgAsmDwarfSubprogram enum constant to a string. */
    std::string E_SgAsmDwarfSubprogram(int64_t, const std::string &strip);

    /** Return all E_SgAsmDwarfSubprogram member values as a vector. */
    const std::vector<int64_t>& E_SgAsmDwarfSubprogram();
}

namespace Rose {
    std::string stringifyE_SgAsmDwarfSubprogram(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmDwarfSubprogram();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1815
namespace stringify {
    /** Convert E_SgAsmDwarfNamespace enum constant to a string. */
    const char* E_SgAsmDwarfNamespace(int64_t);

    /** Convert E_SgAsmDwarfNamespace enum constant to a string. */
    std::string E_SgAsmDwarfNamespace(int64_t, const std::string &strip);

    /** Return all E_SgAsmDwarfNamespace member values as a vector. */
    const std::vector<int64_t>& E_SgAsmDwarfNamespace();
}

namespace Rose {
    std::string stringifyE_SgAsmDwarfNamespace(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmDwarfNamespace();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1818
namespace stringify {
    /** Convert E_SgAsmDwarfConstructList enum constant to a string. */
    const char* E_SgAsmDwarfConstructList(int64_t);

    /** Convert E_SgAsmDwarfConstructList enum constant to a string. */
    std::string E_SgAsmDwarfConstructList(int64_t, const std::string &strip);

    /** Return all E_SgAsmDwarfConstructList member values as a vector. */
    const std::vector<int64_t>& E_SgAsmDwarfConstructList();
}

namespace Rose {
    std::string stringifyE_SgAsmDwarfConstructList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmDwarfConstructList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1821
namespace stringify {
    /** Convert E_SgAsmPEImportItem enum constant to a string. */
    const char* E_SgAsmPEImportItem(int64_t);

    /** Convert E_SgAsmPEImportItem enum constant to a string. */
    std::string E_SgAsmPEImportItem(int64_t, const std::string &strip);

    /** Return all E_SgAsmPEImportItem member values as a vector. */
    const std::vector<int64_t>& E_SgAsmPEImportItem();
}

namespace Rose {
    std::string stringifyE_SgAsmPEImportItem(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmPEImportItem();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1824
namespace stringify {
    /** Convert E_SgAsmPEImportItemList enum constant to a string. */
    const char* E_SgAsmPEImportItemList(int64_t);

    /** Convert E_SgAsmPEImportItemList enum constant to a string. */
    std::string E_SgAsmPEImportItemList(int64_t, const std::string &strip);

    /** Return all E_SgAsmPEImportItemList member values as a vector. */
    const std::vector<int64_t>& E_SgAsmPEImportItemList();
}

namespace Rose {
    std::string stringifyE_SgAsmPEImportItemList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmPEImportItemList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1827
namespace stringify {
    /** Convert E_SgAsmInterpretationList enum constant to a string. */
    const char* E_SgAsmInterpretationList(int64_t);

    /** Convert E_SgAsmInterpretationList enum constant to a string. */
    std::string E_SgAsmInterpretationList(int64_t, const std::string &strip);

    /** Return all E_SgAsmInterpretationList member values as a vector. */
    const std::vector<int64_t>& E_SgAsmInterpretationList();
}

namespace Rose {
    std::string stringifyE_SgAsmInterpretationList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmInterpretationList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_GrammarTreeTraversalAccessEnums.h line 1830
namespace stringify {
    /** Convert E_SgAsmGenericFileList enum constant to a string. */
    const char* E_SgAsmGenericFileList(int64_t);

    /** Convert E_SgAsmGenericFileList enum constant to a string. */
    std::string E_SgAsmGenericFileList(int64_t, const std::string &strip);

    /** Return all E_SgAsmGenericFileList member values as a vector. */
    const std::vector<int64_t>& E_SgAsmGenericFileList();
}

namespace Rose {
    std::string stringifyE_SgAsmGenericFileList(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyE_SgAsmGenericFileList();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 17
namespace stringify {
    /** Convert Cxx_GrammarVariants enum constant to a string. */
    const char* Cxx_GrammarVariants(int64_t);

    /** Convert Cxx_GrammarVariants enum constant to a string. */
    std::string Cxx_GrammarVariants(int64_t, const std::string &strip);

    /** Return all Cxx_GrammarVariants member values as a vector. */
    const std::vector<int64_t>& Cxx_GrammarVariants();
}

namespace Rose {
    std::string stringifyCxx_GrammarVariants(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyCxx_GrammarVariants();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 978
namespace stringify {
    /** Convert VariantT enum constant to a string. */
    const char* VariantT(int64_t);

    /** Convert VariantT enum constant to a string. */
    std::string VariantT(int64_t, const std::string &strip);

    /** Return all VariantT member values as a vector. */
    const std::vector<int64_t>& VariantT();
}

namespace Rose {
    std::string stringifyVariantT(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifyVariantT();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 11807
namespace stringify { namespace SgConstVolatileModifier {
    /** Convert SgConstVolatileModifier::cv_modifier_enum enum constant to a string. */
    const char* cv_modifier_enum(int64_t);

    /** Convert SgConstVolatileModifier::cv_modifier_enum enum constant to a string. */
    std::string cv_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgConstVolatileModifier::cv_modifier_enum member values as a vector. */
    const std::vector<int64_t>& cv_modifier_enum();
}}

namespace Rose {
    std::string stringifySgConstVolatileModifier_cv_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgConstVolatileModifier_cv_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 12356
namespace stringify { namespace SgStorageModifier {
    /** Convert SgStorageModifier::storage_modifier_enum enum constant to a string. */
    const char* storage_modifier_enum(int64_t);

    /** Convert SgStorageModifier::storage_modifier_enum enum constant to a string. */
    std::string storage_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgStorageModifier::storage_modifier_enum member values as a vector. */
    const std::vector<int64_t>& storage_modifier_enum();
}}

namespace Rose {
    std::string stringifySgStorageModifier_storage_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgStorageModifier_storage_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 13008
namespace stringify { namespace SgAccessModifier {
    /** Convert SgAccessModifier::access_modifier_enum enum constant to a string. */
    const char* access_modifier_enum(int64_t);

    /** Convert SgAccessModifier::access_modifier_enum enum constant to a string. */
    std::string access_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgAccessModifier::access_modifier_enum member values as a vector. */
    const std::vector<int64_t>& access_modifier_enum();
}}

namespace Rose {
    std::string stringifySgAccessModifier_access_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAccessModifier_access_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 13540
namespace stringify { namespace SgFunctionModifier {
    /** Convert SgFunctionModifier::function_modifier_enum enum constant to a string. */
    const char* function_modifier_enum(int64_t);

    /** Convert SgFunctionModifier::function_modifier_enum enum constant to a string. */
    std::string function_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgFunctionModifier::function_modifier_enum member values as a vector. */
    const std::vector<int64_t>& function_modifier_enum();
}}

namespace Rose {
    std::string stringifySgFunctionModifier_function_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgFunctionModifier_function_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 14335
namespace stringify { namespace SgUPC_AccessModifier {
    /** Convert SgUPC_AccessModifier::upc_access_modifier_enum enum constant to a string. */
    const char* upc_access_modifier_enum(int64_t);

    /** Convert SgUPC_AccessModifier::upc_access_modifier_enum enum constant to a string. */
    std::string upc_access_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgUPC_AccessModifier::upc_access_modifier_enum member values as a vector. */
    const std::vector<int64_t>& upc_access_modifier_enum();
}}

namespace Rose {
    std::string stringifySgUPC_AccessModifier_upc_access_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgUPC_AccessModifier_upc_access_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 14882
namespace stringify { namespace SgSpecialFunctionModifier {
    /** Convert SgSpecialFunctionModifier::special_function_modifier_enum enum constant to a string. */
    const char* special_function_modifier_enum(int64_t);

    /** Convert SgSpecialFunctionModifier::special_function_modifier_enum enum constant to a string. */
    std::string special_function_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgSpecialFunctionModifier::special_function_modifier_enum member values as a vector. */
    const std::vector<int64_t>& special_function_modifier_enum();
}}

namespace Rose {
    std::string stringifySgSpecialFunctionModifier_special_function_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgSpecialFunctionModifier_special_function_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 15436
namespace stringify { namespace SgElaboratedTypeModifier {
    /** Convert SgElaboratedTypeModifier::elaborated_type_modifier_enum enum constant to a string. */
    const char* elaborated_type_modifier_enum(int64_t);

    /** Convert SgElaboratedTypeModifier::elaborated_type_modifier_enum enum constant to a string. */
    std::string elaborated_type_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgElaboratedTypeModifier::elaborated_type_modifier_enum member values as a vector. */
    const std::vector<int64_t>& elaborated_type_modifier_enum();
}}

namespace Rose {
    std::string stringifySgElaboratedTypeModifier_elaborated_type_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgElaboratedTypeModifier_elaborated_type_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 15975
namespace stringify { namespace SgLinkageModifier {
    /** Convert SgLinkageModifier::linkage_modifier_enum enum constant to a string. */
    const char* linkage_modifier_enum(int64_t);

    /** Convert SgLinkageModifier::linkage_modifier_enum enum constant to a string. */
    std::string linkage_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgLinkageModifier::linkage_modifier_enum member values as a vector. */
    const std::vector<int64_t>& linkage_modifier_enum();
}}

namespace Rose {
    std::string stringifySgLinkageModifier_linkage_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgLinkageModifier_linkage_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 16505
namespace stringify { namespace SgBaseClassModifier {
    /** Convert SgBaseClassModifier::baseclass_modifier_enum enum constant to a string. */
    const char* baseclass_modifier_enum(int64_t);

    /** Convert SgBaseClassModifier::baseclass_modifier_enum enum constant to a string. */
    std::string baseclass_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgBaseClassModifier::baseclass_modifier_enum member values as a vector. */
    const std::vector<int64_t>& baseclass_modifier_enum();
}}

namespace Rose {
    std::string stringifySgBaseClassModifier_baseclass_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgBaseClassModifier_baseclass_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 17035
namespace stringify { namespace SgStructureModifier {
    /** Convert SgStructureModifier::jovial_structure_modifier_enum enum constant to a string. */
    const char* jovial_structure_modifier_enum(int64_t);

    /** Convert SgStructureModifier::jovial_structure_modifier_enum enum constant to a string. */
    std::string jovial_structure_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgStructureModifier::jovial_structure_modifier_enum member values as a vector. */
    const std::vector<int64_t>& jovial_structure_modifier_enum();
}}

namespace Rose {
    std::string stringifySgStructureModifier_jovial_structure_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgStructureModifier_jovial_structure_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 17572
namespace stringify { namespace SgTypeModifier {
    /** Convert SgTypeModifier::type_modifier_enum enum constant to a string. */
    const char* type_modifier_enum(int64_t);

    /** Convert SgTypeModifier::type_modifier_enum enum constant to a string. */
    std::string type_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgTypeModifier::type_modifier_enum member values as a vector. */
    const std::vector<int64_t>& type_modifier_enum();
}}

namespace Rose {
    std::string stringifySgTypeModifier_type_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgTypeModifier_type_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 17661
namespace stringify { namespace SgTypeModifier {
    /** Convert SgTypeModifier::gnu_extension_machine_mode_enum enum constant to a string. */
    const char* gnu_extension_machine_mode_enum(int64_t);

    /** Convert SgTypeModifier::gnu_extension_machine_mode_enum enum constant to a string. */
    std::string gnu_extension_machine_mode_enum(int64_t, const std::string &strip);

    /** Return all SgTypeModifier::gnu_extension_machine_mode_enum member values as a vector. */
    const std::vector<int64_t>& gnu_extension_machine_mode_enum();
}}

namespace Rose {
    std::string stringifySgTypeModifier_gnu_extension_machine_mode_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgTypeModifier_gnu_extension_machine_mode_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 18470
namespace stringify { namespace SgDeclarationModifier {
    /** Convert SgDeclarationModifier::declaration_modifier_enum enum constant to a string. */
    const char* declaration_modifier_enum(int64_t);

    /** Convert SgDeclarationModifier::declaration_modifier_enum enum constant to a string. */
    std::string declaration_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgDeclarationModifier::declaration_modifier_enum member values as a vector. */
    const std::vector<int64_t>& declaration_modifier_enum();
}}

namespace Rose {
    std::string stringifySgDeclarationModifier_declaration_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgDeclarationModifier_declaration_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 18527
namespace stringify { namespace SgDeclarationModifier {
    /** Convert SgDeclarationModifier::gnu_declaration_visability_enum enum constant to a string. */
    const char* gnu_declaration_visability_enum(int64_t);

    /** Convert SgDeclarationModifier::gnu_declaration_visability_enum enum constant to a string. */
    std::string gnu_declaration_visability_enum(int64_t, const std::string &strip);

    /** Return all SgDeclarationModifier::gnu_declaration_visability_enum member values as a vector. */
    const std::vector<int64_t>& gnu_declaration_visability_enum();
}}

namespace Rose {
    std::string stringifySgDeclarationModifier_gnu_declaration_visability_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgDeclarationModifier_gnu_declaration_visability_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 19275
namespace stringify { namespace SgOpenclAccessModeModifier {
    /** Convert SgOpenclAccessModeModifier::access_mode_modifier_enum enum constant to a string. */
    const char* access_mode_modifier_enum(int64_t);

    /** Convert SgOpenclAccessModeModifier::access_mode_modifier_enum enum constant to a string. */
    std::string access_mode_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgOpenclAccessModeModifier::access_mode_modifier_enum member values as a vector. */
    const std::vector<int64_t>& access_mode_modifier_enum();
}}

namespace Rose {
    std::string stringifySgOpenclAccessModeModifier_access_mode_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOpenclAccessModeModifier_access_mode_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 23925
namespace stringify { namespace Sg_File_Info {
    /** Convert Sg_File_Info::classifier enum constant to a string. */
    const char* classifier(int64_t);

    /** Convert Sg_File_Info::classifier enum constant to a string. */
    std::string classifier(int64_t, const std::string &strip);

    /** Return all Sg_File_Info::classifier member values as a vector. */
    const std::vector<int64_t>& classifier();
}}

namespace Rose {
    std::string stringifySg_File_Info_classifier(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySg_File_Info_classifier();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 24190
namespace stringify { namespace Sg_File_Info {
    /** Convert Sg_File_Info::p_fileflags enum constant to a string. */
    const char* p_fileflags(int64_t);

    /** Convert Sg_File_Info::p_fileflags enum constant to a string. */
    std::string p_fileflags(int64_t, const std::string &strip);

    /** Return all Sg_File_Info::p_fileflags member values as a vector. */
    const std::vector<int64_t>& p_fileflags();
}}

namespace Rose {
    std::string stringifySg_File_Info_p_fileflags(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySg_File_Info_p_fileflags();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 24779
namespace stringify { namespace SgFile {
    /** Convert SgFile::outputFormatOption_enum enum constant to a string. */
    const char* outputFormatOption_enum(int64_t);

    /** Convert SgFile::outputFormatOption_enum enum constant to a string. */
    std::string outputFormatOption_enum(int64_t, const std::string &strip);

    /** Return all SgFile::outputFormatOption_enum member values as a vector. */
    const std::vector<int64_t>& outputFormatOption_enum();
}}

namespace Rose {
    std::string stringifySgFile_outputFormatOption_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgFile_outputFormatOption_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 24794
namespace stringify { namespace SgFile {
    /** Convert SgFile::languageOption_enum enum constant to a string. */
    const char* languageOption_enum(int64_t);

    /** Convert SgFile::languageOption_enum enum constant to a string. */
    std::string languageOption_enum(int64_t, const std::string &strip);

    /** Return all SgFile::languageOption_enum member values as a vector. */
    const std::vector<int64_t>& languageOption_enum();
}}

namespace Rose {
    std::string stringifySgFile_languageOption_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgFile_languageOption_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 24815
namespace stringify { namespace SgFile {
    /** Convert SgFile::standard_enum enum constant to a string. */
    const char* standard_enum(int64_t);

    /** Convert SgFile::standard_enum enum constant to a string. */
    std::string standard_enum(int64_t, const std::string &strip);

    /** Return all SgFile::standard_enum member values as a vector. */
    const std::vector<int64_t>& standard_enum();
}}

namespace Rose {
    std::string stringifySgFile_standard_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgFile_standard_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 28455
namespace stringify { namespace SgProject {
    /** Convert SgProject::template_instantiation_enum enum constant to a string. */
    const char* template_instantiation_enum(int64_t);

    /** Convert SgProject::template_instantiation_enum enum constant to a string. */
    std::string template_instantiation_enum(int64_t, const std::string &strip);

    /** Return all SgProject::template_instantiation_enum member values as a vector. */
    const std::vector<int64_t>& template_instantiation_enum();
}}

namespace Rose {
    std::string stringifySgProject_template_instantiation_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgProject_template_instantiation_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 30457
namespace stringify { namespace SgUnparse_Info {
    /** Convert SgUnparse_Info::unparse_type_num enum constant to a string. */
    const char* unparse_type_num(int64_t);

    /** Convert SgUnparse_Info::unparse_type_num enum constant to a string. */
    std::string unparse_type_num(int64_t, const std::string &strip);

    /** Return all SgUnparse_Info::unparse_type_num member values as a vector. */
    const std::vector<int64_t>& unparse_type_num();
}}

namespace Rose {
    std::string stringifySgUnparse_Info_unparse_type_num(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgUnparse_Info_unparse_type_num();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 30629
namespace stringify { namespace SgUnparse_Info {
    /** Convert SgUnparse_Info::access_attr_enum enum constant to a string. */
    const char* access_attr_enum(int64_t);

    /** Convert SgUnparse_Info::access_attr_enum enum constant to a string. */
    std::string access_attr_enum(int64_t, const std::string &strip);

    /** Return all SgUnparse_Info::access_attr_enum member values as a vector. */
    const std::vector<int64_t>& access_attr_enum();
}}

namespace Rose {
    std::string stringifySgUnparse_Info_access_attr_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgUnparse_Info_access_attr_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 33675
namespace stringify { namespace SgTemplateParameter {
    /** Convert SgTemplateParameter::template_parameter_enum enum constant to a string. */
    const char* template_parameter_enum(int64_t);

    /** Convert SgTemplateParameter::template_parameter_enum enum constant to a string. */
    std::string template_parameter_enum(int64_t, const std::string &strip);

    /** Return all SgTemplateParameter::template_parameter_enum member values as a vector. */
    const std::vector<int64_t>& template_parameter_enum();
}}

namespace Rose {
    std::string stringifySgTemplateParameter_template_parameter_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgTemplateParameter_template_parameter_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 34240
namespace stringify { namespace SgTemplateArgument {
    /** Convert SgTemplateArgument::template_argument_enum enum constant to a string. */
    const char* template_argument_enum(int64_t);

    /** Convert SgTemplateArgument::template_argument_enum enum constant to a string. */
    std::string template_argument_enum(int64_t, const std::string &strip);

    /** Return all SgTemplateArgument::template_argument_enum member values as a vector. */
    const std::vector<int64_t>& template_argument_enum();
}}

namespace Rose {
    std::string stringifySgTemplateArgument_template_argument_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgTemplateArgument_template_argument_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 39443
namespace stringify { namespace SgGraph {
    /** Convert SgGraph::GraphEdgeType enum constant to a string. */
    const char* GraphEdgeType(int64_t);

    /** Convert SgGraph::GraphEdgeType enum constant to a string. */
    std::string GraphEdgeType(int64_t, const std::string &strip);

    /** Return all SgGraph::GraphEdgeType member values as a vector. */
    const std::vector<int64_t>& GraphEdgeType();
}}

namespace Rose {
    std::string stringifySgGraphGraphEdgeType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgGraphGraphEdgeType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 39457
namespace stringify { namespace SgGraph {
    /** Convert SgGraph::GraphProperties enum constant to a string. */
    const char* GraphProperties(int64_t);

    /** Convert SgGraph::GraphProperties enum constant to a string. */
    std::string GraphProperties(int64_t, const std::string &strip);

    /** Return all SgGraph::GraphProperties member values as a vector. */
    const std::vector<int64_t>& GraphProperties();
}}

namespace Rose {
    std::string stringifySgGraphGraphProperties(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgGraphGraphProperties();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 49754
namespace stringify { namespace SgDataStatementValue {
    /** Convert SgDataStatementValue::data_statement_value_enum enum constant to a string. */
    const char* data_statement_value_enum(int64_t);

    /** Convert SgDataStatementValue::data_statement_value_enum enum constant to a string. */
    std::string data_statement_value_enum(int64_t, const std::string &strip);

    /** Return all SgDataStatementValue::data_statement_value_enum member values as a vector. */
    const std::vector<int64_t>& data_statement_value_enum();
}}

namespace Rose {
    std::string stringifySgDataStatementValue_data_statement_value_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgDataStatementValue_data_statement_value_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 51875
namespace stringify { namespace SgType {
    /** Convert SgType::useWithinDeclarationEnum enum constant to a string. */
    const char* useWithinDeclarationEnum(int64_t);

    /** Convert SgType::useWithinDeclarationEnum enum constant to a string. */
    std::string useWithinDeclarationEnum(int64_t, const std::string &strip);

    /** Return all SgType::useWithinDeclarationEnum member values as a vector. */
    const std::vector<int64_t>& useWithinDeclarationEnum();
}}

namespace Rose {
    std::string stringifySgType_useWithinDeclarationEnum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgType_useWithinDeclarationEnum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 51893
namespace stringify { namespace SgType {
    /** Convert SgType::fortran_attribute_specifiers_enum enum constant to a string. */
    const char* fortran_attribute_specifiers_enum(int64_t);

    /** Convert SgType::fortran_attribute_specifiers_enum enum constant to a string. */
    std::string fortran_attribute_specifiers_enum(int64_t, const std::string &strip);

    /** Return all SgType::fortran_attribute_specifiers_enum member values as a vector. */
    const std::vector<int64_t>& fortran_attribute_specifiers_enum();
}}

namespace Rose {
    std::string stringifySgType_fortran_attribute_specifiers_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgType_fortran_attribute_specifiers_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 69469
namespace stringify { namespace SgJovialTableType {
    /** Convert SgJovialTableType::structure_specifier_enum enum constant to a string. */
    const char* structure_specifier_enum(int64_t);

    /** Convert SgJovialTableType::structure_specifier_enum enum constant to a string. */
    std::string structure_specifier_enum(int64_t, const std::string &strip);

    /** Return all SgJovialTableType::structure_specifier_enum member values as a vector. */
    const std::vector<int64_t>& structure_specifier_enum();
}}

namespace Rose {
    std::string stringifySgJovialTableType_structure_specifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgJovialTableType_structure_specifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 73863
namespace stringify { namespace SgModifierType {
    /** Convert SgModifierType::modifiers enum constant to a string. */
    const char* modifiers(int64_t);

    /** Convert SgModifierType::modifiers enum constant to a string. */
    std::string modifiers(int64_t, const std::string &strip);

    /** Return all SgModifierType::modifiers member values as a vector. */
    const std::vector<int64_t>& modifiers();
}}

namespace Rose {
    std::string stringifySgModifierType_modifiers(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgModifierType_modifiers();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 73917
namespace stringify { namespace SgModifierType {
    /** Convert SgModifierType::type_modifier_enum enum constant to a string. */
    const char* type_modifier_enum(int64_t);

    /** Convert SgModifierType::type_modifier_enum enum constant to a string. */
    std::string type_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgModifierType::type_modifier_enum member values as a vector. */
    const std::vector<int64_t>& type_modifier_enum();
}}

namespace Rose {
    std::string stringifySgModifierType_type_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgModifierType_type_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 73934
namespace stringify { namespace SgModifierType {
    /** Convert SgModifierType::storage_modifier_enum enum constant to a string. */
    const char* storage_modifier_enum(int64_t);

    /** Convert SgModifierType::storage_modifier_enum enum constant to a string. */
    std::string storage_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgModifierType::storage_modifier_enum member values as a vector. */
    const std::vector<int64_t>& storage_modifier_enum();
}}

namespace Rose {
    std::string stringifySgModifierType_storage_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgModifierType_storage_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 73956
namespace stringify { namespace SgModifierType {
    /** Convert SgModifierType::access_modifier_enum enum constant to a string. */
    const char* access_modifier_enum(int64_t);

    /** Convert SgModifierType::access_modifier_enum enum constant to a string. */
    std::string access_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgModifierType::access_modifier_enum member values as a vector. */
    const std::vector<int64_t>& access_modifier_enum();
}}

namespace Rose {
    std::string stringifySgModifierType_access_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgModifierType_access_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 75201
namespace stringify { namespace SgMemberFunctionType {
    /** Convert SgMemberFunctionType::mfunc_specifier_enum enum constant to a string. */
    const char* mfunc_specifier_enum(int64_t);

    /** Convert SgMemberFunctionType::mfunc_specifier_enum enum constant to a string. */
    std::string mfunc_specifier_enum(int64_t, const std::string &strip);

    /** Return all SgMemberFunctionType::mfunc_specifier_enum member values as a vector. */
    const std::vector<int64_t>& mfunc_specifier_enum();
}}

namespace Rose {
    std::string stringifySgMemberFunctionType_mfunc_specifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgMemberFunctionType_mfunc_specifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 90324
namespace stringify { namespace SgLocatedNode {
    /** Convert SgLocatedNode::PositionOfPreprocessingInfoInListType enum constant to a string. */
    const char* PositionOfPreprocessingInfoInListType(int64_t);

    /** Convert SgLocatedNode::PositionOfPreprocessingInfoInListType enum constant to a string. */
    std::string PositionOfPreprocessingInfoInListType(int64_t, const std::string &strip);

    /** Return all SgLocatedNode::PositionOfPreprocessingInfoInListType member values as a vector. */
    const std::vector<int64_t>& PositionOfPreprocessingInfoInListType();
}}

namespace Rose {
    std::string stringifySgLocatedNodePositionOfPreprocessingInfoInListType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgLocatedNodePositionOfPreprocessingInfoInListType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 91119
namespace stringify { namespace SgToken {
    /** Convert SgToken::ROSE_Fortran_Keywords enum constant to a string. */
    const char* ROSE_Fortran_Keywords(int64_t);

    /** Convert SgToken::ROSE_Fortran_Keywords enum constant to a string. */
    std::string ROSE_Fortran_Keywords(int64_t, const std::string &strip);

    /** Return all SgToken::ROSE_Fortran_Keywords member values as a vector. */
    const std::vector<int64_t>& ROSE_Fortran_Keywords();
}}

namespace Rose {
    std::string stringifySgTokenROSE_Fortran_Keywords(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgTokenROSE_Fortran_Keywords();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 91286
namespace stringify { namespace SgToken {
    /** Convert SgToken::ROSE_C_CXX_keywords enum constant to a string. */
    const char* ROSE_C_CXX_keywords(int64_t);

    /** Convert SgToken::ROSE_C_CXX_keywords enum constant to a string. */
    std::string ROSE_C_CXX_keywords(int64_t, const std::string &strip);

    /** Return all SgToken::ROSE_C_CXX_keywords member values as a vector. */
    const std::vector<int64_t>& ROSE_C_CXX_keywords();
}}

namespace Rose {
    std::string stringifySgTokenROSE_C_CXX_keywords(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgTokenROSE_C_CXX_keywords();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 91355
namespace stringify { namespace SgToken {
    /** Convert SgToken::ROSE_Fortran_Operators enum constant to a string. */
    const char* ROSE_Fortran_Operators(int64_t);

    /** Convert SgToken::ROSE_Fortran_Operators enum constant to a string. */
    std::string ROSE_Fortran_Operators(int64_t, const std::string &strip);

    /** Return all SgToken::ROSE_Fortran_Operators member values as a vector. */
    const std::vector<int64_t>& ROSE_Fortran_Operators();
}}

namespace Rose {
    std::string stringifySgTokenROSE_Fortran_Operators(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgTokenROSE_Fortran_Operators();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 91382
namespace stringify { namespace SgToken {
    /** Convert SgToken::ROSE_C_CXX_Operators enum constant to a string. */
    const char* ROSE_C_CXX_Operators(int64_t);

    /** Convert SgToken::ROSE_C_CXX_Operators enum constant to a string. */
    std::string ROSE_C_CXX_Operators(int64_t, const std::string &strip);

    /** Return all SgToken::ROSE_C_CXX_Operators member values as a vector. */
    const std::vector<int64_t>& ROSE_C_CXX_Operators();
}}

namespace Rose {
    std::string stringifySgTokenROSE_C_CXX_Operators(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgTokenROSE_C_CXX_Operators();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 91462
namespace stringify { namespace SgToken {
    /** Convert SgToken::ROSE_Fortran_Additional_Info enum constant to a string. */
    const char* ROSE_Fortran_Additional_Info(int64_t);

    /** Convert SgToken::ROSE_Fortran_Additional_Info enum constant to a string. */
    std::string ROSE_Fortran_Additional_Info(int64_t, const std::string &strip);

    /** Return all SgToken::ROSE_Fortran_Additional_Info member values as a vector. */
    const std::vector<int64_t>& ROSE_Fortran_Additional_Info();
}}

namespace Rose {
    std::string stringifySgTokenROSE_Fortran_Additional_Info(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgTokenROSE_Fortran_Additional_Info();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 92935
namespace stringify { namespace SgInitializedName {
    /** Convert SgInitializedName::preinitialization_enum enum constant to a string. */
    const char* preinitialization_enum(int64_t);

    /** Convert SgInitializedName::preinitialization_enum enum constant to a string. */
    std::string preinitialization_enum(int64_t, const std::string &strip);

    /** Return all SgInitializedName::preinitialization_enum member values as a vector. */
    const std::vector<int64_t>& preinitialization_enum();
}}

namespace Rose {
    std::string stringifySgInitializedName_preinitialization_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgInitializedName_preinitialization_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 92950
namespace stringify { namespace SgInitializedName {
    /** Convert SgInitializedName::asm_register_name_enum enum constant to a string. */
    const char* asm_register_name_enum(int64_t);

    /** Convert SgInitializedName::asm_register_name_enum enum constant to a string. */
    std::string asm_register_name_enum(int64_t, const std::string &strip);

    /** Return all SgInitializedName::asm_register_name_enum member values as a vector. */
    const std::vector<int64_t>& asm_register_name_enum();
}}

namespace Rose {
    std::string stringifySgInitializedName_asm_register_name_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgInitializedName_asm_register_name_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 93012
namespace stringify { namespace SgInitializedName {
    /** Convert SgInitializedName::gnu_variable_attribute_enum enum constant to a string. */
    const char* gnu_variable_attribute_enum(int64_t);

    /** Convert SgInitializedName::gnu_variable_attribute_enum enum constant to a string. */
    std::string gnu_variable_attribute_enum(int64_t, const std::string &strip);

    /** Return all SgInitializedName::gnu_variable_attribute_enum member values as a vector. */
    const std::vector<int64_t>& gnu_variable_attribute_enum();
}}

namespace Rose {
    std::string stringifySgInitializedName_gnu_variable_attribute_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgInitializedName_gnu_variable_attribute_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 93046
namespace stringify { namespace SgInitializedName {
    /** Convert SgInitializedName::excess_specifier_enum enum constant to a string. */
    const char* excess_specifier_enum(int64_t);

    /** Convert SgInitializedName::excess_specifier_enum enum constant to a string. */
    std::string excess_specifier_enum(int64_t, const std::string &strip);

    /** Return all SgInitializedName::excess_specifier_enum member values as a vector. */
    const std::vector<int64_t>& excess_specifier_enum();
}}

namespace Rose {
    std::string stringifySgInitializedName_excess_specifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgInitializedName_excess_specifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 96109
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_default_option_enum enum constant to a string. */
    const char* omp_default_option_enum(int64_t);

    /** Convert SgOmpClause::omp_default_option_enum enum constant to a string. */
    std::string omp_default_option_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_default_option_enum member values as a vector. */
    const std::vector<int64_t>& omp_default_option_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_default_option_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_default_option_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 96121
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_schedule_kind_enum enum constant to a string. */
    const char* omp_schedule_kind_enum(int64_t);

    /** Convert SgOmpClause::omp_schedule_kind_enum enum constant to a string. */
    std::string omp_schedule_kind_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_schedule_kind_enum member values as a vector. */
    const std::vector<int64_t>& omp_schedule_kind_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_schedule_kind_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_schedule_kind_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 96131
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_reduction_operator_enum enum constant to a string. */
    const char* omp_reduction_operator_enum(int64_t);

    /** Convert SgOmpClause::omp_reduction_operator_enum enum constant to a string. */
    std::string omp_reduction_operator_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_reduction_operator_enum member values as a vector. */
    const std::vector<int64_t>& omp_reduction_operator_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_reduction_operator_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_reduction_operator_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 96159
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_dependence_type_enum enum constant to a string. */
    const char* omp_dependence_type_enum(int64_t);

    /** Convert SgOmpClause::omp_dependence_type_enum enum constant to a string. */
    std::string omp_dependence_type_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_dependence_type_enum member values as a vector. */
    const std::vector<int64_t>& omp_dependence_type_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_dependence_type_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_dependence_type_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 96169
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_map_operator_enum enum constant to a string. */
    const char* omp_map_operator_enum(int64_t);

    /** Convert SgOmpClause::omp_map_operator_enum enum constant to a string. */
    std::string omp_map_operator_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_map_operator_enum member values as a vector. */
    const std::vector<int64_t>& omp_map_operator_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_map_operator_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_map_operator_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 96180
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_map_dist_data_enum enum constant to a string. */
    const char* omp_map_dist_data_enum(int64_t);

    /** Convert SgOmpClause::omp_map_dist_data_enum enum constant to a string. */
    std::string omp_map_dist_data_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_map_dist_data_enum member values as a vector. */
    const std::vector<int64_t>& omp_map_dist_data_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_map_dist_data_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_map_dist_data_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 96190
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_proc_bind_policy_enum enum constant to a string. */
    const char* omp_proc_bind_policy_enum(int64_t);

    /** Convert SgOmpClause::omp_proc_bind_policy_enum enum constant to a string. */
    std::string omp_proc_bind_policy_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_proc_bind_policy_enum member values as a vector. */
    const std::vector<int64_t>& omp_proc_bind_policy_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_proc_bind_policy_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_proc_bind_policy_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 96199
namespace stringify { namespace SgOmpClause {
    /** Convert SgOmpClause::omp_atomic_clause_enum enum constant to a string. */
    const char* omp_atomic_clause_enum(int64_t);

    /** Convert SgOmpClause::omp_atomic_clause_enum enum constant to a string. */
    std::string omp_atomic_clause_enum(int64_t, const std::string &strip);

    /** Return all SgOmpClause::omp_atomic_clause_enum member values as a vector. */
    const std::vector<int64_t>& omp_atomic_clause_enum();
}}

namespace Rose {
    std::string stringifySgOmpClause_omp_atomic_clause_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgOmpClause_omp_atomic_clause_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 151085
namespace stringify { namespace SgUntypedType {
    /** Convert SgUntypedType::type_enum enum constant to a string. */
    const char* type_enum(int64_t);

    /** Convert SgUntypedType::type_enum enum constant to a string. */
    std::string type_enum(int64_t, const std::string &strip);

    /** Return all SgUntypedType::type_enum member values as a vector. */
    const std::vector<int64_t>& type_enum();
}}

namespace Rose {
    std::string stringifySgUntypedType_type_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgUntypedType_type_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 169955
namespace stringify { namespace SgForAllStatement {
    /** Convert SgForAllStatement::forall_statement_kind_enum enum constant to a string. */
    const char* forall_statement_kind_enum(int64_t);

    /** Convert SgForAllStatement::forall_statement_kind_enum enum constant to a string. */
    std::string forall_statement_kind_enum(int64_t, const std::string &strip);

    /** Return all SgForAllStatement::forall_statement_kind_enum member values as a vector. */
    const std::vector<int64_t>& forall_statement_kind_enum();
}}

namespace Rose {
    std::string stringifySgForAllStatement_forall_statement_kind_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgForAllStatement_forall_statement_kind_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 178217
namespace stringify { namespace SgDeclarationStatement {
    /** Convert SgDeclarationStatement::template_specialization_enum enum constant to a string. */
    const char* template_specialization_enum(int64_t);

    /** Convert SgDeclarationStatement::template_specialization_enum enum constant to a string. */
    std::string template_specialization_enum(int64_t, const std::string &strip);

    /** Return all SgDeclarationStatement::template_specialization_enum member values as a vector. */
    const std::vector<int64_t>& template_specialization_enum();
}}

namespace Rose {
    std::string stringifySgDeclarationStatement_template_specialization_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgDeclarationStatement_template_specialization_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 178232
namespace stringify { namespace SgDeclarationStatement {
    /** Convert SgDeclarationStatement::gnu_extension_visability_attribute_enum enum constant to a string. */
    const char* gnu_extension_visability_attribute_enum(int64_t);

    /** Convert SgDeclarationStatement::gnu_extension_visability_attribute_enum enum constant to a string. */
    std::string gnu_extension_visability_attribute_enum(int64_t, const std::string &strip);

    /** Return all SgDeclarationStatement::gnu_extension_visability_attribute_enum member values as a vector. */
    const std::vector<int64_t>& gnu_extension_visability_attribute_enum();
}}

namespace Rose {
    std::string stringifySgDeclarationStatement_gnu_extension_visability_attribute_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgDeclarationStatement_gnu_extension_visability_attribute_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 179697
namespace stringify { namespace SgVariableDeclaration {
    /** Convert SgVariableDeclaration::gnu_extension_declaration_attributes_enum enum constant to a string. */
    const char* gnu_extension_declaration_attributes_enum(int64_t);

    /** Convert SgVariableDeclaration::gnu_extension_declaration_attributes_enum enum constant to a string. */
    std::string gnu_extension_declaration_attributes_enum(int64_t, const std::string &strip);

    /** Return all SgVariableDeclaration::gnu_extension_declaration_attributes_enum member values as a vector. */
    const std::vector<int64_t>& gnu_extension_declaration_attributes_enum();
}}

namespace Rose {
    std::string stringifySgVariableDeclaration_gnu_extension_declaration_attributes_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgVariableDeclaration_gnu_extension_declaration_attributes_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 184177
namespace stringify { namespace SgAttributeSpecificationStatement {
    /** Convert SgAttributeSpecificationStatement::attribute_spec_enum enum constant to a string. */
    const char* attribute_spec_enum(int64_t);

    /** Convert SgAttributeSpecificationStatement::attribute_spec_enum enum constant to a string. */
    std::string attribute_spec_enum(int64_t, const std::string &strip);

    /** Return all SgAttributeSpecificationStatement::attribute_spec_enum member values as a vector. */
    const std::vector<int64_t>& attribute_spec_enum();
}}

namespace Rose {
    std::string stringifySgAttributeSpecificationStatement_attribute_spec_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAttributeSpecificationStatement_attribute_spec_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 185245
namespace stringify { namespace SgTemplateDeclaration {
    /** Convert SgTemplateDeclaration::template_type_enum enum constant to a string. */
    const char* template_type_enum(int64_t);

    /** Convert SgTemplateDeclaration::template_type_enum enum constant to a string. */
    std::string template_type_enum(int64_t, const std::string &strip);

    /** Return all SgTemplateDeclaration::template_type_enum member values as a vector. */
    const std::vector<int64_t>& template_type_enum();
}}

namespace Rose {
    std::string stringifySgTemplateDeclaration_template_type_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgTemplateDeclaration_template_type_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 188355
namespace stringify { namespace SgInterfaceStatement {
    /** Convert SgInterfaceStatement::generic_spec_enum enum constant to a string. */
    const char* generic_spec_enum(int64_t);

    /** Convert SgInterfaceStatement::generic_spec_enum enum constant to a string. */
    std::string generic_spec_enum(int64_t, const std::string &strip);

    /** Return all SgInterfaceStatement::generic_spec_enum member values as a vector. */
    const std::vector<int64_t>& generic_spec_enum();
}}

namespace Rose {
    std::string stringifySgInterfaceStatement_generic_spec_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgInterfaceStatement_generic_spec_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 193683
namespace stringify { namespace SgClassDeclaration {
    /** Convert SgClassDeclaration::class_types enum constant to a string. */
    const char* class_types(int64_t);

    /** Convert SgClassDeclaration::class_types enum constant to a string. */
    std::string class_types(int64_t, const std::string &strip);

    /** Return all SgClassDeclaration::class_types member values as a vector. */
    const std::vector<int64_t>& class_types();
}}

namespace Rose {
    std::string stringifySgClassDeclaration_class_types(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgClassDeclaration_class_types();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 194384
namespace stringify { namespace SgTemplateClassDeclaration {
    /** Convert SgTemplateClassDeclaration::class_types enum constant to a string. */
    const char* class_types(int64_t);

    /** Convert SgTemplateClassDeclaration::class_types enum constant to a string. */
    std::string class_types(int64_t, const std::string &strip);

    /** Return all SgTemplateClassDeclaration::class_types member values as a vector. */
    const std::vector<int64_t>& class_types();
}}

namespace Rose {
    std::string stringifySgTemplateClassDeclaration_class_types(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgTemplateClassDeclaration_class_types();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 203589
namespace stringify { namespace SgProcedureHeaderStatement {
    /** Convert SgProcedureHeaderStatement::subprogram_kind_enum enum constant to a string. */
    const char* subprogram_kind_enum(int64_t);

    /** Convert SgProcedureHeaderStatement::subprogram_kind_enum enum constant to a string. */
    std::string subprogram_kind_enum(int64_t, const std::string &strip);

    /** Return all SgProcedureHeaderStatement::subprogram_kind_enum member values as a vector. */
    const std::vector<int64_t>& subprogram_kind_enum();
}}

namespace Rose {
    std::string stringifySgProcedureHeaderStatement_subprogram_kind_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgProcedureHeaderStatement_subprogram_kind_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 218616
namespace stringify { namespace SgJovialDirectiveStatement {
    /** Convert SgJovialDirectiveStatement::directive_types enum constant to a string. */
    const char* directive_types(int64_t);

    /** Convert SgJovialDirectiveStatement::directive_types enum constant to a string. */
    std::string directive_types(int64_t, const std::string &strip);

    /** Return all SgJovialDirectiveStatement::directive_types member values as a vector. */
    const std::vector<int64_t>& directive_types();
}}

namespace Rose {
    std::string stringifySgJovialDirectiveStatement_directive_types(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgJovialDirectiveStatement_directive_types();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 230917
namespace stringify { namespace SgProcessControlStatement {
    /** Convert SgProcessControlStatement::control_enum enum constant to a string. */
    const char* control_enum(int64_t);

    /** Convert SgProcessControlStatement::control_enum enum constant to a string. */
    std::string control_enum(int64_t, const std::string &strip);

    /** Return all SgProcessControlStatement::control_enum member values as a vector. */
    const std::vector<int64_t>& control_enum();
}}

namespace Rose {
    std::string stringifySgProcessControlStatement_control_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgProcessControlStatement_control_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 231441
namespace stringify { namespace SgIOStatement {
    /** Convert SgIOStatement::io_statement_enum enum constant to a string. */
    const char* io_statement_enum(int64_t);

    /** Convert SgIOStatement::io_statement_enum enum constant to a string. */
    std::string io_statement_enum(int64_t, const std::string &strip);

    /** Return all SgIOStatement::io_statement_enum member values as a vector. */
    const std::vector<int64_t>& io_statement_enum();
}}

namespace Rose {
    std::string stringifySgIOStatement_io_statement_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgIOStatement_io_statement_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 261296
namespace stringify { namespace SgImageControlStatement {
    /** Convert SgImageControlStatement::image_control_statement_enum enum constant to a string. */
    const char* image_control_statement_enum(int64_t);

    /** Convert SgImageControlStatement::image_control_statement_enum enum constant to a string. */
    std::string image_control_statement_enum(int64_t, const std::string &strip);

    /** Return all SgImageControlStatement::image_control_statement_enum member values as a vector. */
    const std::vector<int64_t>& image_control_statement_enum();
}}

namespace Rose {
    std::string stringifySgImageControlStatement_image_control_statement_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgImageControlStatement_image_control_statement_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 266488
namespace stringify { namespace SgUnaryOp {
    /** Convert SgUnaryOp::Sgop_mode enum constant to a string. */
    const char* Sgop_mode(int64_t);

    /** Convert SgUnaryOp::Sgop_mode enum constant to a string. */
    std::string Sgop_mode(int64_t, const std::string &strip);

    /** Return all SgUnaryOp::Sgop_mode member values as a vector. */
    const std::vector<int64_t>& Sgop_mode();
}}

namespace Rose {
    std::string stringifySgUnaryOpSgop_mode(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgUnaryOpSgop_mode();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 271423
namespace stringify { namespace SgCastExp {
    /** Convert SgCastExp::cast_type_enum enum constant to a string. */
    const char* cast_type_enum(int64_t);

    /** Convert SgCastExp::cast_type_enum enum constant to a string. */
    std::string cast_type_enum(int64_t, const std::string &strip);

    /** Return all SgCastExp::cast_type_enum member values as a vector. */
    const std::vector<int64_t>& cast_type_enum();
}}

namespace Rose {
    std::string stringifySgCastExp_cast_type_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgCastExp_cast_type_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 272030
namespace stringify { namespace SgThrowOp {
    /** Convert SgThrowOp::e_throw_kind enum constant to a string. */
    const char* e_throw_kind(int64_t);

    /** Convert SgThrowOp::e_throw_kind enum constant to a string. */
    std::string e_throw_kind(int64_t, const std::string &strip);

    /** Return all SgThrowOp::e_throw_kind member values as a vector. */
    const std::vector<int64_t>& e_throw_kind();
}}

namespace Rose {
    std::string stringifySgThrowOp_e_throw_kind(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgThrowOp_e_throw_kind();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 344195
namespace stringify { namespace SgAsmOp {
    /** Convert SgAsmOp::asm_operand_modifier_enum enum constant to a string. */
    const char* asm_operand_modifier_enum(int64_t);

    /** Convert SgAsmOp::asm_operand_modifier_enum enum constant to a string. */
    std::string asm_operand_modifier_enum(int64_t, const std::string &strip);

    /** Return all SgAsmOp::asm_operand_modifier_enum member values as a vector. */
    const std::vector<int64_t>& asm_operand_modifier_enum();
}}

namespace Rose {
    std::string stringifySgAsmOp_asm_operand_modifier_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmOp_asm_operand_modifier_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 344214
namespace stringify { namespace SgAsmOp {
    /** Convert SgAsmOp::asm_operand_constraint_enum enum constant to a string. */
    const char* asm_operand_constraint_enum(int64_t);

    /** Convert SgAsmOp::asm_operand_constraint_enum enum constant to a string. */
    std::string asm_operand_constraint_enum(int64_t, const std::string &strip);

    /** Return all SgAsmOp::asm_operand_constraint_enum member values as a vector. */
    const std::vector<int64_t>& asm_operand_constraint_enum();
}}

namespace Rose {
    std::string stringifySgAsmOp_asm_operand_constraint_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmOp_asm_operand_constraint_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 375500
namespace stringify { namespace SgLabelSymbol {
    /** Convert SgLabelSymbol::label_type_enum enum constant to a string. */
    const char* label_type_enum(int64_t);

    /** Convert SgLabelSymbol::label_type_enum enum constant to a string. */
    std::string label_type_enum(int64_t, const std::string &strip);

    /** Return all SgLabelSymbol::label_type_enum member values as a vector. */
    const std::vector<int64_t>& label_type_enum();
}}

namespace Rose {
    std::string stringifySgLabelSymbol_label_type_enum(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgLabelSymbol_label_type_enum();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 420506
namespace stringify { namespace SgAsmLEFileHeader {
    /** Convert SgAsmLEFileHeader::LEFileHeaderFlags enum constant to a string. */
    const char* LEFileHeaderFlags(int64_t);

    /** Convert SgAsmLEFileHeader::LEFileHeaderFlags enum constant to a string. */
    std::string LEFileHeaderFlags(int64_t, const std::string &strip);

    /** Return all SgAsmLEFileHeader::LEFileHeaderFlags member values as a vector. */
    const std::vector<int64_t>& LEFileHeaderFlags();
}}

namespace Rose {
    std::string stringifySgAsmLEFileHeaderLEFileHeaderFlags(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmLEFileHeaderLEFileHeaderFlags();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 421493
namespace stringify { namespace SgAsmNEFileHeader {
    /** Convert SgAsmNEFileHeader::HeaderFlags1 enum constant to a string. */
    const char* HeaderFlags1(int64_t);

    /** Convert SgAsmNEFileHeader::HeaderFlags1 enum constant to a string. */
    std::string HeaderFlags1(int64_t, const std::string &strip);

    /** Return all SgAsmNEFileHeader::HeaderFlags1 member values as a vector. */
    const std::vector<int64_t>& HeaderFlags1();
}}

namespace Rose {
    std::string stringifySgAsmNEFileHeaderHeaderFlags1(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmNEFileHeaderHeaderFlags1();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 421504
namespace stringify { namespace SgAsmNEFileHeader {
    /** Convert SgAsmNEFileHeader::HeaderFlags2 enum constant to a string. */
    const char* HeaderFlags2(int64_t);

    /** Convert SgAsmNEFileHeader::HeaderFlags2 enum constant to a string. */
    std::string HeaderFlags2(int64_t, const std::string &strip);

    /** Return all SgAsmNEFileHeader::HeaderFlags2 member values as a vector. */
    const std::vector<int64_t>& HeaderFlags2();
}}

namespace Rose {
    std::string stringifySgAsmNEFileHeaderHeaderFlags2(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmNEFileHeaderHeaderFlags2();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 463547
namespace stringify { namespace SgAsmNEEntryPoint {
    /** Convert SgAsmNEEntryPoint::NEEntryFlags enum constant to a string. */
    const char* NEEntryFlags(int64_t);

    /** Convert SgAsmNEEntryPoint::NEEntryFlags enum constant to a string. */
    std::string NEEntryFlags(int64_t, const std::string &strip);

    /** Return all SgAsmNEEntryPoint::NEEntryFlags member values as a vector. */
    const std::vector<int64_t>& NEEntryFlags();
}}

namespace Rose {
    std::string stringifySgAsmNEEntryPointNEEntryFlags(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmNEEntryPointNEEntryFlags();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 464072
namespace stringify { namespace SgAsmNERelocEntry {
    /** Convert SgAsmNERelocEntry::NERelocSrcType enum constant to a string. */
    const char* NERelocSrcType(int64_t);

    /** Convert SgAsmNERelocEntry::NERelocSrcType enum constant to a string. */
    std::string NERelocSrcType(int64_t, const std::string &strip);

    /** Return all SgAsmNERelocEntry::NERelocSrcType member values as a vector. */
    const std::vector<int64_t>& NERelocSrcType();
}}

namespace Rose {
    std::string stringifySgAsmNERelocEntryNERelocSrcType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmNERelocEntryNERelocSrcType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 464084
namespace stringify { namespace SgAsmNERelocEntry {
    /** Convert SgAsmNERelocEntry::NERelocTgtType enum constant to a string. */
    const char* NERelocTgtType(int64_t);

    /** Convert SgAsmNERelocEntry::NERelocTgtType enum constant to a string. */
    std::string NERelocTgtType(int64_t, const std::string &strip);

    /** Return all SgAsmNERelocEntry::NERelocTgtType member values as a vector. */
    const std::vector<int64_t>& NERelocTgtType();
}}

namespace Rose {
    std::string stringifySgAsmNERelocEntryNERelocTgtType(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmNERelocEntryNERelocTgtType();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 464091
namespace stringify { namespace SgAsmNERelocEntry {
    /** Convert SgAsmNERelocEntry::NERelocModifiers enum constant to a string. */
    const char* NERelocModifiers(int64_t);

    /** Convert SgAsmNERelocEntry::NERelocModifiers enum constant to a string. */
    std::string NERelocModifiers(int64_t, const std::string &strip);

    /** Return all SgAsmNERelocEntry::NERelocModifiers member values as a vector. */
    const std::vector<int64_t>& NERelocModifiers();
}}

namespace Rose {
    std::string stringifySgAsmNERelocEntryNERelocModifiers(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmNERelocEntryNERelocModifiers();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 464096
namespace stringify { namespace SgAsmNERelocEntry {
    /** Convert SgAsmNERelocEntry::NERelocFlags enum constant to a string. */
    const char* NERelocFlags(int64_t);

    /** Convert SgAsmNERelocEntry::NERelocFlags enum constant to a string. */
    std::string NERelocFlags(int64_t, const std::string &strip);

    /** Return all SgAsmNERelocEntry::NERelocFlags member values as a vector. */
    const std::vector<int64_t>& NERelocFlags();
}}

namespace Rose {
    std::string stringifySgAsmNERelocEntryNERelocFlags(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmNERelocEntryNERelocFlags();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 464733
namespace stringify { namespace SgAsmNESectionTableEntry {
    /** Convert SgAsmNESectionTableEntry::NESectionFlags enum constant to a string. */
    const char* NESectionFlags(int64_t);

    /** Convert SgAsmNESectionTableEntry::NESectionFlags enum constant to a string. */
    std::string NESectionFlags(int64_t, const std::string &strip);

    /** Return all SgAsmNESectionTableEntry::NESectionFlags member values as a vector. */
    const std::vector<int64_t>& NESectionFlags();
}}

namespace Rose {
    std::string stringifySgAsmNESectionTableEntryNESectionFlags(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmNESectionTableEntryNESectionFlags();
}

// DO NOT EDIT -- This implementation was automatically generated for the enum defined at
// /_build/src/ROSETTA/src/Cxx_Grammar.h line 466869
namespace stringify { namespace SgAsmLESectionTableEntry {
    /** Convert SgAsmLESectionTableEntry::LESectionFlags enum constant to a string. */
    const char* LESectionFlags(int64_t);

    /** Convert SgAsmLESectionTableEntry::LESectionFlags enum constant to a string. */
    std::string LESectionFlags(int64_t, const std::string &strip);

    /** Return all SgAsmLESectionTableEntry::LESectionFlags member values as a vector. */
    const std::vector<int64_t>& LESectionFlags();
}}

namespace Rose {
    std::string stringifySgAsmLESectionTableEntryLESectionFlags(int64_t n, const char *strip=NULL, bool canonic=false);
    const std::vector<int64_t>& stringifySgAsmLESectionTableEntryLESectionFlags();
}

/** Stringification. */
namespace stringify {
    /** Stringification. */
    namespace FunctionCallInfo {
    }
    /** Stringification. */
    namespace OmpSupport {
    }
    /** Stringification. */
    namespace LibraryIdentification {
    }
    /** Stringification. */
    namespace Rose {
        /** Stringification. */
        namespace BinaryAnalysis {
            /** Stringification. */
            namespace SymbolicExprParser {
                /** Stringification. */
                namespace Token {
                }
            }
            /** Stringification. */
            namespace Concolic {
                /** Stringification. */
                namespace InputVariables {
                    /** Stringification. */
                    namespace Variable {
                    }
                }
                /** Stringification. */
                namespace Update {
                }
            }
            /** Stringification. */
            namespace DwarfLineMapper {
            }
            /** Stringification. */
            namespace Reachability {
            }
            /** Stringification. */
            namespace FunctionSimilarity {
            }
            /** Stringification. */
            namespace SmtSolver {
            }
            /** Stringification. */
            namespace InstructionSemantics2 {
                /** Stringification. */
                namespace DataFlowSemantics {
                    /** Stringification. */
                    namespace DataFlowEdge {
                    }
                }
                /** Stringification. */
                namespace BaseSemantics {
                }
                /** Stringification. */
                namespace UpdateCr {
                }
                /** Stringification. */
                namespace SaveLink {
                }
                /** Stringification. */
                namespace IntervalSemantics {
                }
                /** Stringification. */
                namespace SymbolicSemantics {
                    /** Stringification. */
                    namespace AllowSideEffects {
                    }
                }
                /** Stringification. */
                namespace DispatcherX86 {
                }
            }
            /** Stringification. */
            namespace TaintedFlow {
            }
            /** Stringification. */
            namespace SymbolicExpr {
                /** Stringification. */
                namespace TypeStyle {
                }
                /** Stringification. */
                namespace Formatter {
                }
                /** Stringification. */
                namespace Type {
                }
            }
            /** Stringification. */
            namespace Commit {
            }
            /** Stringification. */
            namespace CodeInserter {
            }
            /** Stringification. */
            namespace CallingConvention {
                /** Stringification. */
                namespace ParameterLocation {
                }
            }
            /** Stringification. */
            namespace FeasiblePath {
                /** Stringification. */
                namespace PathProcessor {
                }
            }
            /** Stringification. */
            namespace MagicNumber {
            }
            /** Stringification. */
            namespace HotPatch {
                /** Stringification. */
                namespace Record {
                }
            }
            /** Stringification. */
            namespace Strings {
            }
            /** Stringification. */
            namespace Debugger {
            }
            /** Stringification. */
            namespace Unparser {
                /** Stringification. */
                namespace EdgeArrows {
                }
                /** Stringification. */
                namespace ArrowMargin {
                }
            }
            /** Stringification. */
            namespace SerialIo {
            }
            /** Stringification. */
            namespace AsmUnparser {
            }
            /** Stringification. */
            namespace Partitioner2 {
                /** Stringification. */
                namespace Partitioner {
                    /** Stringification. */
                    namespace MayReturnVertexInfo {
                    }
                }
                /** Stringification. */
                namespace Function {
                }
                /** Stringification. */
                namespace Inliner {
                }
                /** Stringification. */
                namespace ModulesElf {
                    /** Stringification. */
                    namespace FixUndefinedSymbols {
                    }
                }
                /** Stringification. */
                namespace BasicBlockCallback {
                }
                /** Stringification. */
                namespace Precision {
                }
                /** Stringification. */
                namespace AllowParallelEdges {
                }
                /** Stringification. */
                namespace Reference {
                }
                /** Stringification. */
                namespace DataFlow {
                    /** Stringification. */
                    namespace DfCfgVertex {
                    }
                }
            }
            /** Stringification. */
            namespace BinaryLoader {
            }
            /** Stringification. */
            namespace Assembler {
            }
            /** Stringification. */
            namespace AssemblerX86 {
            }
            /** Stringification. */
            namespace DisassemblerMips {
                /** Stringification. */
                namespace Mips32 {
                }
            }
            /** Stringification. */
            namespace DisassemblerX86 {
            }
            /** Stringification. */
            namespace DisassemblerArm {
            }
            /** Stringification. */
            namespace ManagedInstruction {
            }
            /** Stringification. */
            namespace RegisterDictionary {
                /** Stringification. */
                namespace SortBySize {
                }
            }
            /** Stringification. */
            namespace MemoryMap {
                /** Stringification. */
                namespace Attach {
                }
            }
            /** Stringification. */
            namespace SRecord {
            }
        }
        /** Stringification. */
        namespace EditDistance {
            /** Stringification. */
            namespace TreeEditDistance {
            }
        }
        /** Stringification. */
        namespace Snippet {
        }
        /** Stringification. */
        namespace CommandLine {
            /** Stringification. */
            namespace FailedAssertionBehaviorAdjuster {
            }
        }
        /** Stringification. */
        namespace Callbacks {
        }
        /** Stringification. */
        namespace Color {
        }
        /** Stringification. */
        namespace StringUtility {
        }
    }
    /** Stringification. */
    namespace ssa_unfiltered_cfg {
        /** Stringification. */
        namespace ReachingDef {
        }
    }
    /** Stringification. */
    namespace ConstrGraph {
    }
    /** Stringification. */
    namespace CGFunction {
        /** Stringification. */
        namespace iterator {
        }
    }
    /** Stringification. */
    namespace TaintLattice {
    }
    /** Stringification. */
    namespace CFG {
    }
    /** Stringification. */
    namespace RIFG {
    }
    /** Stringification. */
    namespace CallGraph {
    }
    /** Stringification. */
    namespace BaseGraph {
        /** Stringification. */
        namespace BiDirNodesIterator {
        }
    }
    /** Stringification. */
    namespace PtrAliasAnalysis {
    }
    /** Stringification. */
    namespace CollectAliasRelations {
    }
    /** Stringification. */
    namespace DominatorTreesAndDominanceFrontiers {
        /** Stringification. */
        namespace DominatorTree {
        }
    }
    /** Stringification. */
    namespace ReachingDef {
    }
    /** Stringification. */
    namespace ArithmeticIntensityMeasurement {
    }
    /** Stringification. */
    namespace SDG {
        /** Stringification. */
        namespace PDGEdge {
        }
        /** Stringification. */
        namespace SDGNode {
        }
        /** Stringification. */
        namespace SDGEdge {
        }
    }
    /** Stringification. */
    namespace MidLevelCollectionTypedefs {
    }
    /** Stringification. */
    namespace HighLevelCollectionTypedefs {
    }
    /** Stringification. */
    namespace klt_tile_desc_t {
    }
    /** Stringification. */
    namespace KLT {
        /** Stringification. */
        namespace LoopTree {
        }
        /** Stringification. */
        namespace Descriptor {
        }
    }
    /** Stringification. */
    namespace AbstractMemoryObject {
        /** Stringification. */
        namespace IndexSet {
        }
    }
    /** Stringification. */
    namespace MDCG {
        /** Stringification. */
        namespace Model {
            /** Stringification. */
            namespace element_t {
            }
        }
    }
    /** Stringification. */
    namespace NumberQuery {
    }
    /** Stringification. */
    namespace BooleanQuery {
    }
    /** Stringification. */
    namespace AstQueryNamespace {
    }
    /** Stringification. */
    namespace NameQuery {
    }
    /** Stringification. */
    namespace NodeQuery {
    }
    /** Stringification. */
    namespace MatchStatus {
    }
    /** Stringification. */
    namespace MFB {
        /** Stringification. */
        namespace Graph {
            /** Stringification. */
            namespace API {
            }
        }
    }
    /** Stringification. */
    namespace CodeThorn {
        /** Stringification. */
        namespace LabelProperty {
        }
    }
    /** Stringification. */
    namespace SgNodeHelper {
        /** Stringification. */
        namespace Pattern {
            /** Stringification. */
            namespace OutputTarget {
            }
        }
    }
    /** Stringification. */
    namespace AstUnparseAttribute {
    }
    /** Stringification. */
    namespace AstAttribute {
    }
    /** Stringification. */
    namespace TransformationSupport {
    }
    /** Stringification. */
    namespace SqlDatabase {
    }
    /** Stringification. */
    namespace QPanelLayout {
    }
    /** Stringification. */
    namespace QLanguageDefinition {
    }
    /** Stringification. */
    namespace QParenthesis {
    }
    /** Stringification. */
    namespace QDocumentLine {
    }
    /** Stringification. */
    namespace QDocumentCursor {
    }
    /** Stringification. */
    namespace QDocument {
    }
    /** Stringification. */
    namespace QDocumentCommand {
    }
    /** Stringification. */
    namespace QDocumentSearch {
    }
    /** Stringification. */
    namespace QDocumentCursorHandle {
    }
    /** Stringification. */
    namespace QReliableFileWatch {
    }
    /** Stringification. */
    namespace QNFAAction {
    }
    /** Stringification. */
    namespace QNFADefinition {
        /** Stringification. */
        namespace PMatch {
        }
    }
    /** Stringification. */
    namespace QCodeEdit {
    }
    /** Stringification. */
    namespace QEditor {
    }
    /** Stringification. */
    namespace QtColorLine {
    }
    /** Stringification. */
    namespace QtGradientWidgetPrivate {
    }
    /** Stringification. */
    namespace Task {
    }
    /** Stringification. */
    namespace CompilerOutputWidget {
    }
    /** Stringification. */
    namespace DisplayEdge {
    }
    /** Stringification. */
    namespace AstDisplayInfo {
    }
    /** Stringification. */
    namespace DependencyInfo {
    }
    /** Stringification. */
    namespace FailSafe {
    }
    /** Stringification. */
    namespace GenRepresentation {
    }
    /** Stringification. */
    namespace UnparseLanguageIndependentConstructs {
    }
    /** Stringification. */
    namespace Unparser {
    }
    /** Stringification. */
    namespace Unparse_ExprStmt {
    }
    /** Stringification. */
    namespace csharp_translator {
    }
    /** Stringification. */
    namespace dot {
    }
    /** Stringification. */
    namespace ClangToSageTranslator {
    }
    /** Stringification. */
    namespace a_type_wrapper {
    }
    /** Stringification. */
    namespace a_class_type_wrapper {
    }
    /** Stringification. */
    namespace a_type_indirection {
    }
    /** Stringification. */
    namespace an_array_type_wrapper {
    }
    /** Stringification. */
    namespace an_accessibility {
    }
    /** Stringification. */
    namespace a_type_definition {
    }
    /** Stringification. */
    namespace __cxxabiv1 {
        /** Stringification. */
        namespace __base_class_type_info {
        }
        /** Stringification. */
        namespace __vmi_class_type_info {
        }
        /** Stringification. */
        namespace __pbase_type_info {
        }
    }
    /** Stringification. */
    namespace LanguageTranslation {
    }
    /** Stringification. */
    namespace FAST {
        /** Stringification. */
        namespace TypeSpec {
        }
        /** Stringification. */
        namespace AttrSpec {
        }
        /** Stringification. */
        namespace UseStmt {
        }
        /** Stringification. */
        namespace PrefixSpec {
        }
    }
    /** Stringification. */
    namespace Jovial_ROSE_Translation {
    }
    /** Stringification. */
    namespace ROSE_Fortran_defs {
    }
    /** Stringification. */
    namespace Fortran_ROSE_Translation {
    }
    /** Stringification. */
    namespace Ada_ROSE_Translation {
    }
    /** Stringification. */
    namespace ByteOrder {
    }
    /** Stringification. */
    namespace PreprocessingInfo {
    }
    /** Stringification. */
    namespace ROSEAttributesList {
    }
    /** Stringification. */
    namespace ROSE_token_ids {
    }
    /** Stringification. */
    namespace SageBuilder {
    }
    /** Stringification. */
    namespace VirtualBinCFG {
    }
    /** Stringification. */
    namespace VirtualCFG {
    }
    /** Stringification. */
    namespace AST_Graph {
    }
    /** Stringification. */
    namespace AstAttributeDOT {
    }
    /** Stringification. */
    namespace DOTGraphNode {
    }
    /** Stringification. */
    namespace DOTGraphEdge {
    }
    /** Stringification. */
    namespace Cobol_ROSE_Translation {
    }
    /** Stringification. */
    namespace Sawyer {
        /** Stringification. */
        namespace CommandLine {
            /** Stringification. */
            namespace Parser {
            }
        }
        /** Stringification. */
        namespace Language {
            /** Stringification. */
            namespace Clexer {
            }
        }
        /** Stringification. */
        namespace Message {
            /** Stringification. */
            namespace Prefix {
            }
        }
        /** Stringification. */
        namespace Container {
            /** Stringification. */
            namespace Algorithm {
            }
            /** Stringification. */
            namespace Graph {
            }
        }
        /** Stringification. */
        namespace Database {
            /** Stringification. */
            namespace Statement {
            }
        }
        /** Stringification. */
        namespace Access {
        }
        /** Stringification. */
        namespace Document {
            /** Stringification. */
            namespace Markup {
            }
        }
        /** Stringification. */
        namespace Tree {
            /** Stringification. */
            namespace Node {
            }
        }
    }
    /** Stringification. */
    namespace qrs {
        /** Stringification. */
        namespace QREdit {
        }
        /** Stringification. */
        namespace QRButtons {
        }
        /** Stringification. */
        namespace QRSelect {
        }
        /** Stringification. */
        namespace QRTreeBox {
        }
        /** Stringification. */
        namespace Symbol {
        }
        /** Stringification. */
        namespace Paren {
        }
        /** Stringification. */
        namespace ParenMatcher {
        }
        /** Stringification. */
        namespace QRSourceBox {
        }
        /** Stringification. */
        namespace QEditor {
        }
        /** Stringification. */
        namespace Q3TextStringChar {
        }
        /** Stringification. */
        namespace Q3TextCursor {
        }
        /** Stringification. */
        namespace Q3TextCommand {
        }
        /** Stringification. */
        namespace Q3TextCustomItem {
        }
        /** Stringification. */
        namespace Q3TextDocument {
        }
        /** Stringification. */
        namespace Q3TextPreProcessor {
        }
        /** Stringification. */
        namespace Q3TextFormat {
        }
        /** Stringification. */
        namespace QSourceColorizer {
        }
    }
    /** Stringification. */
    namespace DOTGeneration {
    }
    /** Stringification. */
    namespace AstNodeClass {
    }
    /** Stringification. */
    namespace SgAsmRiscOperation {
    }
    /** Stringification. */
    namespace SgAsmFloatType {
    }
    /** Stringification. */
    namespace SgAsmFunction {
    }
    /** Stringification. */
    namespace SgAsmBlock {
    }
    /** Stringification. */
    namespace SgAsmElfFileHeader {
    }
    /** Stringification. */
    namespace SgAsmElfSectionTableEntry {
    }
    /** Stringification. */
    namespace SgAsmElfSegmentTableEntry {
    }
    /** Stringification. */
    namespace SgAsmElfSymbol {
    }
    /** Stringification. */
    namespace SgAsmElfRelocEntry {
    }
    /** Stringification. */
    namespace SgAsmElfDynamicEntry {
    }
    /** Stringification. */
    namespace SgAsmPEFileHeader {
    }
    /** Stringification. */
    namespace SgAsmPESectionTableEntry {
    }
    /** Stringification. */
    namespace SgAsmGenericSymbol {
    }
    /** Stringification. */
    namespace SgAsmGenericSection {
    }
    /** Stringification. */
    namespace SgAsmGenericFile {
    }
    /** Stringification. */
    namespace SgAsmExecutableFileFormat {
    }
    /** Stringification. */
    namespace SgConstVolatileModifier {
    }
    /** Stringification. */
    namespace SgStorageModifier {
    }
    /** Stringification. */
    namespace SgAccessModifier {
    }
    /** Stringification. */
    namespace SgFunctionModifier {
    }
    /** Stringification. */
    namespace SgUPC_AccessModifier {
    }
    /** Stringification. */
    namespace SgSpecialFunctionModifier {
    }
    /** Stringification. */
    namespace SgElaboratedTypeModifier {
    }
    /** Stringification. */
    namespace SgLinkageModifier {
    }
    /** Stringification. */
    namespace SgBaseClassModifier {
    }
    /** Stringification. */
    namespace SgStructureModifier {
    }
    /** Stringification. */
    namespace SgTypeModifier {
    }
    /** Stringification. */
    namespace SgDeclarationModifier {
    }
    /** Stringification. */
    namespace SgOpenclAccessModeModifier {
    }
    /** Stringification. */
    namespace Sg_File_Info {
    }
    /** Stringification. */
    namespace SgFile {
    }
    /** Stringification. */
    namespace SgProject {
    }
    /** Stringification. */
    namespace SgUnparse_Info {
    }
    /** Stringification. */
    namespace SgTemplateParameter {
    }
    /** Stringification. */
    namespace SgTemplateArgument {
    }
    /** Stringification. */
    namespace SgGraph {
    }
    /** Stringification. */
    namespace SgDataStatementValue {
    }
    /** Stringification. */
    namespace SgType {
    }
    /** Stringification. */
    namespace SgJovialTableType {
    }
    /** Stringification. */
    namespace SgModifierType {
    }
    /** Stringification. */
    namespace SgMemberFunctionType {
    }
    /** Stringification. */
    namespace SgLocatedNode {
    }
    /** Stringification. */
    namespace SgToken {
    }
    /** Stringification. */
    namespace SgInitializedName {
    }
    /** Stringification. */
    namespace SgOmpClause {
    }
    /** Stringification. */
    namespace SgUntypedType {
    }
    /** Stringification. */
    namespace SgForAllStatement {
    }
    /** Stringification. */
    namespace SgDeclarationStatement {
    }
    /** Stringification. */
    namespace SgVariableDeclaration {
    }
    /** Stringification. */
    namespace SgAttributeSpecificationStatement {
    }
    /** Stringification. */
    namespace SgTemplateDeclaration {
    }
    /** Stringification. */
    namespace SgInterfaceStatement {
    }
    /** Stringification. */
    namespace SgClassDeclaration {
    }
    /** Stringification. */
    namespace SgTemplateClassDeclaration {
    }
    /** Stringification. */
    namespace SgProcedureHeaderStatement {
    }
    /** Stringification. */
    namespace SgJovialDirectiveStatement {
    }
    /** Stringification. */
    namespace SgProcessControlStatement {
    }
    /** Stringification. */
    namespace SgIOStatement {
    }
    /** Stringification. */
    namespace SgImageControlStatement {
    }
    /** Stringification. */
    namespace SgUnaryOp {
    }
    /** Stringification. */
    namespace SgCastExp {
    }
    /** Stringification. */
    namespace SgThrowOp {
    }
    /** Stringification. */
    namespace SgAsmOp {
    }
    /** Stringification. */
    namespace SgLabelSymbol {
    }
    /** Stringification. */
    namespace SgAsmLEFileHeader {
    }
    /** Stringification. */
    namespace SgAsmNEFileHeader {
    }
    /** Stringification. */
    namespace SgAsmNEEntryPoint {
    }
    /** Stringification. */
    namespace SgAsmNERelocEntry {
    }
    /** Stringification. */
    namespace SgAsmNESectionTableEntry {
    }
    /** Stringification. */
    namespace SgAsmLESectionTableEntry {
    }
}

#endif
